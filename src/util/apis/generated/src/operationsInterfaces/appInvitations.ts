/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  AppInvitationsRejectOptionalParams,
  AppInvitationsAcceptOptionalParams,
  AppInvitationsCreateByEmailOptionalParams,
  Enum301,
  AppInvitationsUpdatePermissionsOptionalParams,
  AppInvitationsDeleteOptionalParams,
  AppInvitationsCreateOptionalParams,
  AppInvitationsListOptionalParams,
  AppInvitationsListResponse
} from "../models";

/** Interface representing a AppInvitations. */
export interface AppInvitations {
  /**
   * Rejects a pending invitation for the specified user
   * @param invitationToken The app invitation token that was sent to the user
   * @param options The options parameters.
   */
  reject(
    invitationToken: string,
    options?: AppInvitationsRejectOptionalParams
  ): Promise<void>;
  /**
   * Accepts a pending invitation for the specified user
   * @param invitationToken The app invitation token that was sent to the user
   * @param options The options parameters.
   */
  accept(
    invitationToken: string,
    options?: AppInvitationsAcceptOptionalParams
  ): Promise<void>;
  /**
   * Invites a new or existing user to an app
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param userEmail The email of the user to invite
   * @param options The options parameters.
   */
  createByEmail(
    ownerName: string,
    appName: string,
    userEmail: string,
    options?: AppInvitationsCreateByEmailOptionalParams
  ): Promise<void>;
  /**
   * Update pending invitation permission
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param userEmail The email of the user to invite
   * @param permissions The permissions the user has for the app in the invitation
   * @param options The options parameters.
   */
  updatePermissions(
    ownerName: string,
    appName: string,
    userEmail: string,
    permissions: Enum301[],
    options?: AppInvitationsUpdatePermissionsOptionalParams
  ): Promise<void>;
  /**
   * Removes a user's invitation to an app
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param userEmail The email of the user to invite
   * @param options The options parameters.
   */
  delete(
    ownerName: string,
    appName: string,
    userEmail: string,
    options?: AppInvitationsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Invites a new or existing user to an app
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param userEmail The user's email address
   * @param options The options parameters.
   */
  create(
    ownerName: string,
    appName: string,
    userEmail: string,
    options?: AppInvitationsCreateOptionalParams
  ): Promise<void>;
  /**
   * Gets the pending invitations for the app
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param options The options parameters.
   */
  list(
    ownerName: string,
    appName: string,
    options?: AppInvitationsListOptionalParams
  ): Promise<AppInvitationsListResponse>;
}
