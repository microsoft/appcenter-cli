/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  Paths1Jpgih6V01UsersUserIdDevicesRegisterPostRequestbodyContentApplicationJsonSchema as Paths1Jpgih6V01UsersUserIdDevicesRegisterPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths2EstpdV01UserPatchRequestbodyContentApplicationJsonSchema as Paths2EstpdV01UserPatchRequestbodyContentApplicationJsonSchemaMapper,
  PathsP1N751V01OrgsOrgNameUsersUserNamePatchRequestbodyContentApplicationJsonSchema as PathsP1N751V01OrgsOrgNameUsersUserNamePatchRequestbodyContentApplicationJsonSchemaMapper,
  PathsMtzmgwV01OrgsOrgNameInvitationsEmailResendPostRequestbodyContentApplicationJsonSchema as PathsMtzmgwV01OrgsOrgNameInvitationsEmailResendPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths8S96O5V01OrgsOrgNameInvitationsEmailPatchRequestbodyContentApplicationJsonSchema as Paths8S96O5V01OrgsOrgNameInvitationsEmailPatchRequestbodyContentApplicationJsonSchemaMapper,
  PathsVoxne2V01OrgsOrgNameInvitationsPostRequestbodyContentApplicationJsonSchema as PathsVoxne2V01OrgsOrgNameInvitationsPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths2KqsncV01OrgsOrgNameInvitationsDeleteRequestbodyContentApplicationJsonSchema as Paths2KqsncV01OrgsOrgNameInvitationsDeleteRequestbodyContentApplicationJsonSchemaMapper,
  Paths1Uclv96V01AppsOwnerNameAppNameInvitationsUserEmailPatchRequestbodyContentApplicationJsonSchema as Paths1Uclv96V01AppsOwnerNameAppNameInvitationsUserEmailPatchRequestbodyContentApplicationJsonSchemaMapper,
  Paths1CzjavmV01AppsOwnerNameAppNameInvitationsPostRequestbodyContentApplicationJsonSchema as Paths1CzjavmV01AppsOwnerNameAppNameInvitationsPostRequestbodyContentApplicationJsonSchemaMapper,
  PathsQga5LlV01UserDsrDeleteTokenCancelPostRequestbodyContentApplicationJsonSchema as PathsQga5LlV01UserDsrDeleteTokenCancelPostRequestbodyContentApplicationJsonSchemaMapper,
  PathsOjvewzV01AppsOwnerNameAppNameReleasesReleaseIdTestersTesterIdPutRequestbodyContentApplicationJsonSchema as PathsOjvewzV01AppsOwnerNameAppNameReleasesReleaseIdTestersTesterIdPutRequestbodyContentApplicationJsonSchemaMapper,
  PathsF6Ye6UV01AppsOwnerNameAppNameReleasesReleaseIdTestersPostRequestbodyContentApplicationJsonSchema as PathsF6Ye6UV01AppsOwnerNameAppNameReleasesReleaseIdTestersPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths19I3T9ZV01AppsOwnerNameAppNameReleasesReleaseIdStoresPostRequestbodyContentApplicationJsonSchema as Paths19I3T9ZV01AppsOwnerNameAppNameReleasesReleaseIdStoresPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths1Y3U3TvV01AppsOwnerNameAppNameReleasesReleaseIdGroupsGroupIdPutRequestbodyContentApplicationJsonSchema as Paths1Y3U3TvV01AppsOwnerNameAppNameReleasesReleaseIdGroupsGroupIdPutRequestbodyContentApplicationJsonSchemaMapper,
  Paths1Jif7RyV01AppsOwnerNameAppNameReleasesReleaseIdGroupsPostRequestbodyContentApplicationJsonSchema as Paths1Jif7RyV01AppsOwnerNameAppNameReleasesReleaseIdGroupsPostRequestbodyContentApplicationJsonSchemaMapper,
  PathsQ3NwdwV01AppsOwnerNameAppNameReleasesReleaseIdPutRequestbodyContentApplicationJsonSchema as PathsQ3NwdwV01AppsOwnerNameAppNameReleasesReleaseIdPutRequestbodyContentApplicationJsonSchemaMapper,
  Paths1Veut4NV01AppsOwnerNameAppNameReleasesReleaseIdPatchRequestbodyContentApplicationJsonSchema as Paths1Veut4NV01AppsOwnerNameAppNameReleasesReleaseIdPatchRequestbodyContentApplicationJsonSchemaMapper,
  PathsDf5UdfV01OrgsOrgNameAppsPostRequestbodyContentApplicationJsonSchema as PathsDf5UdfV01OrgsOrgNameAppsPostRequestbodyContentApplicationJsonSchemaMapper,
  PathsG6C5PhV01AppsOwnerNameAppNameUsersUserEmailPatchRequestbodyContentApplicationJsonSchema as PathsG6C5PhV01AppsOwnerNameAppNameUsersUserEmailPatchRequestbodyContentApplicationJsonSchemaMapper,
  PathsMhqbvhV01AppsOwnerNameAppNamePatchRequestbodyContentApplicationJsonSchema as PathsMhqbvhV01AppsOwnerNameAppNamePatchRequestbodyContentApplicationJsonSchemaMapper,
  Paths1XqwatgV01AppsPostRequestbodyContentApplicationJsonSchema as Paths1XqwatgV01AppsPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths3EixoV01OrgsOrgNameDistributionGroupsDistributionGroupNameResendInvitePostRequestbodyContentApplicationJsonSchema as Paths3EixoV01OrgsOrgNameDistributionGroupsDistributionGroupNameResendInvitePostRequestbodyContentApplicationJsonSchemaMapper,
  Paths10EomnwV01OrgsOrgNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostRequestbodyContentApplicationJsonSchema as Paths10EomnwV01OrgsOrgNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostRequestbodyContentApplicationJsonSchemaMapper,
  PathsSmhj37V01OrgsOrgNameDistributionGroupsDistributionGroupNameMembersPostRequestbodyContentApplicationJsonSchema as PathsSmhj37V01OrgsOrgNameDistributionGroupsDistributionGroupNameMembersPostRequestbodyContentApplicationJsonSchemaMapper,
  PathsMs4QhdV01OrgsOrgNameDistributionGroupsDistributionGroupNameAppsBulkDeletePostRequestbodyContentApplicationJsonSchema as PathsMs4QhdV01OrgsOrgNameDistributionGroupsDistributionGroupNameAppsBulkDeletePostRequestbodyContentApplicationJsonSchemaMapper,
  PathsIy66N7V01OrgsOrgNameDistributionGroupsDistributionGroupNameAppsPostRequestbodyContentApplicationJsonSchema as PathsIy66N7V01OrgsOrgNameDistributionGroupsDistributionGroupNameAppsPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths6RaacuV01OrgsOrgNameDistributionGroupsDistributionGroupNamePatchRequestbodyContentApplicationJsonSchema as Paths6RaacuV01OrgsOrgNameDistributionGroupsDistributionGroupNamePatchRequestbodyContentApplicationJsonSchemaMapper,
  Paths150Qpz7V01OrgsOrgNameDistributionGroupsPostRequestbodyContentApplicationJsonSchema as Paths150Qpz7V01OrgsOrgNameDistributionGroupsPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths1C26JzV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameResendInvitePostRequestbodyContentApplicationJsonSchema as Paths1C26JzV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameResendInvitePostRequestbodyContentApplicationJsonSchemaMapper,
  PathsLx7ZdvV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostRequestbodyContentApplicationJsonSchema as PathsLx7ZdvV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostRequestbodyContentApplicationJsonSchemaMapper,
  Paths9330UyV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersPostRequestbodyContentApplicationJsonSchema as Paths9330UyV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths1Y98SmdV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNamePatchRequestbodyContentApplicationJsonSchema as Paths1Y98SmdV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNamePatchRequestbodyContentApplicationJsonSchemaMapper,
  PathsFdbuo5V01AppsOwnerNameAppNameDistributionGroupsPostRequestbodyContentApplicationJsonSchema as PathsFdbuo5V01AppsOwnerNameAppNameDistributionGroupsPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths1Cc9FkbV01OrgsOrgNameTeamsTeamNameUsersPostRequestbodyContentApplicationJsonSchema as Paths1Cc9FkbV01OrgsOrgNameTeamsTeamNameUsersPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths1HiscesV01OrgsOrgNameTeamsTeamNameAppsAppNamePatchRequestbodyContentApplicationJsonSchema as Paths1HiscesV01OrgsOrgNameTeamsTeamNameAppsAppNamePatchRequestbodyContentApplicationJsonSchemaMapper,
  Paths3K4Kv5V01OrgsOrgNameTeamsTeamNameAppsPostRequestbodyContentApplicationJsonSchema as Paths3K4Kv5V01OrgsOrgNameTeamsTeamNameAppsPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths1414Qm7V01OrgsOrgNameTeamsTeamNamePatchRequestbodyContentApplicationJsonSchema as Paths1414Qm7V01OrgsOrgNameTeamsTeamNamePatchRequestbodyContentApplicationJsonSchemaMapper,
  Paths1Iu7UzV01OrgsOrgNameTeamsPostRequestbodyContentApplicationJsonSchema as Paths1Iu7UzV01OrgsOrgNameTeamsPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths11GzlnuV01AppsOwnerNameAppNameAzureSubscriptionsPostRequestbodyContentApplicationJsonSchema as Paths11GzlnuV01AppsOwnerNameAppNameAzureSubscriptionsPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths600DxeV01OrgsOrgNamePatchRequestbodyContentApplicationJsonSchema as Paths600DxeV01OrgsOrgNamePatchRequestbodyContentApplicationJsonSchemaMapper,
  Paths184FzfwV01OrgsPostRequestbodyContentApplicationJsonSchema as Paths184FzfwV01OrgsPostRequestbodyContentApplicationJsonSchemaMapper,
  PathsPkpkpaV01LegacyReportstatusDownloadPostRequestbodyContentApplicationJsonSchema as PathsPkpkpaV01LegacyReportstatusDownloadPostRequestbodyContentApplicationJsonSchemaMapper,
  PathsIy9KlqV01LegacyReportstatusDeployPostRequestbodyContentApplicationJsonSchema as PathsIy9KlqV01LegacyReportstatusDeployPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths1P28L53V01AppsOwnerNameAppNameBuildsBuildIdDistributePostRequestbodyContentApplicationJsonSchema as Paths1P28L53V01AppsOwnerNameAppNameBuildsBuildIdDistributePostRequestbodyContentApplicationJsonSchemaMapper,
  PathsFcn32WV01AppsOwnerNameAppNameBuildsBuildIdPatchRequestbodyContentApplicationJsonSchema as PathsFcn32WV01AppsOwnerNameAppNameBuildsBuildIdPatchRequestbodyContentApplicationJsonSchemaMapper,
  Paths1Jgsne9V01AppsOwnerNameAppNameBranchesBranchBuildsPostRequestbodyContentApplicationJsonSchema as Paths1Jgsne9V01AppsOwnerNameAppNameBranchesBranchBuildsPostRequestbodyContentApplicationJsonSchemaMapper,
  DeviceSetUpdateInformation as DeviceSetUpdateInformationMapper,
  DeviceSetUpdateInformation0 as DeviceSetUpdateInformation0Mapper,
  NameOfTheTestSeries as NameOfTheTestSeriesMapper,
  NameOfTheTestSeries0 as NameOfTheTestSeries0Mapper,
  TestCloudStartTestRunOptions as TestCloudStartTestRunOptionsMapper,
  TestCloudFileHash as TestCloudFileHashMapper,
  DeviceSetUpdateInformation1 as DeviceSetUpdateInformation1Mapper,
  DeviceSetUpdateInformation2 as DeviceSetUpdateInformation2Mapper,
  DeviceList as DeviceListMapper,
  PathsQse2V9V01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdPatchRequestbodyContentApplicationJsonSchema as PathsQse2V9V01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdPatchRequestbodyContentApplicationJsonSchemaMapper,
  Paths18RbyikV01AppsOwnerNameAppNameSymbolUploadsPostRequestbodyContentApplicationJsonSchema as Paths18RbyikV01AppsOwnerNameAppNameSymbolUploadsPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths1P54ZxdV01AppsOwnerNameAppNameRepoConfigPostRequestbodyContentApplicationJsonSchema as Paths1P54ZxdV01AppsOwnerNameAppNameRepoConfigPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths1Nw7A47V01AppsOwnerNameAppNamePushNotificationsConfigPutRequestbodyContentApplicationJsonSchema as Paths1Nw7A47V01AppsOwnerNameAppNamePushNotificationsConfigPutRequestbodyContentApplicationJsonSchemaMapper,
  Paths13Dzhd2V01AppsOwnerNameAppNamePushNotificationsPostRequestbodyContentApplicationJsonSchema as Paths13Dzhd2V01AppsOwnerNameAppNamePushNotificationsPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths5M7Cf2V01AppsOwnerNameAppNamePushNotificationsDeleteRequestbodyContentApplicationJsonSchema as Paths5M7Cf2V01AppsOwnerNameAppNamePushNotificationsDeleteRequestbodyContentApplicationJsonSchemaMapper,
  Paths1H0K4SgV01AppsOwnerNameAppNamePushDeviceExportsPostRequestbodyContentApplicationJsonSchema as Paths1H0K4SgV01AppsOwnerNameAppNamePushDeviceExportsPostRequestbodyContentApplicationJsonSchemaMapper,
  PathsEhcfgaV01AppsOwnerNameAppNameExportConfigurationsExportConfigurationIdPatchRequestbodyContentApplicationJsonSchema as PathsEhcfgaV01AppsOwnerNameAppNameExportConfigurationsExportConfigurationIdPatchRequestbodyContentApplicationJsonSchemaMapper,
  Paths1QllskkV01AppsOwnerNameAppNameExportConfigurationsPostRequestbodyContentApplicationJsonSchema as Paths1QllskkV01AppsOwnerNameAppNameExportConfigurationsPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths1V83InnV01AppsOwnerNameAppNameErrorsRetentionSettingsPutRequestbodyContentApplicationJsonSchema as Paths1V83InnV01AppsOwnerNameAppNameErrorsRetentionSettingsPutRequestbodyContentApplicationJsonSchemaMapper,
  PathsHpm6KuV01AppsOwnerNameAppNameErrorsErrorgroupsErrorgroupidPatchRequestbodyContentApplicationJsonSchema as PathsHpm6KuV01AppsOwnerNameAppNameErrorsErrorgroupsErrorgroupidPatchRequestbodyContentApplicationJsonSchemaMapper,
  Paths1Yf5Jp5V01AppsOwnerNameAppNameDistributionStoresStoreNamePatchRequestbodyContentApplicationJsonSchema as Paths1Yf5Jp5V01AppsOwnerNameAppNameDistributionStoresStoreNamePatchRequestbodyContentApplicationJsonSchemaMapper,
  PathsPwsnpuV01AppsOwnerNameAppNameDistributionStoresPostRequestbodyContentApplicationJsonSchema as PathsPwsnpuV01AppsOwnerNameAppNameDistributionStoresPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths1G1PzhgV01AppsOwnerNameAppNameDeploymentsDeploymentNameRollbackReleasePostRequestbodyContentApplicationJsonSchema as Paths1G1PzhgV01AppsOwnerNameAppNameDeploymentsDeploymentNameRollbackReleasePostRequestbodyContentApplicationJsonSchemaMapper,
  PathsZjw2F1V01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesReleaseLabelPatchRequestbodyContentApplicationJsonSchema as PathsZjw2F1V01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesReleaseLabelPatchRequestbodyContentApplicationJsonSchemaMapper,
  Paths1Q5DgwjV01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesPostRequestbodyContentApplicationJsonSchema as Paths1Q5DgwjV01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesPostRequestbodyContentApplicationJsonSchemaMapper,
  PathsOn7Se0V01AppsOwnerNameAppNameDeploymentsDeploymentNamePromoteReleasePromoteDeploymentNamePostRequestbodyContentApplicationJsonSchema as PathsOn7Se0V01AppsOwnerNameAppNameDeploymentsDeploymentNamePromoteReleasePromoteDeploymentNamePostRequestbodyContentApplicationJsonSchemaMapper,
  PathsUaqn8EV01AppsOwnerNameAppNameDeploymentsDeploymentNamePatchRequestbodyContentApplicationJsonSchema as PathsUaqn8EV01AppsOwnerNameAppNameDeploymentsDeploymentNamePatchRequestbodyContentApplicationJsonSchemaMapper,
  Paths1Fgvm7MV01AppsOwnerNameAppNameDeploymentsPostRequestbodyContentApplicationJsonSchema as Paths1Fgvm7MV01AppsOwnerNameAppNameDeploymentsPostRequestbodyContentApplicationJsonSchemaMapper,
  PathsA5R1LbV01AppsOwnerNameAppNameDataResourceProvisioningPostRequestbodyContentApplicationJsonSchema as PathsA5R1LbV01AppsOwnerNameAppNameDataResourceProvisioningPostRequestbodyContentApplicationJsonSchemaMapper,
  PathsT60UxpV01AppsOwnerNameAppNameCrashGroupsCrashGroupIdPatchRequestbodyContentApplicationJsonSchema as PathsT60UxpV01AppsOwnerNameAppNameCrashGroupsCrashGroupIdPatchRequestbodyContentApplicationJsonSchemaMapper,
  PathsXn26H7V01AppsOwnerNameAppNameBranchesBranchConfigPostRequestbodyContentApplicationJsonSchema as PathsXn26H7V01AppsOwnerNameAppNameBranchesBranchConfigPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths1O0K3JpV01AppsOwnerNameAppNameBranchesBranchConfigPutRequestbodyContentApplicationJsonSchema as Paths1O0K3JpV01AppsOwnerNameAppNameBranchesBranchConfigPutRequestbodyContentApplicationJsonSchemaMapper,
  Paths1B7RevxV01AppsOwnerNameAppNameAppleMappingPostRequestbodyContentApplicationJsonSchema as Paths1B7RevxV01AppsOwnerNameAppNameAppleMappingPostRequestbodyContentApplicationJsonSchemaMapper,
  PathsUuian4V01AppsOwnerNameAppNameApiTokensPostRequestbodyContentApplicationJsonSchema as PathsUuian4V01AppsOwnerNameAppNameApiTokensPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths1Pzxl78V01AppsOwnerNameAppNameAnalyticsDistributionReleaseCountsPostRequestbodyContentApplicationJsonSchema as Paths1Pzxl78V01AppsOwnerNameAppNameAnalyticsDistributionReleaseCountsPostRequestbodyContentApplicationJsonSchemaMapper,
  PathsDc3Tj4V01AppsOwnerNameAppNameAnalyticsCrashGroupsPostRequestbodyContentApplicationJsonSchema as PathsDc3Tj4V01AppsOwnerNameAppNameAnalyticsCrashGroupsPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths2Mes8QV01AppsOwnerNameAppNameAnalyticsAudiencesAudienceNamePutRequestbodyContentApplicationJsonSchema as Paths2Mes8QV01AppsOwnerNameAppNameAnalyticsAudiencesAudienceNamePutRequestbodyContentApplicationJsonSchemaMapper,
  Paths16F7ScgV01AppsOwnerNameAppNameAnalyticsAudiencesDefinitionTestPostRequestbodyContentApplicationJsonSchema as Paths16F7ScgV01AppsOwnerNameAppNameAnalyticsAudiencesDefinitionTestPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths163K2XcV01ApiTokensPostRequestbodyContentApplicationJsonSchema as Paths163K2XcV01ApiTokensPostRequestbodyContentApplicationJsonSchemaMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: Paths1Jpgih6V01UsersUserIdDevicesRegisterPostRequestbodyContentApplicationJsonSchemaMapper
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const userId: OperationURLParameter = {
  parameterPath: "userId",
  mapper: {
    serializedName: "user_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const deviceUdid: OperationURLParameter = {
  parameterPath: "deviceUdid",
  mapper: {
    serializedName: "device_udid",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const releaseId: OperationURLParameter = {
  parameterPath: "releaseId",
  mapper: {
    serializedName: "release_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resignId: OperationURLParameter = {
  parameterPath: "resignId",
  mapper: {
    serializedName: "resign_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const includeProvisioningProfile: OperationQueryParameter = {
  parameterPath: ["options", "includeProvisioningProfile"],
  mapper: {
    serializedName: "include_provisioning_profile",
    type: {
      name: "Boolean"
    }
  }
};

export const ownerName: OperationURLParameter = {
  parameterPath: "ownerName",
  mapper: {
    serializedName: "owner_name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const appName: OperationURLParameter = {
  parameterPath: "appName",
  mapper: {
    serializedName: "app_name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const distributionGroupName: OperationURLParameter = {
  parameterPath: "distributionGroupName",
  mapper: {
    serializedName: "distribution_group_name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const unprovisionedOnly: OperationQueryParameter = {
  parameterPath: ["options", "unprovisionedOnly"],
  mapper: {
    defaultValue: false,
    serializedName: "unprovisioned_only",
    type: {
      name: "Boolean"
    }
  }
};

export const udids: OperationQueryParameter = {
  parameterPath: ["options", "udids"],
  mapper: {
    serializedName: "udids",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const releaseId1: OperationQueryParameter = {
  parameterPath: ["options", "releaseId"],
  mapper: {
    serializedName: "release_id",
    type: {
      name: "Number"
    }
  }
};

export const installId: OperationURLParameter = {
  parameterPath: "installId",
  mapper: {
    serializedName: "install_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const displayName: OperationParameter = {
  parameterPath: ["options", "displayName"],
  mapper: Paths2EstpdV01UserPatchRequestbodyContentApplicationJsonSchemaMapper
};

export const role: OperationParameter = {
  parameterPath: ["options", "role"],
  mapper: PathsP1N751V01OrgsOrgNameUsersUserNamePatchRequestbodyContentApplicationJsonSchemaMapper
};

export const orgName: OperationURLParameter = {
  parameterPath: "orgName",
  mapper: {
    serializedName: "org_name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const userName: OperationURLParameter = {
  parameterPath: "userName",
  mapper: {
    serializedName: "user_name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const invitationToken: OperationURLParameter = {
  parameterPath: "invitationToken",
  mapper: {
    serializedName: "invitation_token",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const email: OperationURLParameter = {
  parameterPath: "email",
  mapper: {
    serializedName: "email",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const role2: OperationParameter = {
  parameterPath: ["options", "role"],
  mapper: PathsMtzmgwV01OrgsOrgNameInvitationsEmailResendPostRequestbodyContentApplicationJsonSchemaMapper
};

export const role3: OperationParameter = {
  parameterPath: ["options", "role"],
  mapper: Paths8S96O5V01OrgsOrgNameInvitationsEmailPatchRequestbodyContentApplicationJsonSchemaMapper
};

export const userEmail1: OperationParameter = {
  parameterPath: "userEmail",
  mapper: PathsVoxne2V01OrgsOrgNameInvitationsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const role4: OperationParameter = {
  parameterPath: ["options", "role"],
  mapper: PathsVoxne2V01OrgsOrgNameInvitationsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const userEmail3: OperationParameter = {
  parameterPath: "userEmail",
  mapper: Paths2KqsncV01OrgsOrgNameInvitationsDeleteRequestbodyContentApplicationJsonSchemaMapper
};

export const userEmail4: OperationURLParameter = {
  parameterPath: "userEmail",
  mapper: {
    serializedName: "user_email",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const permissions: OperationParameter = {
  parameterPath: "permissions",
  mapper: Paths1Uclv96V01AppsOwnerNameAppNameInvitationsUserEmailPatchRequestbodyContentApplicationJsonSchemaMapper
};

export const userEmail6: OperationParameter = {
  parameterPath: "userEmail",
  mapper: Paths1CzjavmV01AppsOwnerNameAppNameInvitationsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const role5: OperationParameter = {
  parameterPath: ["options", "role"],
  mapper: Paths1CzjavmV01AppsOwnerNameAppNameInvitationsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const token: OperationURLParameter = {
  parameterPath: "token",
  mapper: {
    serializedName: "token",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const email2: OperationParameter = {
  parameterPath: "email",
  mapper: PathsQga5LlV01UserDsrDeleteTokenCancelPostRequestbodyContentApplicationJsonSchemaMapper
};

export const email3: OperationQueryParameter = {
  parameterPath: "email",
  mapper: {
    serializedName: "email",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const appSecret: OperationURLParameter = {
  parameterPath: "appSecret",
  mapper: {
    serializedName: "app_secret",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const releaseHash: OperationURLParameter = {
  parameterPath: "releaseHash",
  mapper: {
    serializedName: "release_hash",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const udid: OperationQueryParameter = {
  parameterPath: ["options", "udid"],
  mapper: {
    serializedName: "udid",
    type: {
      name: "String"
    }
  }
};

export const testerId: OperationURLParameter = {
  parameterPath: "testerId",
  mapper: {
    serializedName: "tester_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const mandatoryUpdate: OperationParameter = {
  parameterPath: "mandatoryUpdate",
  mapper: PathsOjvewzV01AppsOwnerNameAppNameReleasesReleaseIdTestersTesterIdPutRequestbodyContentApplicationJsonSchemaMapper
};

export const releaseId2: OperationURLParameter = {
  parameterPath: "releaseId",
  mapper: {
    serializedName: "release_id",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const testerId1: OperationURLParameter = {
  parameterPath: "testerId",
  mapper: {
    serializedName: "tester_id",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const mandatoryUpdate1: OperationParameter = {
  parameterPath: ["options", "mandatoryUpdate"],
  mapper: PathsF6Ye6UV01AppsOwnerNameAppNameReleasesReleaseIdTestersPostRequestbodyContentApplicationJsonSchemaMapper
};

export const email4: OperationParameter = {
  parameterPath: "email",
  mapper: PathsF6Ye6UV01AppsOwnerNameAppNameReleasesReleaseIdTestersPostRequestbodyContentApplicationJsonSchemaMapper
};

export const notifyTesters: OperationParameter = {
  parameterPath: ["options", "notifyTesters"],
  mapper: PathsF6Ye6UV01AppsOwnerNameAppNameReleasesReleaseIdTestersPostRequestbodyContentApplicationJsonSchemaMapper
};

export const storeId: OperationURLParameter = {
  parameterPath: "storeId",
  mapper: {
    serializedName: "store_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const id: OperationParameter = {
  parameterPath: "id",
  mapper: Paths19I3T9ZV01AppsOwnerNameAppNameReleasesReleaseIdStoresPostRequestbodyContentApplicationJsonSchemaMapper
};

export const mandatoryUpdate2: OperationParameter = {
  parameterPath: "mandatoryUpdate",
  mapper: Paths1Y3U3TvV01AppsOwnerNameAppNameReleasesReleaseIdGroupsGroupIdPutRequestbodyContentApplicationJsonSchemaMapper
};

export const groupId: OperationURLParameter = {
  parameterPath: "groupId",
  mapper: {
    serializedName: "group_id",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const groupId1: OperationURLParameter = {
  parameterPath: "groupId",
  mapper: {
    serializedName: "group_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const id1: OperationParameter = {
  parameterPath: "id",
  mapper: Paths1Jif7RyV01AppsOwnerNameAppNameReleasesReleaseIdGroupsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const mandatoryUpdate3: OperationParameter = {
  parameterPath: ["options", "mandatoryUpdate"],
  mapper: Paths1Jif7RyV01AppsOwnerNameAppNameReleasesReleaseIdGroupsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const notifyTesters1: OperationParameter = {
  parameterPath: ["options", "notifyTesters"],
  mapper: Paths1Jif7RyV01AppsOwnerNameAppNameReleasesReleaseIdGroupsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const enabled: OperationParameter = {
  parameterPath: ["options", "enabled"],
  mapper: PathsQ3NwdwV01AppsOwnerNameAppNameReleasesReleaseIdPutRequestbodyContentApplicationJsonSchemaMapper
};

export const releaseNotes: OperationParameter = {
  parameterPath: ["options", "releaseNotes"],
  mapper: PathsQ3NwdwV01AppsOwnerNameAppNameReleasesReleaseIdPutRequestbodyContentApplicationJsonSchemaMapper
};

export const build: OperationParameter = {
  parameterPath: ["options", "build"],
  mapper: PathsQ3NwdwV01AppsOwnerNameAppNameReleasesReleaseIdPutRequestbodyContentApplicationJsonSchemaMapper
};

export const body5: OperationParameter = {
  parameterPath: "body",
  mapper: Paths1Veut4NV01AppsOwnerNameAppNameReleasesReleaseIdPatchRequestbodyContentApplicationJsonSchemaMapper
};

export const publishedOnly: OperationQueryParameter = {
  parameterPath: ["options", "publishedOnly"],
  mapper: {
    serializedName: "published_only",
    type: {
      name: "Boolean"
    }
  }
};

export const scope: OperationQueryParameter = {
  parameterPath: ["options", "scope"],
  mapper: {
    serializedName: "scope",
    type: {
      name: "String"
    }
  }
};

export const app: OperationParameter = {
  parameterPath: "app",
  mapper: PathsDf5UdfV01OrgsOrgNameAppsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const permissions1: OperationParameter = {
  parameterPath: "permissions",
  mapper: PathsG6C5PhV01AppsOwnerNameAppNameUsersUserEmailPatchRequestbodyContentApplicationJsonSchemaMapper
};

export const destinationOwnerName: OperationURLParameter = {
  parameterPath: "destinationOwnerName",
  mapper: {
    serializedName: "destination_owner_name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType1: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/x-www-form-urlencoded",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const avatar: OperationParameter = {
  parameterPath: ["options", "avatar"],
  mapper: {
    serializedName: "avatar",
    type: {
      name: "Stream"
    }
  }
};

export const accept1: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const app1: OperationParameter = {
  parameterPath: ["options", "app"],
  mapper: PathsMhqbvhV01AppsOwnerNameAppNamePatchRequestbodyContentApplicationJsonSchemaMapper
};

export const app2: OperationParameter = {
  parameterPath: "app",
  mapper: Paths1XqwatgV01AppsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const orderBy: OperationQueryParameter = {
  parameterPath: ["options", "orderBy"],
  mapper: {
    serializedName: "$orderBy",
    type: {
      name: "String"
    }
  }
};

export const appsLimit: OperationQueryParameter = {
  parameterPath: ["options", "appsLimit"],
  mapper: {
    serializedName: "apps_limit",
    type: {
      name: "Number"
    }
  }
};

export const userEmails: OperationParameter = {
  parameterPath: ["options", "userEmails"],
  mapper: Paths3EixoV01OrgsOrgNameDistributionGroupsDistributionGroupNameResendInvitePostRequestbodyContentApplicationJsonSchemaMapper
};

export const userEmails1: OperationParameter = {
  parameterPath: ["options", "userEmails"],
  mapper: Paths10EomnwV01OrgsOrgNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostRequestbodyContentApplicationJsonSchemaMapper
};

export const userEmails2: OperationParameter = {
  parameterPath: ["options", "userEmails"],
  mapper: PathsSmhj37V01OrgsOrgNameDistributionGroupsDistributionGroupNameMembersPostRequestbodyContentApplicationJsonSchemaMapper
};

export const apps1: OperationParameter = {
  parameterPath: ["options", "apps"],
  mapper: PathsMs4QhdV01OrgsOrgNameDistributionGroupsDistributionGroupNameAppsBulkDeletePostRequestbodyContentApplicationJsonSchemaMapper
};

export const apps3: OperationParameter = {
  parameterPath: ["options", "apps"],
  mapper: PathsIy66N7V01OrgsOrgNameDistributionGroupsDistributionGroupNameAppsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const name: OperationParameter = {
  parameterPath: ["options", "name"],
  mapper: Paths6RaacuV01OrgsOrgNameDistributionGroupsDistributionGroupNamePatchRequestbodyContentApplicationJsonSchemaMapper
};

export const isPublic: OperationParameter = {
  parameterPath: ["options", "isPublic"],
  mapper: Paths6RaacuV01OrgsOrgNameDistributionGroupsDistributionGroupNamePatchRequestbodyContentApplicationJsonSchemaMapper
};

export const name1: OperationParameter = {
  parameterPath: "name",
  mapper: Paths150Qpz7V01OrgsOrgNameDistributionGroupsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const displayName1: OperationParameter = {
  parameterPath: ["options", "displayName"],
  mapper: Paths150Qpz7V01OrgsOrgNameDistributionGroupsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const userEmails3: OperationParameter = {
  parameterPath: ["options", "userEmails"],
  mapper: Paths1C26JzV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameResendInvitePostRequestbodyContentApplicationJsonSchemaMapper
};

export const userEmails4: OperationParameter = {
  parameterPath: ["options", "userEmails"],
  mapper: PathsLx7ZdvV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostRequestbodyContentApplicationJsonSchemaMapper
};

export const excludePendingInvitations: OperationQueryParameter = {
  parameterPath: ["options", "excludePendingInvitations"],
  mapper: {
    serializedName: "exclude_pending_invitations",
    type: {
      name: "Boolean"
    }
  }
};

export const userEmails5: OperationParameter = {
  parameterPath: ["options", "userEmails"],
  mapper: Paths9330UyV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersPostRequestbodyContentApplicationJsonSchemaMapper
};

export const name2: OperationParameter = {
  parameterPath: ["options", "name"],
  mapper: Paths1Y98SmdV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNamePatchRequestbodyContentApplicationJsonSchemaMapper
};

export const isPublic1: OperationParameter = {
  parameterPath: ["options", "isPublic"],
  mapper: Paths1Y98SmdV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNamePatchRequestbodyContentApplicationJsonSchemaMapper
};

export const name3: OperationParameter = {
  parameterPath: "name",
  mapper: PathsFdbuo5V01AppsOwnerNameAppNameDistributionGroupsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const displayName2: OperationParameter = {
  parameterPath: ["options", "displayName"],
  mapper: PathsFdbuo5V01AppsOwnerNameAppNameDistributionGroupsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const teamName: OperationURLParameter = {
  parameterPath: "teamName",
  mapper: {
    serializedName: "team_name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const userEmail8: OperationParameter = {
  parameterPath: "userEmail",
  mapper: Paths1Cc9FkbV01OrgsOrgNameTeamsTeamNameUsersPostRequestbodyContentApplicationJsonSchemaMapper
};

export const permissions2: OperationParameter = {
  parameterPath: "permissions",
  mapper: Paths1HiscesV01OrgsOrgNameTeamsTeamNameAppsAppNamePatchRequestbodyContentApplicationJsonSchemaMapper
};

export const name4: OperationParameter = {
  parameterPath: "name",
  mapper: Paths3K4Kv5V01OrgsOrgNameTeamsTeamNameAppsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const displayName3: OperationParameter = {
  parameterPath: "displayName",
  mapper: Paths1414Qm7V01OrgsOrgNameTeamsTeamNamePatchRequestbodyContentApplicationJsonSchemaMapper
};

export const displayName4: OperationParameter = {
  parameterPath: "displayName",
  mapper: Paths1Iu7UzV01OrgsOrgNameTeamsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const name5: OperationParameter = {
  parameterPath: ["options", "name"],
  mapper: Paths1Iu7UzV01OrgsOrgNameTeamsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const description: OperationParameter = {
  parameterPath: ["options", "description"],
  mapper: Paths1Iu7UzV01OrgsOrgNameTeamsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const azureSubscriptionId: OperationURLParameter = {
  parameterPath: "azureSubscriptionId",
  mapper: {
    serializedName: "azure_subscription_id",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const subscriptionId: OperationParameter = {
  parameterPath: "subscriptionId",
  mapper: Paths11GzlnuV01AppsOwnerNameAppNameAzureSubscriptionsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const displayName5: OperationParameter = {
  parameterPath: ["options", "displayName"],
  mapper: Paths600DxeV01OrgsOrgNamePatchRequestbodyContentApplicationJsonSchemaMapper
};

export const name6: OperationParameter = {
  parameterPath: ["options", "name"],
  mapper: Paths600DxeV01OrgsOrgNamePatchRequestbodyContentApplicationJsonSchemaMapper
};

export const displayName6: OperationParameter = {
  parameterPath: ["options", "displayName"],
  mapper: Paths184FzfwV01OrgsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const name7: OperationParameter = {
  parameterPath: ["options", "name"],
  mapper: Paths184FzfwV01OrgsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const orgName1: OperationURLParameter = {
  parameterPath: "orgName",
  mapper: {
    serializedName: "orgName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const service: OperationQueryParameter = {
  parameterPath: ["options", "service"],
  mapper: {
    serializedName: "service",
    type: {
      name: "String"
    }
  }
};

export const period: OperationQueryParameter = {
  parameterPath: ["options", "period"],
  mapper: {
    serializedName: "period",
    type: {
      name: "String"
    }
  }
};

export const showOriginalPlans: OperationQueryParameter = {
  parameterPath: ["options", "showOriginalPlans"],
  mapper: {
    serializedName: "showOriginalPlans",
    type: {
      name: "Boolean"
    }
  }
};

export const service1: OperationQueryParameter = {
  parameterPath: ["options", "service"],
  mapper: {
    serializedName: "service",
    type: {
      name: "String"
    }
  }
};

export const period1: OperationQueryParameter = {
  parameterPath: ["options", "period"],
  mapper: {
    serializedName: "period",
    type: {
      name: "String"
    }
  }
};

export const service2: OperationQueryParameter = {
  parameterPath: ["options", "service"],
  mapper: {
    serializedName: "service",
    type: {
      name: "String"
    }
  }
};

export const period2: OperationQueryParameter = {
  parameterPath: ["options", "period"],
  mapper: {
    serializedName: "period",
    type: {
      name: "String"
    }
  }
};

export const deploymentKey: OperationQueryParameter = {
  parameterPath: ["options", "deploymentKey"],
  mapper: {
    serializedName: "deploymentKey",
    type: {
      name: "String"
    }
  }
};

export const appVersion: OperationQueryParameter = {
  parameterPath: ["options", "appVersion"],
  mapper: {
    serializedName: "appVersion",
    type: {
      name: "String"
    }
  }
};

export const packageHash: OperationQueryParameter = {
  parameterPath: ["options", "packageHash"],
  mapper: {
    serializedName: "packageHash",
    type: {
      name: "String"
    }
  }
};

export const label: OperationQueryParameter = {
  parameterPath: ["options", "label"],
  mapper: {
    serializedName: "label",
    type: {
      name: "String"
    }
  }
};

export const clientUniqueId: OperationQueryParameter = {
  parameterPath: ["options", "clientUniqueId"],
  mapper: {
    serializedName: "clientUniqueId",
    type: {
      name: "String"
    }
  }
};

export const isCompanion: OperationQueryParameter = {
  parameterPath: ["options", "isCompanion"],
  mapper: {
    serializedName: "isCompanion",
    type: {
      name: "String"
    }
  }
};

export const releaseMetadata: OperationParameter = {
  parameterPath: "releaseMetadata",
  mapper: PathsPkpkpaV01LegacyReportstatusDownloadPostRequestbodyContentApplicationJsonSchemaMapper
};

export const releaseMetadata1: OperationParameter = {
  parameterPath: "releaseMetadata",
  mapper: PathsIy9KlqV01LegacyReportstatusDeployPostRequestbodyContentApplicationJsonSchemaMapper
};

export const tools: OperationQueryParameter = {
  parameterPath: ["options", "tools"],
  mapper: {
    serializedName: "tools",
    type: {
      name: "String"
    }
  }
};

export const buildId: OperationURLParameter = {
  parameterPath: "buildId",
  mapper: {
    constraints: {
      ExclusiveMinimum: 0
    },
    serializedName: "build_id",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const downloadType: OperationURLParameter = {
  parameterPath: "downloadType",
  mapper: {
    serializedName: "download_type",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const distributeInfo: OperationParameter = {
  parameterPath: "distributeInfo",
  mapper: Paths1P28L53V01AppsOwnerNameAppNameBuildsBuildIdDistributePostRequestbodyContentApplicationJsonSchemaMapper
};

export const status: OperationParameter = {
  parameterPath: ["options", "status"],
  mapper: PathsFcn32WV01AppsOwnerNameAppNameBuildsBuildIdPatchRequestbodyContentApplicationJsonSchemaMapper
};

export const branch: OperationURLParameter = {
  parameterPath: "branch",
  mapper: {
    serializedName: "branch",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const os: OperationQueryParameter = {
  parameterPath: "os",
  mapper: {
    serializedName: "os",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const platform: OperationQueryParameter = {
  parameterPath: "platform",
  mapper: {
    serializedName: "platform",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const maxSearchDepth: OperationQueryParameter = {
  parameterPath: ["options", "maxSearchDepth"],
  mapper: {
    constraints: {
      InclusiveMaximum: 10,
      InclusiveMinimum: 1
    },
    serializedName: "maxSearchDepth",
    type: {
      name: "Number"
    }
  }
};

export const sourceVersion: OperationParameter = {
  parameterPath: ["options", "sourceVersion"],
  mapper: Paths1Jgsne9V01AppsOwnerNameAppNameBranchesBranchBuildsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const debug: OperationParameter = {
  parameterPath: ["options", "debug"],
  mapper: Paths1Jgsne9V01AppsOwnerNameAppNameBranchesBranchBuildsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const crashId: OperationURLParameter = {
  parameterPath: "crashId",
  mapper: {
    serializedName: "crash_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const date: OperationQueryParameter = {
  parameterPath: ["options", "date"],
  mapper: {
    serializedName: "date",
    type: {
      name: "DateTime"
    }
  }
};

export const attachmentId: OperationURLParameter = {
  parameterPath: "attachmentId",
  mapper: {
    serializedName: "attachment_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const crashGroupId: OperationURLParameter = {
  parameterPath: "crashGroupId",
  mapper: {
    serializedName: "crash_group_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const groupingOnly: OperationQueryParameter = {
  parameterPath: ["options", "groupingOnly"],
  mapper: {
    defaultValue: false,
    serializedName: "grouping_only",
    type: {
      name: "Boolean"
    }
  }
};

export const includeReport: OperationQueryParameter = {
  parameterPath: ["options", "includeReport"],
  mapper: {
    defaultValue: false,
    serializedName: "include_report",
    type: {
      name: "Boolean"
    }
  }
};

export const includeLog: OperationQueryParameter = {
  parameterPath: ["options", "includeLog"],
  mapper: {
    defaultValue: false,
    serializedName: "include_log",
    type: {
      name: "Boolean"
    }
  }
};

export const includeDetails: OperationQueryParameter = {
  parameterPath: ["options", "includeDetails"],
  mapper: {
    defaultValue: false,
    serializedName: "include_details",
    type: {
      name: "Boolean"
    }
  }
};

export const includeStacktrace: OperationQueryParameter = {
  parameterPath: ["options", "includeStacktrace"],
  mapper: {
    defaultValue: false,
    serializedName: "include_stacktrace",
    type: {
      name: "Boolean"
    }
  }
};

export const retentionDelete: OperationQueryParameter = {
  parameterPath: ["options", "retentionDelete"],
  mapper: {
    defaultValue: false,
    serializedName: "retention_delete",
    type: {
      name: "Boolean"
    }
  }
};

export const dateFrom: OperationQueryParameter = {
  parameterPath: ["options", "dateFrom"],
  mapper: {
    serializedName: "date_from",
    type: {
      name: "DateTime"
    }
  }
};

export const dateTo: OperationQueryParameter = {
  parameterPath: ["options", "dateTo"],
  mapper: {
    serializedName: "date_to",
    type: {
      name: "DateTime"
    }
  }
};

export const appVersion1: OperationQueryParameter = {
  parameterPath: ["options", "appVersion"],
  mapper: {
    serializedName: "app_version",
    type: {
      name: "String"
    }
  }
};

export const errorType: OperationQueryParameter = {
  parameterPath: ["options", "errorType"],
  mapper: {
    serializedName: "error_type",
    type: {
      name: "String"
    }
  }
};

export const id2: OperationURLParameter = {
  parameterPath: "id",
  mapper: {
    serializedName: "id",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const devices: OperationParameter = {
  parameterPath: "devices",
  mapper: DeviceSetUpdateInformationMapper
};

export const name8: OperationParameter = {
  parameterPath: "name",
  mapper: DeviceSetUpdateInformationMapper
};

export const devices1: OperationParameter = {
  parameterPath: "devices",
  mapper: DeviceSetUpdateInformation0Mapper
};

export const name9: OperationParameter = {
  parameterPath: "name",
  mapper: DeviceSetUpdateInformation0Mapper
};

export const testSeriesSlug: OperationURLParameter = {
  parameterPath: "testSeriesSlug",
  mapper: {
    serializedName: "test_series_slug",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const name11: OperationParameter = {
  parameterPath: "name",
  mapper: NameOfTheTestSeriesMapper
};

export const query: OperationQueryParameter = {
  parameterPath: ["options", "query"],
  mapper: {
    serializedName: "query",
    type: {
      name: "String"
    }
  }
};

export const name12: OperationParameter = {
  parameterPath: "name",
  mapper: NameOfTheTestSeries0Mapper
};

export const testRunId: OperationURLParameter = {
  parameterPath: "testRunId",
  mapper: {
    serializedName: "test_run_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const startOptions: OperationParameter = {
  parameterPath: "startOptions",
  mapper: TestCloudStartTestRunOptionsMapper
};

export const testRunId1: OperationURLParameter = {
  parameterPath: "testRunId",
  mapper: {
    serializedName: "test_run_id",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const fileInfo: OperationParameter = {
  parameterPath: "fileInfo",
  mapper: {
    serializedName: "fileInfo",
    required: true,
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Composite",
          className: "PostContentSchemaItem"
        }
      }
    }
  }
};

export const fileInfo1: OperationParameter = {
  parameterPath: "fileInfo",
  mapper: TestCloudFileHashMapper
};

export const devices2: OperationParameter = {
  parameterPath: "devices",
  mapper: DeviceSetUpdateInformation1Mapper
};

export const name13: OperationParameter = {
  parameterPath: "name",
  mapper: DeviceSetUpdateInformation1Mapper
};

export const devices3: OperationParameter = {
  parameterPath: "devices",
  mapper: DeviceSetUpdateInformation2Mapper
};

export const name14: OperationParameter = {
  parameterPath: "name",
  mapper: DeviceSetUpdateInformation2Mapper
};

export const devices4: OperationParameter = {
  parameterPath: "devices",
  mapper: DeviceListMapper
};

export const appUploadId: OperationQueryParameter = {
  parameterPath: ["options", "appUploadId"],
  mapper: {
    serializedName: "app_upload_id",
    type: {
      name: "Uuid"
    }
  }
};

export const symbolId: OperationURLParameter = {
  parameterPath: "symbolId",
  mapper: {
    serializedName: "symbol_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const symbolUploadId: OperationURLParameter = {
  parameterPath: "symbolUploadId",
  mapper: {
    serializedName: "symbol_upload_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const status1: OperationParameter = {
  parameterPath: "status",
  mapper: PathsQse2V9V01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdPatchRequestbodyContentApplicationJsonSchemaMapper
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    defaultValue: 30,
    constraints: {
      InclusiveMaximum: 100,
      InclusiveMinimum: 1
    },
    serializedName: "top",
    type: {
      name: "Number"
    }
  }
};

export const status2: OperationQueryParameter = {
  parameterPath: ["options", "status"],
  mapper: {
    serializedName: "status",
    type: {
      name: "String"
    }
  }
};

export const symbolType: OperationQueryParameter = {
  parameterPath: ["options", "symbolType"],
  mapper: {
    serializedName: "symbol_type",
    type: {
      name: "String"
    }
  }
};

export const body7: OperationParameter = {
  parameterPath: "body",
  mapper: Paths18RbyikV01AppsOwnerNameAppNameSymbolUploadsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const sourceHost: OperationURLParameter = {
  parameterPath: "sourceHost",
  mapper: {
    serializedName: "source_host",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vstsAccountName: OperationQueryParameter = {
  parameterPath: ["options", "vstsAccountName"],
  mapper: {
    serializedName: "vstsAccountName",
    type: {
      name: "String"
    }
  }
};

export const vstsProjectId: OperationQueryParameter = {
  parameterPath: ["options", "vstsProjectId"],
  mapper: {
    serializedName: "vstsProjectId",
    type: {
      name: "String"
    }
  }
};

export const serviceConnectionId: OperationQueryParameter = {
  parameterPath: ["options", "serviceConnectionId"],
  mapper: {
    serializedName: "service_connection_id",
    type: {
      name: "String"
    }
  }
};

export const form: OperationQueryParameter = {
  parameterPath: ["options", "form"],
  mapper: {
    serializedName: "form",
    type: {
      name: "String"
    }
  }
};

export const includeInactive: OperationQueryParameter = {
  parameterPath: ["options", "includeInactive"],
  mapper: {
    serializedName: "includeInactive",
    type: {
      name: "Boolean"
    }
  }
};

export const repo: OperationParameter = {
  parameterPath: "repo",
  mapper: Paths1P54ZxdV01AppsOwnerNameAppNameRepoConfigPostRequestbodyContentApplicationJsonSchemaMapper
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: Paths1Nw7A47V01AppsOwnerNameAppNamePushNotificationsConfigPutRequestbodyContentApplicationJsonSchemaMapper
};

export const notificationId: OperationURLParameter = {
  parameterPath: "notificationId",
  mapper: {
    serializedName: "notification_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const top1: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    defaultValue: 30,
    constraints: {
      InclusiveMaximum: 2000,
      InclusiveMinimum: 0
    },
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const skiptoken: OperationQueryParameter = {
  parameterPath: ["options", "skiptoken"],
  mapper: {
    serializedName: "$skiptoken",
    type: {
      name: "String"
    }
  }
};

export const orderby: OperationQueryParameter = {
  parameterPath: ["options", "orderby"],
  mapper: {
    defaultValue: "count desc",
    serializedName: "$orderby",
    type: {
      name: "String"
    }
  }
};

export const inlinecount: OperationQueryParameter = {
  parameterPath: ["options", "inlinecount"],
  mapper: {
    defaultValue: "none",
    serializedName: "$inlinecount",
    type: {
      name: "String"
    }
  }
};

export const includeArchived: OperationQueryParameter = {
  parameterPath: ["options", "includeArchived"],
  mapper: {
    serializedName: "include_archived",
    type: {
      name: "Boolean"
    }
  }
};

export const notificationTarget: OperationParameter = {
  parameterPath: ["options", "notificationTarget"],
  mapper: Paths13Dzhd2V01AppsOwnerNameAppNamePushNotificationsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const notificationContent: OperationParameter = {
  parameterPath: "notificationContent",
  mapper: Paths13Dzhd2V01AppsOwnerNameAppNamePushNotificationsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const values: OperationParameter = {
  parameterPath: "values",
  mapper: Paths5M7Cf2V01AppsOwnerNameAppNamePushNotificationsDeleteRequestbodyContentApplicationJsonSchemaMapper
};

export const exportId: OperationURLParameter = {
  parameterPath: "exportId",
  mapper: {
    serializedName: "export_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const blobContainerSasUri: OperationParameter = {
  parameterPath: "blobContainerSasUri",
  mapper: Paths1H0K4SgV01AppsOwnerNameAppNamePushDeviceExportsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const payload: OperationParameter = {
  parameterPath: ["options", "payload"],
  mapper: {
    serializedName: "payload",
    type: {
      name: "Dictionary",
      value: { type: { name: "any" } }
    }
  }
};

export const exportConfigurationId: OperationURLParameter = {
  parameterPath: "exportConfigurationId",
  mapper: {
    serializedName: "export_configuration_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const properties4: OperationParameter = {
  parameterPath: "properties",
  mapper: PathsEhcfgaV01AppsOwnerNameAppNameExportConfigurationsExportConfigurationIdPatchRequestbodyContentApplicationJsonSchemaMapper
};

export const properties5: OperationParameter = {
  parameterPath: "properties",
  mapper: Paths1QllskkV01AppsOwnerNameAppNameExportConfigurationsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const errorId: OperationURLParameter = {
  parameterPath: "errorId",
  mapper: {
    serializedName: "errorId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const attachmentId1: OperationURLParameter = {
  parameterPath: "attachmentId",
  mapper: {
    serializedName: "attachmentId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "filter",
    type: {
      name: "String"
    }
  }
};

export const q: OperationQueryParameter = {
  parameterPath: ["options", "q"],
  mapper: {
    serializedName: "q",
    type: {
      name: "String"
    }
  }
};

export const order: OperationQueryParameter = {
  parameterPath: ["options", "order"],
  mapper: {
    defaultValue: "desc",
    serializedName: "order",
    type: {
      name: "String"
    }
  }
};

export const sort: OperationQueryParameter = {
  parameterPath: ["options", "sort"],
  mapper: {
    defaultValue: "timestamp",
    serializedName: "sort",
    type: {
      name: "String"
    }
  }
};

export const top2: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    defaultValue: 100,
    constraints: {
      InclusiveMaximum: 100,
      InclusiveMinimum: 1
    },
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const skip: OperationQueryParameter = {
  parameterPath: ["options", "skip"],
  mapper: {
    defaultValue: 0,
    constraints: {
      InclusiveMinimum: 0
    },
    serializedName: "$skip",
    type: {
      name: "Number"
    }
  }
};

export const retentionInDays: OperationParameter = {
  parameterPath: "retentionInDays",
  mapper: Paths1V83InnV01AppsOwnerNameAppNameErrorsRetentionSettingsPutRequestbodyContentApplicationJsonSchemaMapper
};

export const start: OperationQueryParameter = {
  parameterPath: "start",
  mapper: {
    serializedName: "start",
    required: true,
    type: {
      name: "DateTime"
    }
  }
};

export const end: OperationQueryParameter = {
  parameterPath: ["options", "end"],
  mapper: {
    serializedName: "end",
    type: {
      name: "DateTime"
    }
  }
};

export const versions: OperationQueryParameter = {
  parameterPath: ["options", "versions"],
  mapper: {
    serializedName: "versions",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "Pipes"
};

export const appBuild: OperationQueryParameter = {
  parameterPath: ["options", "appBuild"],
  mapper: {
    serializedName: "app_build",
    type: {
      name: "String"
    }
  }
};

export const errorType1: OperationQueryParameter = {
  parameterPath: ["options", "errorType"],
  mapper: {
    serializedName: "errorType",
    type: {
      name: "String"
    }
  }
};

export const errorGroupId: OperationURLParameter = {
  parameterPath: "errorGroupId",
  mapper: {
    serializedName: "errorGroupId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const format: OperationQueryParameter = {
  parameterPath: ["options", "format"],
  mapper: {
    serializedName: "format",
    type: {
      name: "String"
    }
  }
};

export const model: OperationQueryParameter = {
  parameterPath: ["options", "model"],
  mapper: {
    serializedName: "model",
    type: {
      name: "String"
    }
  }
};

export const os1: OperationQueryParameter = {
  parameterPath: ["options", "os"],
  mapper: {
    serializedName: "os",
    type: {
      name: "String"
    }
  }
};

export const version: OperationQueryParameter = {
  parameterPath: ["options", "version"],
  mapper: {
    serializedName: "version",
    type: {
      name: "String"
    }
  }
};

export const state: OperationParameter = {
  parameterPath: "state",
  mapper: PathsHpm6KuV01AppsOwnerNameAppNameErrorsErrorgroupsErrorgroupidPatchRequestbodyContentApplicationJsonSchemaMapper
};

export const annotation: OperationParameter = {
  parameterPath: ["options", "annotation"],
  mapper: PathsHpm6KuV01AppsOwnerNameAppNameErrorsErrorgroupsErrorgroupidPatchRequestbodyContentApplicationJsonSchemaMapper
};

export const order1: OperationQueryParameter = {
  parameterPath: ["options", "order"],
  mapper: {
    defaultValue: "desc",
    serializedName: "order",
    type: {
      name: "String"
    }
  }
};

export const sort1: OperationQueryParameter = {
  parameterPath: ["options", "sort"],
  mapper: {
    defaultValue: "matchingReportsCount",
    serializedName: "sort",
    type: {
      name: "String"
    }
  }
};

export const groupState: OperationQueryParameter = {
  parameterPath: ["options", "groupState"],
  mapper: {
    serializedName: "groupState",
    type: {
      name: "String"
    }
  }
};

export const errorType2: OperationQueryParameter = {
  parameterPath: ["options", "errorType"],
  mapper: {
    serializedName: "errorType",
    type: {
      name: "String"
    }
  }
};

export const errorType3: OperationQueryParameter = {
  parameterPath: ["options", "errorType"],
  mapper: {
    serializedName: "errorType",
    type: {
      name: "String"
    }
  }
};

export const filter1: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const inlinecount1: OperationQueryParameter = {
  parameterPath: ["options", "inlinecount"],
  mapper: {
    defaultValue: "none",
    serializedName: "$inlinecount",
    type: {
      name: "String"
    }
  }
};

export const errorType4: OperationQueryParameter = {
  parameterPath: ["options", "errorType"],
  mapper: {
    serializedName: "errorType",
    type: {
      name: "String"
    }
  }
};

export const version1: OperationQueryParameter = {
  parameterPath: "version",
  mapper: {
    serializedName: "version",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const errorType5: OperationQueryParameter = {
  parameterPath: ["options", "errorType"],
  mapper: {
    serializedName: "errorType",
    type: {
      name: "String"
    }
  }
};

export const storeName: OperationURLParameter = {
  parameterPath: "storeName",
  mapper: {
    serializedName: "store_name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const releaseId3: OperationURLParameter = {
  parameterPath: "releaseId",
  mapper: {
    serializedName: "release_id",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const body8: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: {
    serializedName: "body",
    type: {
      name: "String"
    }
  }
};

export const serviceConnectionId1: OperationParameter = {
  parameterPath: "serviceConnectionId",
  mapper: Paths1Yf5Jp5V01AppsOwnerNameAppNameDistributionStoresStoreNamePatchRequestbodyContentApplicationJsonSchemaMapper
};

export const body10: OperationParameter = {
  parameterPath: "body",
  mapper: PathsPwsnpuV01AppsOwnerNameAppNameDistributionStoresPostRequestbodyContentApplicationJsonSchemaMapper
};

export const symbolGroupId: OperationURLParameter = {
  parameterPath: "symbolGroupId",
  mapper: {
    serializedName: "symbol_group_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const top3: OperationQueryParameter = {
  parameterPath: "top",
  mapper: {
    serializedName: "top",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const deploymentName: OperationURLParameter = {
  parameterPath: "deploymentName",
  mapper: {
    serializedName: "deployment_name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const label1: OperationParameter = {
  parameterPath: ["options", "label"],
  mapper: Paths1G1PzhgV01AppsOwnerNameAppNameDeploymentsDeploymentNameRollbackReleasePostRequestbodyContentApplicationJsonSchemaMapper
};

export const release: OperationParameter = {
  parameterPath: "release",
  mapper: PathsZjw2F1V01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesReleaseLabelPatchRequestbodyContentApplicationJsonSchemaMapper
};

export const releaseLabel1: OperationURLParameter = {
  parameterPath: "releaseLabel",
  mapper: {
    serializedName: "release_label",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const uploadedRelease: OperationParameter = {
  parameterPath: "uploadedRelease",
  mapper: Paths1Q5DgwjV01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesPostRequestbodyContentApplicationJsonSchemaMapper
};

export const release1: OperationParameter = {
  parameterPath: ["options", "release"],
  mapper: PathsOn7Se0V01AppsOwnerNameAppNameDeploymentsDeploymentNamePromoteReleasePromoteDeploymentNamePostRequestbodyContentApplicationJsonSchemaMapper
};

export const promoteDeploymentName: OperationURLParameter = {
  parameterPath: "promoteDeploymentName",
  mapper: {
    serializedName: "promote_deployment_name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body11: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: {
    serializedName: "body",
    type: {
      name: "Dictionary",
      value: { type: { name: "any" } }
    }
  }
};

export const name15: OperationParameter = {
  parameterPath: "name",
  mapper: PathsUaqn8EV01AppsOwnerNameAppNameDeploymentsDeploymentNamePatchRequestbodyContentApplicationJsonSchemaMapper
};

export const key: OperationParameter = {
  parameterPath: ["options", "key"],
  mapper: Paths1Fgvm7MV01AppsOwnerNameAppNameDeploymentsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const name16: OperationParameter = {
  parameterPath: "name",
  mapper: Paths1Fgvm7MV01AppsOwnerNameAppNameDeploymentsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const latestRelease: OperationParameter = {
  parameterPath: ["options", "latestRelease"],
  mapper: Paths1Fgvm7MV01AppsOwnerNameAppNameDeploymentsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const provisionDatabaseParameters: OperationParameter = {
  parameterPath: ["options", "provisionDatabaseParameters"],
  mapper: PathsA5R1LbV01AppsOwnerNameAppNameDataResourceProvisioningPostRequestbodyContentApplicationJsonSchemaMapper
};

export const aCAuthorizationARM: OperationParameter = {
  parameterPath: "aCAuthorizationARM",
  mapper: {
    serializedName: "AC-Authorization-ARM",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const accountName: OperationURLParameter = {
  parameterPath: "accountName",
  mapper: {
    constraints: {
      MaxLength: 31,
      MinLength: 3
    },
    serializedName: "accountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const status3: OperationParameter = {
  parameterPath: ["options", "status"],
  mapper: PathsT60UxpV01AppsOwnerNameAppNameCrashGroupsCrashGroupIdPatchRequestbodyContentApplicationJsonSchemaMapper
};

export const annotation1: OperationParameter = {
  parameterPath: ["options", "annotation"],
  mapper: PathsT60UxpV01AppsOwnerNameAppNameCrashGroupsCrashGroupIdPatchRequestbodyContentApplicationJsonSchemaMapper
};

export const lastOccurrenceFrom: OperationQueryParameter = {
  parameterPath: ["options", "lastOccurrenceFrom"],
  mapper: {
    serializedName: "last_occurrence_from",
    type: {
      name: "DateTime"
    }
  }
};

export const lastOccurrenceTo: OperationQueryParameter = {
  parameterPath: ["options", "lastOccurrenceTo"],
  mapper: {
    serializedName: "last_occurrence_to",
    type: {
      name: "DateTime"
    }
  }
};

export const groupType: OperationQueryParameter = {
  parameterPath: ["options", "groupType"],
  mapper: {
    serializedName: "group_type",
    type: {
      name: "String"
    }
  }
};

export const groupStatus: OperationQueryParameter = {
  parameterPath: ["options", "groupStatus"],
  mapper: {
    serializedName: "group_status",
    type: {
      name: "String"
    }
  }
};

export const groupTextSearch: OperationQueryParameter = {
  parameterPath: ["options", "groupTextSearch"],
  mapper: {
    serializedName: "group_text_search",
    type: {
      name: "String"
    }
  }
};

export const orderby1: OperationQueryParameter = {
  parameterPath: ["options", "orderby"],
  mapper: {
    defaultValue: "last_occurrence desc",
    serializedName: "$orderby",
    type: {
      name: "String"
    }
  }
};

export const continuationToken: OperationQueryParameter = {
  parameterPath: ["options", "continuationToken"],
  mapper: {
    serializedName: "continuation_token",
    type: {
      name: "String"
    }
  }
};

export const hashes: OperationQueryParameter = {
  parameterPath: "hashes",
  mapper: {
    serializedName: "hashes",
    required: true,
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const params1: OperationParameter = {
  parameterPath: "params",
  mapper: PathsXn26H7V01AppsOwnerNameAppNameBranchesBranchConfigPostRequestbodyContentApplicationJsonSchemaMapper
};

export const params2: OperationParameter = {
  parameterPath: "params",
  mapper: Paths1O0K3JpV01AppsOwnerNameAppNameBranchesBranchConfigPutRequestbodyContentApplicationJsonSchemaMapper
};

export const aCAuthorizationAADGraph: OperationParameter = {
  parameterPath: ["options", "aCAuthorizationAADGraph"],
  mapper: {
    serializedName: "AC-Authorization-AAD-Graph",
    type: {
      name: "String"
    }
  }
};

export const searchTerm: OperationQueryParameter = {
  parameterPath: ["options", "searchTerm"],
  mapper: {
    serializedName: "searchTerm",
    type: {
      name: "String"
    }
  }
};

export const body12: OperationParameter = {
  parameterPath: "body",
  mapper: Paths1B7RevxV01AppsOwnerNameAppNameAppleMappingPostRequestbodyContentApplicationJsonSchemaMapper
};

export const apiTokenId: OperationURLParameter = {
  parameterPath: "apiTokenId",
  mapper: {
    serializedName: "api_token_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const description2: OperationParameter = {
  parameterPath: ["options", "description"],
  mapper: PathsUuian4V01AppsOwnerNameAppNameApiTokensPostRequestbodyContentApplicationJsonSchemaMapper
};

export const scope1: OperationParameter = {
  parameterPath: ["options", "scope"],
  mapper: PathsUuian4V01AppsOwnerNameAppNameApiTokensPostRequestbodyContentApplicationJsonSchemaMapper
};

export const interval: OperationQueryParameter = {
  parameterPath: "interval",
  mapper: {
    serializedName: "interval",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const start1: OperationQueryParameter = {
  parameterPath: ["options", "start"],
  mapper: {
    serializedName: "start",
    type: {
      name: "DateTime"
    }
  }
};

export const eventName: OperationURLParameter = {
  parameterPath: "eventName",
  mapper: {
    serializedName: "event_name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const eventPropertyName: OperationURLParameter = {
  parameterPath: "eventPropertyName",
  mapper: {
    serializedName: "event_property_name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const top4: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    defaultValue: 10,
    constraints: {
      InclusiveMinimum: 0
    },
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const eventName1: OperationQueryParameter = {
  parameterPath: ["options", "eventName"],
  mapper: {
    serializedName: "event_name",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "Pipes"
};

export const inlinecount2: OperationQueryParameter = {
  parameterPath: ["options", "inlinecount"],
  mapper: {
    defaultValue: "none",
    serializedName: "$inlinecount",
    type: {
      name: "String"
    }
  }
};

export const releases1: OperationParameter = {
  parameterPath: "releases",
  mapper: Paths1Pzxl78V01AppsOwnerNameAppNameAnalyticsDistributionReleaseCountsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const crashGroups1: OperationParameter = {
  parameterPath: "crashGroups",
  mapper: PathsDc3Tj4V01AppsOwnerNameAppNameAnalyticsCrashGroupsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const audienceName: OperationURLParameter = {
  parameterPath: "audienceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("[^/]+"),
      MaxLength: 64
    },
    serializedName: "audience_name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const audience: OperationParameter = {
  parameterPath: "audience",
  mapper: Paths2Mes8QV01AppsOwnerNameAppNameAnalyticsAudiencesAudienceNamePutRequestbodyContentApplicationJsonSchemaMapper
};

export const propertyName: OperationURLParameter = {
  parameterPath: "propertyName",
  mapper: {
    serializedName: "property_name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contains: OperationQueryParameter = {
  parameterPath: ["options", "contains"],
  mapper: {
    serializedName: "contains",
    type: {
      name: "String"
    }
  }
};

export const audience1: OperationParameter = {
  parameterPath: "audience",
  mapper: Paths16F7ScgV01AppsOwnerNameAppNameAnalyticsAudiencesDefinitionTestPostRequestbodyContentApplicationJsonSchemaMapper
};

export const includeDisabled: OperationQueryParameter = {
  parameterPath: ["options", "includeDisabled"],
  mapper: {
    serializedName: "include_disabled",
    type: {
      name: "Boolean"
    }
  }
};

export const appBuild1: OperationQueryParameter = {
  parameterPath: "appBuild",
  mapper: {
    serializedName: "app_build",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const description4: OperationParameter = {
  parameterPath: ["options", "description"],
  mapper: Paths163K2XcV01ApiTokensPostRequestbodyContentApplicationJsonSchemaMapper
};

export const scope2: OperationParameter = {
  parameterPath: ["options", "scope"],
  mapper: Paths163K2XcV01ApiTokensPostRequestbodyContentApplicationJsonSchemaMapper
};
