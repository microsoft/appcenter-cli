/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { DeploymentReleases } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AppCenterClient } from "../appCenterClient";
import {
  PathsZjw2F1V01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesReleaseLabelPatchRequestbodyContentApplicationJsonSchema,
  DeploymentReleasesUpdateOptionalParams,
  DeploymentReleasesUpdateResponse
} from "../models";

/** Class containing DeploymentReleases operations. */
export class DeploymentReleasesImpl implements DeploymentReleases {
  private readonly client: AppCenterClient;

  /**
   * Initialize a new instance of the class DeploymentReleases class.
   * @param client Reference to the service client
   */
  constructor(client: AppCenterClient) {
    this.client = client;
  }

  /**
   * Modifies a CodePush release metadata under the given Deployment
   * @param deploymentName deployment name
   * @param releaseLabel release label
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param release Release modification. All fields are optional and only provided fields will get
   *                updated.
   * @param options The options parameters.
   */
  update(
    deploymentName: string,
    releaseLabel: string,
    ownerName: string,
    appName: string,
    release: PathsZjw2F1V01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesReleaseLabelPatchRequestbodyContentApplicationJsonSchema,
    options?: DeploymentReleasesUpdateOptionalParams
  ): Promise<DeploymentReleasesUpdateResponse> {
    return this.client.sendOperationRequest(
      { deploymentName, releaseLabel, ownerName, appName, release, options },
      updateOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper:
        Mappers.PathsIvaackV01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesReleaseLabelPatchResponses200ContentApplicationJsonSchema
    },
    204: {},
    default: {
      bodyMapper:
        Mappers.PathsIsso8KV01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesReleaseLabelPatchResponsesDefaultContentApplicationJsonSchema
    }
  },
  requestBody: Parameters.release,
  urlParameters: [
    Parameters.$host,
    Parameters.ownerName,
    Parameters.appName,
    Parameters.deploymentName,
    Parameters.releaseLabel1
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
