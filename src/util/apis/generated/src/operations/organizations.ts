/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Organizations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AppCenterClient } from "../appCenterClient";
import {
  OrganizationsGetOptionalParams,
  OrganizationsGetResponse,
  OrganizationsUpdateOptionalParams,
  OrganizationsUpdateResponse,
  OrganizationsDeleteOptionalParams,
  OrganizationsCreateOrUpdateOptionalParams,
  OrganizationsCreateOrUpdateResponse,
  OrganizationsListOptionalParams,
  OrganizationsListResponse,
  OrganizationsListAdministeredOptionalParams,
  OrganizationsListAdministeredResponse
} from "../models";

/** Class containing Organizations operations. */
export class OrganizationsImpl implements Organizations {
  private readonly client: AppCenterClient;

  /**
   * Initialize a new instance of the class Organizations class.
   * @param client Reference to the service client
   */
  constructor(client: AppCenterClient) {
    this.client = client;
  }

  /**
   * Returns the details of a single organization
   * @param orgName The organization's name
   * @param options The options parameters.
   */
  get(
    orgName: string,
    options?: OrganizationsGetOptionalParams
  ): Promise<OrganizationsGetResponse> {
    return this.client.sendOperationRequest(
      { orgName, options },
      getOperationSpec
    );
  }

  /**
   * Returns a list of organizations the requesting user has access to
   * @param orgName The organization's name
   * @param options The options parameters.
   */
  update(
    orgName: string,
    options?: OrganizationsUpdateOptionalParams
  ): Promise<OrganizationsUpdateResponse> {
    return this.client.sendOperationRequest(
      { orgName, options },
      updateOperationSpec
    );
  }

  /**
   * Deletes a single organization
   * @param orgName The organization's name
   * @param options The options parameters.
   */
  delete(
    orgName: string,
    options?: OrganizationsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { orgName, options },
      deleteOperationSpec
    );
  }

  /**
   * Creates a new organization and returns it to the caller
   * @param options The options parameters.
   */
  createOrUpdate(
    options?: OrganizationsCreateOrUpdateOptionalParams
  ): Promise<OrganizationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Returns a list of organizations the requesting user has access to
   * @param options The options parameters.
   */
  list(
    options?: OrganizationsListOptionalParams
  ): Promise<OrganizationsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Returns a list organizations in which the requesting user is an admin
   * @param options The options parameters.
   */
  listAdministered(
    options?: OrganizationsListAdministeredOptionalParams
  ): Promise<OrganizationsListAdministeredResponse> {
    return this.client.sendOperationRequest(
      { options },
      listAdministeredOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/v0.1/orgs/{org_name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper:
        Mappers.Paths1Sl6Qy7V01OrgsOrgNameGetResponses200ContentApplicationJsonSchema
    },
    default: {
      bodyMapper:
        Mappers.Paths16NvgokV01OrgsOrgNameGetResponsesDefaultContentApplicationJsonSchema
    }
  },
  urlParameters: [Parameters.$host, Parameters.orgName],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/v0.1/orgs/{org_name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper:
        Mappers.Paths1Vgfr6WV01OrgsOrgNamePatchResponses200ContentApplicationJsonSchema
    },
    default: {
      bodyMapper:
        Mappers.Paths11Pjgn9V01OrgsOrgNamePatchResponsesDefaultContentApplicationJsonSchema
    }
  },
  requestBody: {
    parameterPath: {
      displayName: ["options", "displayName"],
      name: ["options", "name"]
    },
    mapper: {
      ...Mappers.Paths600DxeV01OrgsOrgNamePatchRequestbodyContentApplicationJsonSchema,
      required: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.orgName],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/v0.1/orgs/{org_name}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper:
        Mappers.Paths9Ngr72V01OrgsOrgNameDeleteResponsesDefaultContentApplicationJsonSchema
    }
  },
  urlParameters: [Parameters.$host, Parameters.orgName],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/v0.1/orgs",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper:
        Mappers.Paths5Gk61LV01OrgsPostResponses201ContentApplicationJsonSchema
    },
    default: {
      bodyMapper:
        Mappers.Paths92RvyjV01OrgsPostResponsesDefaultContentApplicationJsonSchema
    }
  },
  requestBody: {
    parameterPath: {
      displayName: ["options", "displayName"],
      name: ["options", "name"]
    },
    mapper: {
      ...Mappers.Paths184FzfwV01OrgsPostRequestbodyContentApplicationJsonSchema,
      required: true
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/v0.1/orgs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className:
                "Paths1Ft71BmV01OrgsGetResponses200ContentApplicationJsonSchemaItems"
            }
          }
        }
      }
    },
    default: {
      bodyMapper:
        Mappers.PathsZre2DkV01OrgsGetResponsesDefaultContentApplicationJsonSchema
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const listAdministeredOperationSpec: coreClient.OperationSpec = {
  path: "/v0.1/administeredOrgs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper:
        Mappers.PathsSnamasV01AdministeredorgsGetResponses200ContentApplicationJsonSchema
    },
    default: {
      bodyMapper:
        Mappers.PathsHjvrvyV01AdministeredorgsGetResponsesDefaultContentApplicationJsonSchema
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
