/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Data } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AppCenterClient } from "../appCenterClient";
import {
  DataGetResourceProvisioningOptionalParams,
  DataGetResourceProvisioningResponse,
  DataPostResourceProvisioningOptionalParams,
  DataPostResourceProvisioningResponse,
  DataGetOverviewOptionalParams,
  DataGetOverviewResponse,
  DataCheckNameExistsOptionalParams,
  DataCheckNameExistsResponse
} from "../models";

/** Class containing Data operations. */
export class DataImpl implements Data {
  private readonly client: AppCenterClient;

  /**
   * Initialize a new instance of the class Data class.
   * @param client Reference to the service client
   */
  constructor(client: AppCenterClient) {
    this.client = client;
  }

  /**
   * test
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param options The options parameters.
   */
  getResourceProvisioning(
    ownerName: string,
    appName: string,
    options?: DataGetResourceProvisioningOptionalParams
  ): Promise<DataGetResourceProvisioningResponse> {
    return this.client.sendOperationRequest(
      { ownerName, appName, options },
      getResourceProvisioningOperationSpec
    );
  }

  /**
   * Creates Cosmos DB or attaches an existing one
   * @param aCAuthorizationARM test
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param options The options parameters.
   */
  postResourceProvisioning(
    aCAuthorizationARM: string,
    ownerName: string,
    appName: string,
    options?: DataPostResourceProvisioningOptionalParams
  ): Promise<DataPostResourceProvisioningResponse> {
    return this.client.sendOperationRequest(
      { aCAuthorizationARM, ownerName, appName, options },
      postResourceProvisioningOperationSpec
    );
  }

  /**
   * Gets general data about the provisioned database
   * @param aCAuthorizationARM ARM access token.
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param options The options parameters.
   */
  getOverview(
    aCAuthorizationARM: string,
    ownerName: string,
    appName: string,
    options?: DataGetOverviewOptionalParams
  ): Promise<DataGetOverviewResponse> {
    return this.client.sendOperationRequest(
      { aCAuthorizationARM, ownerName, appName, options },
      getOverviewOperationSpec
    );
  }

  /**
   * Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only
   * lowercase letters, numbers, and the '-' character, and must be between 3 and 31 characters.
   * @param aCAuthorizationARM ARM token
   * @param accountName Account Name
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param options The options parameters.
   */
  checkNameExists(
    aCAuthorizationARM: string,
    accountName: string,
    ownerName: string,
    appName: string,
    options?: DataCheckNameExistsOptionalParams
  ): Promise<DataCheckNameExistsResponse> {
    return this.client.sendOperationRequest(
      { aCAuthorizationARM, accountName, ownerName, appName, options },
      checkNameExistsOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getResourceProvisioningOperationSpec: coreClient.OperationSpec = {
  path: "/v0.1/apps/{owner_name}/{app_name}/data/resource_provisioning",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    404: {
      bodyMapper:
        Mappers.Paths1Eig5LtV01AppsOwnerNameAppNameDataResourceProvisioningGetResponses404ContentApplicationJsonSchema
    },
    500: {
      bodyMapper:
        Mappers.PathsWumnz0V01AppsOwnerNameAppNameDataResourceProvisioningGetResponses500ContentApplicationJsonSchema
    }
  },
  urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
  headerParameters: [Parameters.accept],
  serializer
};
const postResourceProvisioningOperationSpec: coreClient.OperationSpec = {
  path: "/v0.1/apps/{owner_name}/{app_name}/data/resource_provisioning",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper:
        Mappers.PathsAv3L5YV01AppsOwnerNameAppNameDataResourceProvisioningPostResponses202ContentApplicationJsonSchema
    },
    400: {
      bodyMapper:
        Mappers.PathsHml8V01AppsOwnerNameAppNameDataResourceProvisioningPostResponses400ContentApplicationJsonSchema
    },
    500: {
      bodyMapper:
        Mappers.Paths2Bmy5KV01AppsOwnerNameAppNameDataResourceProvisioningPostResponses500ContentApplicationJsonSchema
    }
  },
  requestBody: Parameters.provisionDatabaseParameters,
  urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.aCAuthorizationARM
  ],
  mediaType: "json",
  serializer
};
const getOverviewOperationSpec: coreClient.OperationSpec = {
  path: "/v0.1/apps/{owner_name}/{app_name}/data/overview",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    500: {
      bodyMapper:
        Mappers.Paths154Xl4EV01AppsOwnerNameAppNameDataOverviewGetResponses500ContentApplicationJsonSchema
    }
  },
  urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
  headerParameters: [Parameters.accept, Parameters.aCAuthorizationARM],
  serializer
};
const checkNameExistsOperationSpec: coreClient.OperationSpec = {
  path:
    "/v0.1/apps/{owner_name}/{app_name}/data/database_account_names/{accountName}",
  httpMethod: "HEAD",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    400: {},
    401: {},
    404: {},
    500: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.ownerName,
    Parameters.appName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept, Parameters.aCAuthorizationARM],
  serializer
};
