/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SymbolUploads } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AppCenterClient } from "../appCenterClient";
import {
  SymbolUploadsGetLocationOptionalParams,
  SymbolUploadsGetLocationResponse,
  SymbolUploadsGetOptionalParams,
  SymbolUploadsGetResponse,
  PatchContentSchemaStatus,
  SymbolUploadsCompleteOptionalParams,
  SymbolUploadsCompleteResponse,
  SymbolUploadsDeleteOptionalParams,
  SymbolUploadsDeleteResponse,
  SymbolUploadsListOptionalParams,
  SymbolUploadsListResponse,
  Paths18RbyikV01AppsOwnerNameAppNameSymbolUploadsPostRequestbodyContentApplicationJsonSchema,
  SymbolUploadsCreateOptionalParams,
  SymbolUploadsCreateResponse
} from "../models";

/** Class containing SymbolUploads operations. */
export class SymbolUploadsImpl implements SymbolUploads {
  private readonly client: AppCenterClient;

  /**
   * Initialize a new instance of the class SymbolUploads class.
   * @param client Reference to the service client
   */
  constructor(client: AppCenterClient) {
    this.client = client;
  }

  /**
   * Gets the URL to download the symbol upload
   * @param symbolUploadId The ID of the symbol upload
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param options The options parameters.
   */
  getLocation(
    symbolUploadId: string,
    ownerName: string,
    appName: string,
    options?: SymbolUploadsGetLocationOptionalParams
  ): Promise<SymbolUploadsGetLocationResponse> {
    return this.client.sendOperationRequest(
      { symbolUploadId, ownerName, appName, options },
      getLocationOperationSpec
    );
  }

  /**
   * Gets a symbol upload by id for the specified application
   * @param symbolUploadId The ID of the symbol upload
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param options The options parameters.
   */
  get(
    symbolUploadId: string,
    ownerName: string,
    appName: string,
    options?: SymbolUploadsGetOptionalParams
  ): Promise<SymbolUploadsGetResponse> {
    return this.client.sendOperationRequest(
      { symbolUploadId, ownerName, appName, options },
      getOperationSpec
    );
  }

  /**
   * Commits or aborts the symbol upload process for a new set of symbols for the specified application
   * @param symbolUploadId The ID of the symbol upload
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param status The desired operation for the symbol upload
   * @param options The options parameters.
   */
  complete(
    symbolUploadId: string,
    ownerName: string,
    appName: string,
    status: PatchContentSchemaStatus,
    options?: SymbolUploadsCompleteOptionalParams
  ): Promise<SymbolUploadsCompleteResponse> {
    return this.client.sendOperationRequest(
      { symbolUploadId, ownerName, appName, status, options },
      completeOperationSpec
    );
  }

  /**
   * Deletes a symbol upload by id for the specified application
   * @param symbolUploadId The ID of the symbol upload
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param options The options parameters.
   */
  delete(
    symbolUploadId: string,
    ownerName: string,
    appName: string,
    options?: SymbolUploadsDeleteOptionalParams
  ): Promise<SymbolUploadsDeleteResponse> {
    return this.client.sendOperationRequest(
      { symbolUploadId, ownerName, appName, options },
      deleteOperationSpec
    );
  }

  /**
   * Gets a list of all uploads for the specified application
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param options The options parameters.
   */
  list(
    ownerName: string,
    appName: string,
    options?: SymbolUploadsListOptionalParams
  ): Promise<SymbolUploadsListResponse> {
    return this.client.sendOperationRequest(
      { ownerName, appName, options },
      listOperationSpec
    );
  }

  /**
   * Begins the symbol upload process for a new set of symbols for the specified application
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param body The symbol information
   * @param options The options parameters.
   */
  create(
    ownerName: string,
    appName: string,
    body: Paths18RbyikV01AppsOwnerNameAppNameSymbolUploadsPostRequestbodyContentApplicationJsonSchema,
    options?: SymbolUploadsCreateOptionalParams
  ): Promise<SymbolUploadsCreateResponse> {
    return this.client.sendOperationRequest(
      { ownerName, appName, body, options },
      createOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getLocationOperationSpec: coreClient.OperationSpec = {
  path:
    "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper:
        Mappers.Paths18Q3NddV01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdLocationGetResponses200ContentApplicationJsonSchema
    },
    403: {
      bodyMapper:
        Mappers.Paths3IyV01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdLocationGetResponses403ContentApplicationJsonSchema
    },
    404: {
      bodyMapper:
        Mappers.PathsL7Clp0V01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdLocationGetResponses404ContentApplicationJsonSchema
    },
    500: {
      bodyMapper:
        Mappers.Paths1N7F3U2V01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdLocationGetResponses500ContentApplicationJsonSchema
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.ownerName,
    Parameters.appName,
    Parameters.symbolUploadId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper:
        Mappers.Paths1Eu1ZwcV01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdGetResponses200ContentApplicationJsonSchema
    },
    403: {
      bodyMapper:
        Mappers.Paths13BxjsnV01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdGetResponses403ContentApplicationJsonSchema
    },
    404: {
      bodyMapper:
        Mappers.Paths1Tfz2NwV01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdGetResponses404ContentApplicationJsonSchema
    },
    500: {
      bodyMapper:
        Mappers.Paths12AtszV01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdGetResponses500ContentApplicationJsonSchema
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.ownerName,
    Parameters.appName,
    Parameters.symbolUploadId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const completeOperationSpec: coreClient.OperationSpec = {
  path: "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper:
        Mappers.Paths2Sc2IcV01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdPatchResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper:
        Mappers.PathsS5X5VpV01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdPatchResponses400ContentApplicationJsonSchema
    },
    403: {
      bodyMapper:
        Mappers.Paths1Ccf2OgV01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdPatchResponses403ContentApplicationJsonSchema
    },
    500: {
      bodyMapper:
        Mappers.Paths124Q9H8V01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdPatchResponses500ContentApplicationJsonSchema
    }
  },
  requestBody: {
    parameterPath: { status: ["status"] },
    mapper: {
      ...Mappers.PathsQse2V9V01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdPatchRequestbodyContentApplicationJsonSchema,
      required: true
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.ownerName,
    Parameters.appName,
    Parameters.symbolUploadId
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper:
        Mappers.PathsH20WogV01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdDeleteResponses200ContentApplicationJsonSchema
    },
    403: {
      bodyMapper:
        Mappers.Paths16F8Fw3V01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdDeleteResponses403ContentApplicationJsonSchema
    },
    404: {
      bodyMapper:
        Mappers.PathsIabzs6V01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdDeleteResponses404ContentApplicationJsonSchema
    },
    500: {
      bodyMapper:
        Mappers.Paths1AenlgkV01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdDeleteResponses500ContentApplicationJsonSchema
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.ownerName,
    Parameters.appName,
    Parameters.symbolUploadId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className:
                "Paths5Jmb0FV01AppsOwnerNameAppNameSymbolUploadsGetResponses200ContentApplicationJsonSchemaItems"
            }
          }
        }
      }
    },
    403: {
      bodyMapper:
        Mappers.Paths15Ox23KV01AppsOwnerNameAppNameSymbolUploadsGetResponses403ContentApplicationJsonSchema
    },
    500: {
      bodyMapper:
        Mappers.Paths11Twl9GV01AppsOwnerNameAppNameSymbolUploadsGetResponses500ContentApplicationJsonSchema
    }
  },
  queryParameters: [Parameters.top, Parameters.status2, Parameters.symbolType],
  urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper:
        Mappers.Paths1B3N0BtV01AppsOwnerNameAppNameSymbolUploadsPostResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper:
        Mappers.PathsGu8CaoV01AppsOwnerNameAppNameSymbolUploadsPostResponses400ContentApplicationJsonSchema
    },
    403: {
      bodyMapper:
        Mappers.Paths11OusrnV01AppsOwnerNameAppNameSymbolUploadsPostResponses403ContentApplicationJsonSchema
    },
    500: {
      bodyMapper:
        Mappers.PathsGsz3YxV01AppsOwnerNameAppNameSymbolUploadsPostResponses500ContentApplicationJsonSchema
    }
  },
  requestBody: Parameters.body7,
  urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
