/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as stream from 'stream';
import * as models from '../models';


/**
 * @class
 * Devices
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Devices {


    /**
     * Registers a user for an existing device
     *
     * @param {string} userId The ID of the user
     *
     * @param {object} body The device info.
     *
     * @param {string} body.udid The Unique Device IDentifier of the device
     *
     * @param {string} body.model The model identifier of the device, in the format
     * iDeviceM,N
     *
     * @param {string} [body.osBuild] The build number of the last known OS version
     * running on the device
     *
     * @param {string} [body.osVersion] The last known OS version running on the
     * device
     *
     * @param {string} [body.serial] The device's serial number. Always empty or
     * undefined at present.
     *
     * @param {string} [body.imei] The device's International Mobile Equipment
     * Identity number. Always empty or undefined at present.
     *
     * @param {string} [body.ownerId] The user ID of the device owner.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    registerUserForDeviceWithHttpOperationResponse(userId: string, body: models.Body, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Registers a user for an existing device
     *
     * @param {string} userId The ID of the user
     *
     * @param {object} body The device info.
     *
     * @param {string} body.udid The Unique Device IDentifier of the device
     *
     * @param {string} body.model The model identifier of the device, in the format
     * iDeviceM,N
     *
     * @param {string} [body.osBuild] The build number of the last known OS version
     * running on the device
     *
     * @param {string} [body.osVersion] The last known OS version running on the
     * device
     *
     * @param {string} [body.serial] The device's serial number. Always empty or
     * undefined at present.
     *
     * @param {string} [body.imei] The device's International Mobile Equipment
     * Identity number. Always empty or undefined at present.
     *
     * @param {string} [body.ownerId] The user ID of the device owner.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    registerUserForDevice(userId: string, body: models.Body, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    registerUserForDevice(userId: string, body: models.Body, callback: ServiceCallback<any>): void;
    registerUserForDevice(userId: string, body: models.Body, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Returns the device details.
     *
     * @param {string} deviceUdid The UDID of the device
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deviceDetailsWithHttpOperationResponse(deviceUdid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Returns the device details.
     *
     * @param {string} deviceUdid The UDID of the device
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deviceDetails(deviceUdid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deviceDetails(deviceUdid: string, callback: ServiceCallback<any>): void;
    deviceDetails(deviceUdid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Removes an existing device from a user
     *
     * @param {string} deviceUdid The UDID of the device
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    removeUserDeviceWithHttpOperationResponse(deviceUdid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Removes an existing device from a user
     *
     * @param {string} deviceUdid The UDID of the device
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    removeUserDevice(deviceUdid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    removeUserDevice(deviceUdid: string, callback: ServiceCallback<any>): void;
    removeUserDevice(deviceUdid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Returns all devices associated with the given user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    userDevicesListWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Returns all devices associated with the given user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    userDevicesList(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    userDevicesList(callback: ServiceCallback<any>): void;
    userDevicesList(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Returns the resign status to the caller
     *
     * @param {string} releaseId The ID of the release.
     *
     * @param {string} resignId The ID of the resign operation.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.includeProvisioningProfile] A boolean value that
     * indicates if the provisioning profile should be return in addition to the
     * status. When set to true, the provisioning profile will be returned only
     * when status is 'complete' or 'preparing_for_testers'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getReleaseUpdateDevicesStatusWithHttpOperationResponse(releaseId: string, resignId: string, ownerName: string, appName: string, options?: { includeProvisioningProfile? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Returns the resign status to the caller
     *
     * @param {string} releaseId The ID of the release.
     *
     * @param {string} resignId The ID of the resign operation.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.includeProvisioningProfile] A boolean value that
     * indicates if the provisioning profile should be return in addition to the
     * status. When set to true, the provisioning profile will be returned only
     * when status is 'complete' or 'preparing_for_testers'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getReleaseUpdateDevicesStatus(releaseId: string, resignId: string, ownerName: string, appName: string, options?: { includeProvisioningProfile? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getReleaseUpdateDevicesStatus(releaseId: string, resignId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    getReleaseUpdateDevicesStatus(releaseId: string, resignId: string, ownerName: string, appName: string, options: { includeProvisioningProfile? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Returns all devices associated with the given distribution group.
     *
     * @param {string} distributionGroupName The name of the distribution group.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.unprovisionedOnly] when true, filters out
     * provisioned devices
     *
     * @param {array} [options.udids] multiple UDIDs which should be part of the
     * resulting CSV.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCsvFormatWithHttpOperationResponse(distributionGroupName: string, ownerName: string, appName: string, options?: { unprovisionedOnly? : boolean, udids? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Returns all devices associated with the given distribution group.
     *
     * @param {string} distributionGroupName The name of the distribution group.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.unprovisionedOnly] when true, filters out
     * provisioned devices
     *
     * @param {array} [options.udids] multiple UDIDs which should be part of the
     * resulting CSV.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCsvFormat(distributionGroupName: string, ownerName: string, appName: string, options?: { unprovisionedOnly? : boolean, udids? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listCsvFormat(distributionGroupName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    listCsvFormat(distributionGroupName: string, ownerName: string, appName: string, options: { unprovisionedOnly? : boolean, udids? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Returns all devices associated with the given distribution group
     *
     * @param {string} distributionGroupName The name of the distribution group.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.releaseId] when provided, gets the provisioning
     * state of the devices owned by users of this distribution group when compared
     * to the provided release.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(distributionGroupName: string, ownerName: string, appName: string, options?: { releaseId? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Returns all devices associated with the given distribution group
     *
     * @param {string} distributionGroupName The name of the distribution group.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.releaseId] when provided, gets the provisioning
     * state of the devices owned by users of this distribution group when compared
     * to the provided release.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(distributionGroupName: string, ownerName: string, appName: string, options?: { releaseId? : number, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    list(distributionGroupName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    list(distributionGroupName: string, ownerName: string, appName: string, options: { releaseId? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * **Warning, this operation is not reversible.**
     *
     * A successful call to this API will permanently stop ingesting any logs
     * received via SDK for the given installation ID, and cannot be restored. We
     * advise caution when using this API, it is designed to permanently disable
     * collection from a specific installation of the app on a device, usually
     * following the request from a user.
     *
     *
     * @param {string} installId The id of the device
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    blockLogsWithHttpOperationResponse(installId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * **Warning, this operation is not reversible.**
     *
     * A successful call to this API will permanently stop ingesting any logs
     * received via SDK for the given installation ID, and cannot be restored. We
     * advise caution when using this API, it is designed to permanently disable
     * collection from a specific installation of the app on a device, usually
     * following the request from a user.
     *
     *
     * @param {string} installId The id of the device
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    blockLogs(installId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    blockLogs(installId: string, ownerName: string, appName: string, callback: ServiceCallback<string>): void;
    blockLogs(installId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * Notifications
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Notifications {


    /**
     * Get Default email notification settings for the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetUserEmailSettingsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getUserEmailSettingsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetUserEmailSettingsOKResponse>>;

    /**
     * Get Default email notification settings for the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetUserEmailSettingsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetUserEmailSettingsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetUserEmailSettingsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getUserEmailSettings(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetUserEmailSettingsOKResponse>;
    getUserEmailSettings(callback: ServiceCallback<models.GetUserEmailSettingsOKResponse>): void;
    getUserEmailSettings(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetUserEmailSettingsOKResponse>): void;


    /**
     * Get Email notification settings of user for a particular app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetAppEmailSettingsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAppEmailSettingsWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetAppEmailSettingsOKResponse>>;

    /**
     * Get Email notification settings of user for a particular app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetAppEmailSettingsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetAppEmailSettingsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetAppEmailSettingsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAppEmailSettings(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetAppEmailSettingsOKResponse>;
    getAppEmailSettings(ownerName: string, appName: string, callback: ServiceCallback<models.GetAppEmailSettingsOKResponse>): void;
    getAppEmailSettings(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetAppEmailSettingsOKResponse>): void;
}

/**
 * @class
 * Users
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Users {


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetUserMetadataOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getUserMetadataWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetUserMetadataOKResponse>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetUserMetadataOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetUserMetadataOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetUserMetadataOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getUserMetadata(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetUserMetadataOKResponse>;
    getUserMetadata(callback: ServiceCallback<models.GetUserMetadataOKResponse>): void;
    getUserMetadata(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetUserMetadataOKResponse>): void;


    /**
     * Returns the user profile data
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponse>>;

    /**
     * Returns the user profile data
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponse>;
    get(callback: ServiceCallback<models.GetOKResponse>): void;
    get(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponse>): void;


    /**
     * Updates the user profile and returns the updated user data
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.displayName] The full name of the user. Might for
     * example be first and last name
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdateOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(options?: { displayName? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdateOKResponse>>;

    /**
     * Updates the user profile and returns the updated user data
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.displayName] The full name of the user. Might for
     * example be first and last name
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdateOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdateOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UpdateOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(options?: { displayName? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdateOKResponse>;
    update(callback: ServiceCallback<models.UpdateOKResponse>): void;
    update(options: { displayName? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdateOKResponse>): void;


    /**
     * Updates the given organization user
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} userName The slug name of the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.role] The user's role in the organizatiion.
     * Possible values include: 'admin', 'collaborator', 'member'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdateOrgRoleOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateOrgRoleWithHttpOperationResponse(orgName: string, userName: string, options?: { role? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdateOrgRoleOKResponse>>;

    /**
     * Updates the given organization user
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} userName The slug name of the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.role] The user's role in the organizatiion.
     * Possible values include: 'admin', 'collaborator', 'member'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdateOrgRoleOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdateOrgRoleOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UpdateOrgRoleOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateOrgRole(orgName: string, userName: string, options?: { role? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdateOrgRoleOKResponse>;
    updateOrgRole(orgName: string, userName: string, callback: ServiceCallback<models.UpdateOrgRoleOKResponse>): void;
    updateOrgRole(orgName: string, userName: string, options: { role? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdateOrgRoleOKResponse>): void;


    /**
     * Removes a user from an organization.
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} userName The slug name of the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    removeFromOrgWithHttpOperationResponse(orgName: string, userName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Removes a user from an organization.
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} userName The slug name of the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    removeFromOrg(orgName: string, userName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    removeFromOrg(orgName: string, userName: string, callback: ServiceCallback<void>): void;
    removeFromOrg(orgName: string, userName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get a user information from an organization by name - if there is explicit
     * permission return it, if not if not return highest implicit permission
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} userName The slug name of the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetForOrgOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getForOrgWithHttpOperationResponse(orgName: string, userName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetForOrgOKResponse>>;

    /**
     * Get a user information from an organization by name - if there is explicit
     * permission return it, if not if not return highest implicit permission
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} userName The slug name of the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetForOrgOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetForOrgOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetForOrgOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getForOrg(orgName: string, userName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetForOrgOKResponse>;
    getForOrg(orgName: string, userName: string, callback: ServiceCallback<models.GetForOrgOKResponse>): void;
    getForOrg(orgName: string, userName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetForOrgOKResponse>): void;


    /**
     * Returns a list of users that belong to an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForOrgWithHttpOperationResponse(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListForOrgOKResponseItem[]>>;

    /**
     * Returns a list of users that belong to an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForOrg(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListForOrgOKResponseItem[]>;
    listForOrg(orgName: string, callback: ServiceCallback<models.ListForOrgOKResponseItem[]>): void;
    listForOrg(orgName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListForOrgOKResponseItem[]>): void;


    /**
     * Returns the users associated with the app specified with the given app name
     * which belongs to the given owner.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponseItemModel[]>>;

    /**
     * Returns the users associated with the app specified with the given app name
     * which belongs to the given owner.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponseItemModel[]>;
    list(ownerName: string, appName: string, callback: ServiceCallback<models.ListOKResponseItemModel[]>): void;
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponseItemModel[]>): void;
}

/**
 * @class
 * OrgInvitations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface OrgInvitations {


    /**
     * Rejects a pending organization invitation
     *
     * @param {string} invitationToken The app invitation token that was sent to
     * the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    rejectWithHttpOperationResponse(invitationToken: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Rejects a pending organization invitation
     *
     * @param {string} invitationToken The app invitation token that was sent to
     * the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    reject(invitationToken: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    reject(invitationToken: string, callback: ServiceCallback<void>): void;
    reject(invitationToken: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Accepts a pending organization invitation for the specified user
     *
     * @param {string} invitationToken The app invitation token that was sent to
     * the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    acceptWithHttpOperationResponse(invitationToken: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Accepts a pending organization invitation for the specified user
     *
     * @param {string} invitationToken The app invitation token that was sent to
     * the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    accept(invitationToken: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    accept(invitationToken: string, callback: ServiceCallback<void>): void;
    accept(invitationToken: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Removes a user's invitation to an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} email The email address of the user to send the password
     * reset mail to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    unnamedMethodWithHttpOperationResponse(orgName: string, email: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Removes a user's invitation to an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} email The email address of the user to send the password
     * reset mail to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    unnamedMethod(orgName: string, email: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    unnamedMethod(orgName: string, email: string, callback: ServiceCallback<void>): void;
    unnamedMethod(orgName: string, email: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Cancels an existing organization invitation for the user and sends a new one
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} email The email address of the user to send the password
     * reset mail to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.role] The role of the user to be added. Possible
     * values include: 'admin', 'collaborator', 'member'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sendNewInvitationWithHttpOperationResponse(orgName: string, email: string, options?: { role? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Cancels an existing organization invitation for the user and sends a new one
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} email The email address of the user to send the password
     * reset mail to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.role] The role of the user to be added. Possible
     * values include: 'admin', 'collaborator', 'member'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    sendNewInvitation(orgName: string, email: string, options?: { role? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    sendNewInvitation(orgName: string, email: string, callback: ServiceCallback<void>): void;
    sendNewInvitation(orgName: string, email: string, options: { role? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Allows the role of an invited user to be changed
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} email The email address of the user to send the password
     * reset mail to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.role] The user's role in the organizatiion.
     * Possible values include: 'admin', 'collaborator', 'member'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(orgName: string, email: string, options?: { role? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Allows the role of an invited user to be changed
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} email The email address of the user to send the password
     * reset mail to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.role] The user's role in the organizatiion.
     * Possible values include: 'admin', 'collaborator', 'member'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(orgName: string, email: string, options?: { role? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(orgName: string, email: string, callback: ServiceCallback<void>): void;
    update(orgName: string, email: string, options: { role? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Invites a new or existing user to an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} userEmail The user's email address
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.role] The user's role. Possible values include:
     * 'admin', 'collaborator', 'member'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(orgName: string, userEmail: string, options?: { role? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Invites a new or existing user to an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} userEmail The user's email address
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.role] The user's role. Possible values include:
     * 'admin', 'collaborator', 'member'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(orgName: string, userEmail: string, options?: { role? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    create(orgName: string, userEmail: string, callback: ServiceCallback<void>): void;
    create(orgName: string, userEmail: string, options: { role? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Removes a user's invitation to an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} userEmail The user's email address
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(orgName: string, userEmail: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Removes a user's invitation to an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} userEmail The user's email address
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(orgName: string, userEmail: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(orgName: string, userEmail: string, callback: ServiceCallback<void>): void;
    deleteMethod(orgName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the pending invitations for the organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPendingWithHttpOperationResponse(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListPendingOKResponseItem[]>>;

    /**
     * Gets the pending invitations for the organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPending(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListPendingOKResponseItem[]>;
    listPending(orgName: string, callback: ServiceCallback<models.ListPendingOKResponseItem[]>): void;
    listPending(orgName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListPendingOKResponseItem[]>): void;
}

/**
 * @class
 * DistributionGroupInvitations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface DistributionGroupInvitations {


    /**
     * Accepts all pending invitations to distribution groups for the specified
     * user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    acceptAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Accepts all pending invitations to distribution groups for the specified
     * user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    acceptAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    acceptAll(callback: ServiceCallback<void>): void;
    acceptAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * AppInvitations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface AppInvitations {


    /**
     * Rejects a pending invitation for the specified user
     *
     * @param {string} invitationToken The app invitation token that was sent to
     * the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    rejectWithHttpOperationResponse(invitationToken: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Rejects a pending invitation for the specified user
     *
     * @param {string} invitationToken The app invitation token that was sent to
     * the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    reject(invitationToken: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    reject(invitationToken: string, callback: ServiceCallback<void>): void;
    reject(invitationToken: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Accepts a pending invitation for the specified user
     *
     * @param {string} invitationToken The app invitation token that was sent to
     * the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    acceptWithHttpOperationResponse(invitationToken: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Accepts a pending invitation for the specified user
     *
     * @param {string} invitationToken The app invitation token that was sent to
     * the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    accept(invitationToken: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    accept(invitationToken: string, callback: ServiceCallback<void>): void;
    accept(invitationToken: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Invites a new or existing user to an app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} userEmail The email of the user to invite
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createByEmailWithHttpOperationResponse(ownerName: string, appName: string, userEmail: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Invites a new or existing user to an app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} userEmail The email of the user to invite
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createByEmail(ownerName: string, appName: string, userEmail: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    createByEmail(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<void>): void;
    createByEmail(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Update pending invitation permission
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} userEmail The email of the user to invite
     *
     * @param {array} permissions The permissions the user has for the app in the
     * invitation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePermissionsWithHttpOperationResponse(ownerName: string, appName: string, userEmail: string, permissions: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update pending invitation permission
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} userEmail The email of the user to invite
     *
     * @param {array} permissions The permissions the user has for the app in the
     * invitation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updatePermissions(ownerName: string, appName: string, userEmail: string, permissions: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    updatePermissions(ownerName: string, appName: string, userEmail: string, permissions: string[], callback: ServiceCallback<void>): void;
    updatePermissions(ownerName: string, appName: string, userEmail: string, permissions: string[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Removes a user's invitation to an app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} userEmail The email of the user to invite
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(ownerName: string, appName: string, userEmail: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Removes a user's invitation to an app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} userEmail The email of the user to invite
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(ownerName: string, appName: string, userEmail: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<void>): void;
    deleteMethod(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Invites a new or existing user to an app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} userEmail The user's email address
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.role] The user's role. Possible values include:
     * 'admin', 'collaborator', 'member'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(ownerName: string, appName: string, userEmail: string, options?: { role? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Invites a new or existing user to an app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} userEmail The user's email address
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.role] The user's role. Possible values include:
     * 'admin', 'collaborator', 'member'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(ownerName: string, appName: string, userEmail: string, options?: { role? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    create(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<void>): void;
    create(ownerName: string, appName: string, userEmail: string, options: { role? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the pending invitations for the app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListOKResponseModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponseModelModel>>;

    /**
     * Gets the pending invitations for the app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListOKResponseModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListOKResponseModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListOKResponseModelModel} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponseModelModel>;
    list(ownerName: string, appName: string, callback: ServiceCallback<models.ListOKResponseModelModel>): void;
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponseModelModel>): void;
}

/**
 * @class
 * Sharedconnection
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Sharedconnection {


    /**
     * Gets all service connections of the service type for GDPR export.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    connectionsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionsOKResponseItem[]>>;

    /**
     * Gets all service connections of the service type for GDPR export.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    connections(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionsOKResponseItem[]>;
    connections(callback: ServiceCallback<models.ConnectionsOKResponseItem[]>): void;
    connections(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionsOKResponseItem[]>): void;
}

/**
 * @class
 * DataSubjectRight
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface DataSubjectRight {


    /**
     * @param {uuid} token Unique request ID (GUID)
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelExportRequestWithHttpOperationResponse(token: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @param {uuid} token Unique request ID (GUID)
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancelExportRequest(token: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    cancelExportRequest(token: string, callback: ServiceCallback<any>): void;
    cancelExportRequest(token: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @param {uuid} token Unique request ID (GUID)
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportStatusRequestOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    exportStatusRequestWithHttpOperationResponse(token: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportStatusRequestOKResponse>>;

    /**
     * @param {uuid} token Unique request ID (GUID)
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportStatusRequestOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportStatusRequestOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportStatusRequestOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    exportStatusRequest(token: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportStatusRequestOKResponse>;
    exportStatusRequest(token: string, callback: ServiceCallback<models.ExportStatusRequestOKResponse>): void;
    exportStatusRequest(token: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportStatusRequestOKResponse>): void;


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportRequestAcceptedResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    exportRequestWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportRequestAcceptedResponse>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportRequestAcceptedResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportRequestAcceptedResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportRequestAcceptedResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    exportRequest(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportRequestAcceptedResponse>;
    exportRequest(callback: ServiceCallback<models.ExportRequestAcceptedResponse>): void;
    exportRequest(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportRequestAcceptedResponse>): void;


    /**
     * @param {uuid} token Unique request ID (GUID)
     *
     * @param {string} email Email used for cancel delete with x-authz-bypass
     * headers
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelDeleteRequestWithHttpOperationResponse(token: string, email: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @param {uuid} token Unique request ID (GUID)
     *
     * @param {string} email Email used for cancel delete with x-authz-bypass
     * headers
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancelDeleteRequest(token: string, email: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    cancelDeleteRequest(token: string, email: string, callback: ServiceCallback<any>): void;
    cancelDeleteRequest(token: string, email: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @param {uuid} token Unique request ID (GUID)
     *
     * @param {string} email Email used for delete with x-authz-bypass headers
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeleteStatusRequestOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteStatusRequestWithHttpOperationResponse(token: string, email: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeleteStatusRequestOKResponse>>;

    /**
     * @param {uuid} token Unique request ID (GUID)
     *
     * @param {string} email Email used for delete with x-authz-bypass headers
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeleteStatusRequestOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeleteStatusRequestOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeleteStatusRequestOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteStatusRequest(token: string, email: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeleteStatusRequestOKResponse>;
    deleteStatusRequest(token: string, email: string, callback: ServiceCallback<models.DeleteStatusRequestOKResponse>): void;
    deleteStatusRequest(token: string, email: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeleteStatusRequestOKResponse>): void;


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeleteRequestAcceptedResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteRequestWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeleteRequestAcceptedResponse>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeleteRequestAcceptedResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeleteRequestAcceptedResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeleteRequestAcceptedResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteRequest(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeleteRequestAcceptedResponse>;
    deleteRequest(callback: ServiceCallback<models.DeleteRequestAcceptedResponse>): void;
    deleteRequest(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeleteRequestAcceptedResponse>): void;
}

/**
 * @class
 * ReleasesOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface ReleasesOperations {


    /**
     * Return a list of applications that the user has tester permission to with
     * the latest release for each.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listTesterAppsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListTesterAppsOKResponseItem[]>>;

    /**
     * Return a list of applications that the user has tester permission to with
     * the latest release for each.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listTesterApps(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListTesterAppsOKResponseItem[]>;
    listTesterApps(callback: ServiceCallback<models.ListTesterAppsOKResponseItem[]>): void;
    listTesterApps(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListTesterAppsOKResponseItem[]>): void;


    /**
     * If 'latest' is not specified then it will return the specified release if
     * it's enabled. If 'latest' is specified, regardless of whether a release hash
     * is provided, the latest enabled release is returned.
     *
     * @param {string} appSecret The secret of the target application
     *
     * @param {string} releaseHash The hash of the release or 'latest' to get the
     * latest release from all the distribution groups assigned to the current
     * user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.udid] When passing `udid` in the query string, a
     * provisioning check for the given device ID will be done. Will be ignored for
     * non-iOS platforms.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLatestByHashWithHttpOperationResponse(appSecret: string, releaseHash: string, options?: { udid? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * If 'latest' is not specified then it will return the specified release if
     * it's enabled. If 'latest' is specified, regardless of whether a release hash
     * is provided, the latest enabled release is returned.
     *
     * @param {string} appSecret The secret of the target application
     *
     * @param {string} releaseHash The hash of the release or 'latest' to get the
     * latest release from all the distribution groups assigned to the current
     * user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.udid] When passing `udid` in the query string, a
     * provisioning check for the given device ID will be done. Will be ignored for
     * non-iOS platforms.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getLatestByHash(appSecret: string, releaseHash: string, options?: { udid? : string, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getLatestByHash(appSecret: string, releaseHash: string, callback: ServiceCallback<any>): void;
    getLatestByHash(appSecret: string, releaseHash: string, options: { udid? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Get the latest release distributed to a private group the given user is a
     * member of for the given app.
     *
     * @param {string} appSecret The secret of the target application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.udid] When passing `udid` in the query string, a
     * provisioning check for the given device ID will be done. Will be ignored for
     * non-iOS platforms.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLatestPrivateReleaseWithHttpOperationResponse(appSecret: string, options?: { udid? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Get the latest release distributed to a private group the given user is a
     * member of for the given app.
     *
     * @param {string} appSecret The secret of the target application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.udid] When passing `udid` in the query string, a
     * provisioning check for the given device ID will be done. Will be ignored for
     * non-iOS platforms.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getLatestPrivateRelease(appSecret: string, options?: { udid? : string, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getLatestPrivateRelease(appSecret: string, callback: ServiceCallback<any>): void;
    getLatestPrivateRelease(appSecret: string, options: { udid? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Delete the given tester from the all releases
     *
     * @param {string} testerId The id of the tester
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeleteTesterFromDestinationsNotFoundResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteTesterFromDestinationsWithHttpOperationResponse(testerId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeleteTesterFromDestinationsNotFoundResponse>>;

    /**
     * Delete the given tester from the all releases
     *
     * @param {string} testerId The id of the tester
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeleteTesterFromDestinationsNotFoundResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeleteTesterFromDestinationsNotFoundResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      DeleteTesterFromDestinationsNotFoundResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteTesterFromDestinations(testerId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeleteTesterFromDestinationsNotFoundResponse>;
    deleteTesterFromDestinations(testerId: string, ownerName: string, appName: string, callback: ServiceCallback<models.DeleteTesterFromDestinationsNotFoundResponse>): void;
    deleteTesterFromDestinations(testerId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeleteTesterFromDestinationsNotFoundResponse>): void;


    /**
     * Update details about the specified tester associated with the release
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {uuid} testerId The id of the tester
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {boolean} mandatoryUpdate Whether a release is mandatory for the
     * given destination
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PutDistributionTesterNotFoundResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    putDistributionTesterWithHttpOperationResponse(releaseId: number, testerId: string, ownerName: string, appName: string, mandatoryUpdate: boolean, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PutDistributionTesterNotFoundResponse>>;

    /**
     * Update details about the specified tester associated with the release
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {uuid} testerId The id of the tester
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {boolean} mandatoryUpdate Whether a release is mandatory for the
     * given destination
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PutDistributionTesterNotFoundResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PutDistributionTesterNotFoundResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PutDistributionTesterNotFoundResponse} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    putDistributionTester(releaseId: number, testerId: string, ownerName: string, appName: string, mandatoryUpdate: boolean, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PutDistributionTesterNotFoundResponse>;
    putDistributionTester(releaseId: number, testerId: string, ownerName: string, appName: string, mandatoryUpdate: boolean, callback: ServiceCallback<models.PutDistributionTesterNotFoundResponse>): void;
    putDistributionTester(releaseId: number, testerId: string, ownerName: string, appName: string, mandatoryUpdate: boolean, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PutDistributionTesterNotFoundResponse>): void;


    /**
     * Delete the given tester from the release
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} testerId The id of the tester
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeleteDistributionTesterNotFoundResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteDistributionTesterWithHttpOperationResponse(releaseId: number, testerId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeleteDistributionTesterNotFoundResponse>>;

    /**
     * Delete the given tester from the release
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} testerId The id of the tester
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeleteDistributionTesterNotFoundResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeleteDistributionTesterNotFoundResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeleteDistributionTesterNotFoundResponse}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteDistributionTester(releaseId: number, testerId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeleteDistributionTesterNotFoundResponse>;
    deleteDistributionTester(releaseId: number, testerId: string, ownerName: string, appName: string, callback: ServiceCallback<models.DeleteDistributionTesterNotFoundResponse>): void;
    deleteDistributionTester(releaseId: number, testerId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeleteDistributionTesterNotFoundResponse>): void;


    /**
     * Distributes a release to a user
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} email Tester's email address
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.mandatoryUpdate] Flag to mark the release for the
     * provided destinations as mandatory
     *
     * @param {boolean} [options.notifyTesters] Flag to enable or disable
     * notifications to testers
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addTestersWithHttpOperationResponse(releaseId: number, ownerName: string, appName: string, email: string, options?: { mandatoryUpdate? : boolean, notifyTesters? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Distributes a release to a user
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} email Tester's email address
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.mandatoryUpdate] Flag to mark the release for the
     * provided destinations as mandatory
     *
     * @param {boolean} [options.notifyTesters] Flag to enable or disable
     * notifications to testers
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addTesters(releaseId: number, ownerName: string, appName: string, email: string, options?: { mandatoryUpdate? : boolean, notifyTesters? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addTesters(releaseId: number, ownerName: string, appName: string, email: string, callback: ServiceCallback<any>): void;
    addTesters(releaseId: number, ownerName: string, appName: string, email: string, options: { mandatoryUpdate? : boolean, notifyTesters? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Delete the given distribution store from the release
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} storeId The id of the distribution store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeleteDistributionStoreNotFoundResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteDistributionStoreWithHttpOperationResponse(releaseId: number, storeId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeleteDistributionStoreNotFoundResponse>>;

    /**
     * Delete the given distribution store from the release
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} storeId The id of the distribution store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeleteDistributionStoreNotFoundResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeleteDistributionStoreNotFoundResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeleteDistributionStoreNotFoundResponse} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteDistributionStore(releaseId: number, storeId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeleteDistributionStoreNotFoundResponse>;
    deleteDistributionStore(releaseId: number, storeId: string, ownerName: string, appName: string, callback: ServiceCallback<models.DeleteDistributionStoreNotFoundResponse>): void;
    deleteDistributionStore(releaseId: number, storeId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeleteDistributionStoreNotFoundResponse>): void;


    /**
     * Distributes a release to a store
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {uuid} id Unique id of the release destination
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addStoreWithHttpOperationResponse(releaseId: number, ownerName: string, appName: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Distributes a release to a store
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {uuid} id Unique id of the release destination
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addStore(releaseId: number, ownerName: string, appName: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addStore(releaseId: number, ownerName: string, appName: string, id: string, callback: ServiceCallback<any>): void;
    addStore(releaseId: number, ownerName: string, appName: string, id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Update details about the specified distribution group associated with the
     * release
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {uuid} groupId The id of the releases destination
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {boolean} mandatoryUpdate Whether a release is mandatory for the
     * given destination
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PutDistributionGroupNotFoundResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    putDistributionGroupWithHttpOperationResponse(releaseId: number, groupId: string, ownerName: string, appName: string, mandatoryUpdate: boolean, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PutDistributionGroupNotFoundResponse>>;

    /**
     * Update details about the specified distribution group associated with the
     * release
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {uuid} groupId The id of the releases destination
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {boolean} mandatoryUpdate Whether a release is mandatory for the
     * given destination
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PutDistributionGroupNotFoundResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PutDistributionGroupNotFoundResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PutDistributionGroupNotFoundResponse} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    putDistributionGroup(releaseId: number, groupId: string, ownerName: string, appName: string, mandatoryUpdate: boolean, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PutDistributionGroupNotFoundResponse>;
    putDistributionGroup(releaseId: number, groupId: string, ownerName: string, appName: string, mandatoryUpdate: boolean, callback: ServiceCallback<models.PutDistributionGroupNotFoundResponse>): void;
    putDistributionGroup(releaseId: number, groupId: string, ownerName: string, appName: string, mandatoryUpdate: boolean, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PutDistributionGroupNotFoundResponse>): void;


    /**
     * Delete the given distribution group from the release
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} groupId The id of the distribution group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeleteDistributionGroupNotFoundResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteDistributionGroupWithHttpOperationResponse(releaseId: number, groupId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeleteDistributionGroupNotFoundResponse>>;

    /**
     * Delete the given distribution group from the release
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} groupId The id of the distribution group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeleteDistributionGroupNotFoundResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeleteDistributionGroupNotFoundResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeleteDistributionGroupNotFoundResponse} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteDistributionGroup(releaseId: number, groupId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeleteDistributionGroupNotFoundResponse>;
    deleteDistributionGroup(releaseId: number, groupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.DeleteDistributionGroupNotFoundResponse>): void;
    deleteDistributionGroup(releaseId: number, groupId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeleteDistributionGroupNotFoundResponse>): void;


    /**
     * Distributes a release to a group
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {uuid} id Unique id of the release destination
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.mandatoryUpdate] Flag to mark the release for the
     * provided destinations as mandatory
     *
     * @param {boolean} [options.notifyTesters] Flag to enable or disable
     * notifications to testers
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addDistributionGroupWithHttpOperationResponse(releaseId: number, ownerName: string, appName: string, id: string, options?: { mandatoryUpdate? : boolean, notifyTesters? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Distributes a release to a group
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {uuid} id Unique id of the release destination
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.mandatoryUpdate] Flag to mark the release for the
     * provided destinations as mandatory
     *
     * @param {boolean} [options.notifyTesters] Flag to enable or disable
     * notifications to testers
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addDistributionGroup(releaseId: number, ownerName: string, appName: string, id: string, options?: { mandatoryUpdate? : boolean, notifyTesters? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addDistributionGroup(releaseId: number, ownerName: string, appName: string, id: string, callback: ServiceCallback<any>): void;
    addDistributionGroup(releaseId: number, ownerName: string, appName: string, id: string, options: { mandatoryUpdate? : boolean, notifyTesters? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Get a release with id `release_id`. If `release_id` is `latest`, return the
     * latest release that was distributed to the current user (from all the
     * distribution groups).
     *
     * @param {string} releaseId The ID of the release, or `latest` to get the
     * latest release from all the distribution groups assigned to the current
     * user.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.udid] when supplied, this call will also check if
     * the given UDID is provisioned. Will be ignored for non-iOS platforms. The
     * value will be returned in the property is_udid_provisioned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLatestByUserWithHttpOperationResponse(releaseId: string, ownerName: string, appName: string, options?: { udid? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Get a release with id `release_id`. If `release_id` is `latest`, return the
     * latest release that was distributed to the current user (from all the
     * distribution groups).
     *
     * @param {string} releaseId The ID of the release, or `latest` to get the
     * latest release from all the distribution groups assigned to the current
     * user.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.udid] when supplied, this call will also check if
     * the given UDID is provisioned. Will be ignored for non-iOS platforms. The
     * value will be returned in the property is_udid_provisioned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getLatestByUser(releaseId: string, ownerName: string, appName: string, options?: { udid? : string, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getLatestByUser(releaseId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    getLatestByUser(releaseId: string, ownerName: string, appName: string, options: { udid? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Update details of a release.
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.enabled] Toggle this release to be enable
     * distribute/download or not.
     *
     * @param {string} [options.releaseNotes] Release notes for this release.
     *
     * @param {object} [options.build] Contains metadata about the build that
     * produced the release being uploaded
     *
     * @param {string} [options.build.branchName] The branch name of the build
     * producing the release
     *
     * @param {string} [options.build.commitHash] The commit hash of the build
     * producing the release
     *
     * @param {string} [options.build.commitMessage] The commit message of the
     * build producing the release
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateDetailsWithHttpOperationResponse(releaseId: number, ownerName: string, appName: string, options?: { enabled? : boolean, releaseNotes? : string, build? : models.BodyBuild, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Update details of a release.
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.enabled] Toggle this release to be enable
     * distribute/download or not.
     *
     * @param {string} [options.releaseNotes] Release notes for this release.
     *
     * @param {object} [options.build] Contains metadata about the build that
     * produced the release being uploaded
     *
     * @param {string} [options.build.branchName] The branch name of the build
     * producing the release
     *
     * @param {string} [options.build.commitHash] The commit hash of the build
     * producing the release
     *
     * @param {string} [options.build.commitMessage] The commit message of the
     * build producing the release
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateDetails(releaseId: number, ownerName: string, appName: string, options?: { enabled? : boolean, releaseNotes? : string, build? : models.BodyBuild, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateDetails(releaseId: number, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    updateDetails(releaseId: number, ownerName: string, appName: string, options: { enabled? : boolean, releaseNotes? : string, build? : models.BodyBuild, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Updates a release.
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {object} body The release information.
     *
     * @param {string} [body.distributionGroupName] OBSOLETE. Will be removed in
     * future releases - use destinations instead. Name of a distribution group.
     * The release will be associated with this distribution group. If the
     * distribution group doesn't exist a 400 is returned. If both distribution
     * group name and id are passed, the id is taking precedence.
     *
     *
     * @param {string} [body.distributionGroupId] OBSOLETE. Will be removed in
     * future releases - use destinations instead. Id of a distribution group. The
     * release will be associated with this distribution group. If the distribution
     * group doesn't exist a 400 is returned. If both distribution group name and
     * id are passed, the id is taking precedence.
     *
     *
     * @param {string} [body.destinationName] OBSOLETE. Will be removed in future
     * releases - use destinations instead. Name of a destination. The release will
     * be associated with this destination. If the destination doesn't exist a 400
     * is returned. If both distribution group name and id are passed, the id is
     * taking precedence.
     *
     *
     * @param {string} [body.destinationId] OBSOLETE. Will be removed in future
     * releases - use destinations instead. Id of a destination. The release will
     * be associated with this destination. If the destination doesn't exist a 400
     * is returned. If both destination name and id are passed, the id is taking
     * precedence.
     *
     *
     * @param {string} [body.destinationType] Not used anymore.
     *
     * @param {string} [body.releaseNotes] Release notes for this release.
     *
     * @param {boolean} [body.mandatoryUpdate] A boolean which determines whether
     * this version should be a mandatory update or not.
     *
     * @param {array} [body.destinations] Distribute this release under the
     * following list of destinations (store groups or distribution groups).
     *
     * @param {object} [body.build] Contains metadata about the build that produced
     * the release being uploaded
     *
     * @param {string} [body.build.branchName] The branch name of the build
     * producing the release
     *
     * @param {string} [body.build.commitHash] The commit hash of the build
     * producing the release
     *
     * @param {string} [body.build.commitMessage] The commit message of the build
     * producing the release
     *
     * @param {boolean} [body.notifyTesters] A boolean which determines whether to
     * notify testers of a new release, default to true.
     *
     * @param {object} [body.metadata] An object containing all the release
     * metadata.
     *
     * @param {string} [body.metadata.dsaSignature] dsa signature of the release
     * for the sparkle feed.
     *
     * @param {string} [body.metadata.edSignature] edDSA signature of the release
     * for the sparkle feed.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(releaseId: number, body: models.BodyModelModelModelModelModelModelModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Updates a release.
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {object} body The release information.
     *
     * @param {string} [body.distributionGroupName] OBSOLETE. Will be removed in
     * future releases - use destinations instead. Name of a distribution group.
     * The release will be associated with this distribution group. If the
     * distribution group doesn't exist a 400 is returned. If both distribution
     * group name and id are passed, the id is taking precedence.
     *
     *
     * @param {string} [body.distributionGroupId] OBSOLETE. Will be removed in
     * future releases - use destinations instead. Id of a distribution group. The
     * release will be associated with this distribution group. If the distribution
     * group doesn't exist a 400 is returned. If both distribution group name and
     * id are passed, the id is taking precedence.
     *
     *
     * @param {string} [body.destinationName] OBSOLETE. Will be removed in future
     * releases - use destinations instead. Name of a destination. The release will
     * be associated with this destination. If the destination doesn't exist a 400
     * is returned. If both distribution group name and id are passed, the id is
     * taking precedence.
     *
     *
     * @param {string} [body.destinationId] OBSOLETE. Will be removed in future
     * releases - use destinations instead. Id of a destination. The release will
     * be associated with this destination. If the destination doesn't exist a 400
     * is returned. If both destination name and id are passed, the id is taking
     * precedence.
     *
     *
     * @param {string} [body.destinationType] Not used anymore.
     *
     * @param {string} [body.releaseNotes] Release notes for this release.
     *
     * @param {boolean} [body.mandatoryUpdate] A boolean which determines whether
     * this version should be a mandatory update or not.
     *
     * @param {array} [body.destinations] Distribute this release under the
     * following list of destinations (store groups or distribution groups).
     *
     * @param {object} [body.build] Contains metadata about the build that produced
     * the release being uploaded
     *
     * @param {string} [body.build.branchName] The branch name of the build
     * producing the release
     *
     * @param {string} [body.build.commitHash] The commit hash of the build
     * producing the release
     *
     * @param {string} [body.build.commitMessage] The commit message of the build
     * producing the release
     *
     * @param {boolean} [body.notifyTesters] A boolean which determines whether to
     * notify testers of a new release, default to true.
     *
     * @param {object} [body.metadata] An object containing all the release
     * metadata.
     *
     * @param {string} [body.metadata.dsaSignature] dsa signature of the release
     * for the sparkle feed.
     *
     * @param {string} [body.metadata.edSignature] edDSA signature of the release
     * for the sparkle feed.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(releaseId: number, body: models.BodyModelModelModelModelModelModelModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    update(releaseId: number, body: models.BodyModelModelModelModelModelModelModel, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    update(releaseId: number, body: models.BodyModelModelModelModelModelModelModel, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes a release.
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(releaseId: number, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes a release.
     *
     * @param {number} releaseId The ID of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(releaseId: number, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteMethod(releaseId: number, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    deleteMethod(releaseId: number, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Return detailed information about releases avaiable to a tester.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.publishedOnly] when *true*, filters out releases
     * that were uploaded but were never distributed. Releases that under deleted
     * distribution groups will not be filtered out.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    availableToTesterWithHttpOperationResponse(ownerName: string, appName: string, options?: { publishedOnly? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AvailableToTesterOKResponseItem[]>>;

    /**
     * Return detailed information about releases avaiable to a tester.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.publishedOnly] when *true*, filters out releases
     * that were uploaded but were never distributed. Releases that under deleted
     * distribution groups will not be filtered out.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    availableToTester(ownerName: string, appName: string, options?: { publishedOnly? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.AvailableToTesterOKResponseItem[]>;
    availableToTester(ownerName: string, appName: string, callback: ServiceCallback<models.AvailableToTesterOKResponseItem[]>): void;
    availableToTester(ownerName: string, appName: string, options: { publishedOnly? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailableToTesterOKResponseItem[]>): void;


    /**
     * Return basic information about releases.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.publishedOnly] When *true*, filters out releases
     * that were uploaded but were never distributed. Releases that under deleted
     * distribution groups will not be filtered out.
     *
     * @param {string} [options.scope] When the scope is 'tester', only includes
     * releases that have been distributed to groups that the user belongs to.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(ownerName: string, appName: string, options?: { publishedOnly? : boolean, scope? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponseItemModelModelModelModelModelModel[]>>;

    /**
     * Return basic information about releases.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.publishedOnly] When *true*, filters out releases
     * that were uploaded but were never distributed. Releases that under deleted
     * distribution groups will not be filtered out.
     *
     * @param {string} [options.scope] When the scope is 'tester', only includes
     * releases that have been distributed to groups that the user belongs to.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(ownerName: string, appName: string, options?: { publishedOnly? : boolean, scope? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponseItemModelModelModelModelModelModel[]>;
    list(ownerName: string, appName: string, callback: ServiceCallback<models.ListOKResponseItemModelModelModelModelModelModel[]>): void;
    list(ownerName: string, appName: string, options: { publishedOnly? : boolean, scope? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponseItemModelModelModelModelModelModel[]>): void;


    /**
     * Get the latest release from every distribution group associated with an
     * application.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listLatestWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListLatestOKResponseItem[]>>;

    /**
     * Get the latest release from every distribution group associated with an
     * application.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listLatest(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListLatestOKResponseItem[]>;
    listLatest(ownerName: string, appName: string, callback: ServiceCallback<models.ListLatestOKResponseItem[]>): void;
    listLatest(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListLatestOKResponseItem[]>): void;


    /**
     * Return detailed information about a distributed release in a given
     * distribution group.
     *
     * @param {string} ownerName The name of the app owner
     *
     * @param {string} appName The name of the app
     *
     * @param {string} distributionGroupName The name of the distribution group.
     *
     * @param {string} releaseId Also supports the constant `latest`, which will
     * return the latest release in the distribution group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLatestByDistributionGroupWithHttpOperationResponse(ownerName: string, appName: string, distributionGroupName: string, releaseId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Return detailed information about a distributed release in a given
     * distribution group.
     *
     * @param {string} ownerName The name of the app owner
     *
     * @param {string} appName The name of the app
     *
     * @param {string} distributionGroupName The name of the distribution group.
     *
     * @param {string} releaseId Also supports the constant `latest`, which will
     * return the latest release in the distribution group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getLatestByDistributionGroup(ownerName: string, appName: string, distributionGroupName: string, releaseId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getLatestByDistributionGroup(ownerName: string, appName: string, distributionGroupName: string, releaseId: string, callback: ServiceCallback<any>): void;
    getLatestByDistributionGroup(ownerName: string, appName: string, distributionGroupName: string, releaseId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes a release with id 'release_id' in a given distribution group.
     *
     * @param {string} ownerName The name of the app owner
     *
     * @param {string} appName The name of the app
     *
     * @param {string} distributionGroupName The name of the distribution group.
     *
     * @param {number} releaseId The ID identifying the unique release.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteWithDistributionGroupIdWithHttpOperationResponse(ownerName: string, appName: string, distributionGroupName: string, releaseId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a release with id 'release_id' in a given distribution group.
     *
     * @param {string} ownerName The name of the app owner
     *
     * @param {string} appName The name of the app
     *
     * @param {string} distributionGroupName The name of the distribution group.
     *
     * @param {number} releaseId The ID identifying the unique release.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteWithDistributionGroupId(ownerName: string, appName: string, distributionGroupName: string, releaseId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteWithDistributionGroupId(ownerName: string, appName: string, distributionGroupName: string, releaseId: number, callback: ServiceCallback<void>): void;
    deleteWithDistributionGroupId(ownerName: string, appName: string, distributionGroupName: string, releaseId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Return basic information about distributed releases in a given distribution
     * group.
     *
     * @param {string} distributionGroupName The name of the distribution group.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDistributionGroupWithHttpOperationResponse(distributionGroupName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Return basic information about distributed releases in a given distribution
     * group.
     *
     * @param {string} distributionGroupName The name of the distribution group.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDistributionGroup(distributionGroupName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listByDistributionGroup(distributionGroupName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    listByDistributionGroup(distributionGroupName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * AppsOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface AppsOperations {


    /**
     * Get a user apps information from an organization by name
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} userName The slug name of the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getForOrgUserWithHttpOperationResponse(orgName: string, userName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetForOrgUserOKResponseItem[]>>;

    /**
     * Get a user apps information from an organization by name
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} userName The slug name of the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getForOrgUser(orgName: string, userName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetForOrgUserOKResponseItem[]>;
    getForOrgUser(orgName: string, userName: string, callback: ServiceCallback<models.GetForOrgUserOKResponseItem[]>): void;
    getForOrgUser(orgName: string, userName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetForOrgUserOKResponseItem[]>): void;


    /**
     * Creates a new app for the organization and returns it to the caller
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} app The data for the app
     *
     * @param {string} [app.description] A short text describing the app
     *
     * @param {string} [app.releaseType] A one-word descriptive release-type value
     * that starts with a capital letter but is otherwise lowercase
     *
     * @param {string} app.displayName The descriptive name of the app. This can
     * contain any characters
     *
     * @param {string} [app.name] The name of the app used in URLs
     *
     * @param {string} app.os The OS the app will be running on. Possible values
     * include: 'Android', 'iOS', 'macOS', 'Tizen', 'tvOS', 'Windows', 'Linux',
     * 'Custom'
     *
     * @param {string} app.platform The platform of the app. Possible values
     * include: 'Java', 'Objective-C-Swift', 'UWP', 'Cordova', 'React-Native',
     * 'Xamarin', 'Unity', 'Electron', 'WPF', 'WinForms', 'Custom'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createForOrgWithHttpOperationResponse(orgName: string, app: models.AppModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Creates a new app for the organization and returns it to the caller
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} app The data for the app
     *
     * @param {string} [app.description] A short text describing the app
     *
     * @param {string} [app.releaseType] A one-word descriptive release-type value
     * that starts with a capital letter but is otherwise lowercase
     *
     * @param {string} app.displayName The descriptive name of the app. This can
     * contain any characters
     *
     * @param {string} [app.name] The name of the app used in URLs
     *
     * @param {string} app.os The OS the app will be running on. Possible values
     * include: 'Android', 'iOS', 'macOS', 'Tizen', 'tvOS', 'Windows', 'Linux',
     * 'Custom'
     *
     * @param {string} app.platform The platform of the app. Possible values
     * include: 'Java', 'Objective-C-Swift', 'UWP', 'Cordova', 'React-Native',
     * 'Xamarin', 'Unity', 'Electron', 'WPF', 'WinForms', 'Custom'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createForOrg(orgName: string, app: models.AppModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createForOrg(orgName: string, app: models.AppModel, callback: ServiceCallback<any>): void;
    createForOrg(orgName: string, app: models.AppModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Returns a list of apps for the organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForOrgWithHttpOperationResponse(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListForOrgOKResponseItemModelModel[]>>;

    /**
     * Returns a list of apps for the organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForOrg(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListForOrgOKResponseItemModelModel[]>;
    listForOrg(orgName: string, callback: ServiceCallback<models.ListForOrgOKResponseItemModelModel[]>): void;
    listForOrg(orgName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListForOrgOKResponseItemModelModel[]>): void;


    /**
     * Removes the user from the app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} userEmail The user email of the user to delete
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    removeUserWithHttpOperationResponse(ownerName: string, appName: string, userEmail: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Removes the user from the app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} userEmail The user email of the user to delete
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    removeUser(ownerName: string, appName: string, userEmail: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    removeUser(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<void>): void;
    removeUser(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Update user permission for the app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} userEmail The user email of the user to patch
     *
     * @param {array} permissions The permissions the user has for the app
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateUserPermissionsWithHttpOperationResponse(ownerName: string, appName: string, userEmail: string, permissions: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update user permission for the app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} userEmail The user email of the user to patch
     *
     * @param {array} permissions The permissions the user has for the app
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateUserPermissions(ownerName: string, appName: string, userEmail: string, permissions: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    updateUserPermissions(ownerName: string, appName: string, userEmail: string, permissions: string[], callback: ServiceCallback<void>): void;
    updateUserPermissions(ownerName: string, appName: string, userEmail: string, permissions: string[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Transfers ownership of an app to a new organization
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TransferToOrgOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    transferToOrgWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TransferToOrgOKResponse>>;

    /**
     * Transfers ownership of an app to a new organization
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TransferToOrgOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TransferToOrgOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TransferToOrgOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    transferToOrg(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TransferToOrgOKResponse>;
    transferToOrg(ownerName: string, appName: string, callback: ServiceCallback<models.TransferToOrgOKResponse>): void;
    transferToOrg(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TransferToOrgOKResponse>): void;


    /**
     * Transfers ownership of an app to a different user or organization
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} destinationOwnerName The name of the owner (user or
     * organization) to which the app is being transferred
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TransferOwnershipOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    transferOwnershipWithHttpOperationResponse(ownerName: string, appName: string, destinationOwnerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TransferOwnershipOKResponse>>;

    /**
     * Transfers ownership of an app to a different user or organization
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} destinationOwnerName The name of the owner (user or
     * organization) to which the app is being transferred
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TransferOwnershipOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TransferOwnershipOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TransferOwnershipOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    transferOwnership(ownerName: string, appName: string, destinationOwnerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TransferOwnershipOKResponse>;
    transferOwnership(ownerName: string, appName: string, destinationOwnerName: string, callback: ServiceCallback<models.TransferOwnershipOKResponse>): void;
    transferOwnership(ownerName: string, appName: string, destinationOwnerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TransferOwnershipOKResponse>): void;


    /**
     * Returns the testers associated with the app specified with the given app
     * name which belongs to the given owner.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listTestersWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListTestersOKResponseItem[]>>;

    /**
     * Returns the testers associated with the app specified with the given app
     * name which belongs to the given owner.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listTesters(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListTestersOKResponseItem[]>;
    listTesters(ownerName: string, appName: string, callback: ServiceCallback<models.ListTestersOKResponseItem[]>): void;
    listTesters(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListTestersOKResponseItem[]>): void;


    /**
     * Returns the details of all teams that have access to the app.
     *
     * @param {string} appName The name of the application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTeamsWithHttpOperationResponse(appName: string, ownerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetTeamsOKResponseItem[]>>;

    /**
     * Returns the details of all teams that have access to the app.
     *
     * @param {string} appName The name of the application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTeams(appName: string, ownerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetTeamsOKResponseItem[]>;
    getTeams(appName: string, ownerName: string, callback: ServiceCallback<models.GetTeamsOKResponseItem[]>): void;
    getTeams(appName: string, ownerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetTeamsOKResponseItem[]>): void;


    /**
     * Sets the app avatar
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.avatar] The image for an app avatar to upload.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdateAvatarOKResponseModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateAvatarWithHttpOperationResponse(ownerName: string, appName: string, options?: { avatar? : stream.Readable, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdateAvatarOKResponseModel>>;

    /**
     * Sets the app avatar
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.avatar] The image for an app avatar to upload.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdateAvatarOKResponseModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdateAvatarOKResponseModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UpdateAvatarOKResponseModel} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateAvatar(ownerName: string, appName: string, options?: { avatar? : stream.Readable, customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdateAvatarOKResponseModel>;
    updateAvatar(ownerName: string, appName: string, callback: ServiceCallback<models.UpdateAvatarOKResponseModel>): void;
    updateAvatar(ownerName: string, appName: string, options: { avatar? : stream.Readable, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdateAvatarOKResponseModel>): void;


    /**
     * Deletes the uploaded app avatar
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeleteAvatarOKResponseModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAvatarWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeleteAvatarOKResponseModel>>;

    /**
     * Deletes the uploaded app avatar
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeleteAvatarOKResponseModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeleteAvatarOKResponseModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeleteAvatarOKResponseModel} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAvatar(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeleteAvatarOKResponseModel>;
    deleteAvatar(ownerName: string, appName: string, callback: ServiceCallback<models.DeleteAvatarOKResponseModel>): void;
    deleteAvatar(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeleteAvatarOKResponseModel>): void;


    /**
     * Return a specific app with the given app name which belongs to the given
     * owner.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModelModel>>;

    /**
     * Return a specific app with the given app name which belongs to the given
     * owner.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModelModel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModelModel>;
    get(ownerName: string, appName: string, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModelModel>): void;
    get(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModelModel>): void;


    /**
     * Partially updates a single app
     *
     * @param {string} appName The name of the application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.app] The partial data for the app
     *
     * @param {string} [options.app.description] A short text describing the app
     *
     * @param {string} [options.app.displayName] The display name of the app
     *
     * @param {string} [options.app.releaseType] A one-word descriptive release
     * type value that starts with a capital letter but is otherwise lowercase
     *
     * @param {string} [options.app.name] The name of the app used in URLs
     *
     * @param {string} [options.app.iconUrl] The string representation of the URL
     * pointing to the app's icon
     *
     * @param {uuid} [options.app.iconAssetId] The uuid for the icon's asset id
     * from ACFUS
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdateOKResponseModelModelModelModelModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(appName: string, ownerName: string, options?: { app? : models.AppModelModel, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdateOKResponseModelModelModelModelModelModelModelModelModel>>;

    /**
     * Partially updates a single app
     *
     * @param {string} appName The name of the application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.app] The partial data for the app
     *
     * @param {string} [options.app.description] A short text describing the app
     *
     * @param {string} [options.app.displayName] The display name of the app
     *
     * @param {string} [options.app.releaseType] A one-word descriptive release
     * type value that starts with a capital letter but is otherwise lowercase
     *
     * @param {string} [options.app.name] The name of the app used in URLs
     *
     * @param {string} [options.app.iconUrl] The string representation of the URL
     * pointing to the app's icon
     *
     * @param {uuid} [options.app.iconAssetId] The uuid for the icon's asset id
     * from ACFUS
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdateOKResponseModelModelModelModelModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdateOKResponseModelModelModelModelModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      UpdateOKResponseModelModelModelModelModelModelModelModelModel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(appName: string, ownerName: string, options?: { app? : models.AppModelModel, customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdateOKResponseModelModelModelModelModelModelModelModelModel>;
    update(appName: string, ownerName: string, callback: ServiceCallback<models.UpdateOKResponseModelModelModelModelModelModelModelModelModel>): void;
    update(appName: string, ownerName: string, options: { app? : models.AppModelModel, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdateOKResponseModelModelModelModelModelModelModelModelModel>): void;


    /**
     * Delete an app
     *
     * @param {string} appName The name of the application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(appName: string, ownerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete an app
     *
     * @param {string} appName The name of the application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(appName: string, ownerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(appName: string, ownerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(appName: string, ownerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new app and returns it to the caller
     *
     * @param {object} app The data for the app
     *
     * @param {string} [app.description] A short text describing the app
     *
     * @param {string} [app.releaseType] A one-word descriptive release-type value
     * that starts with a capital letter but is otherwise lowercase
     *
     * @param {string} app.displayName The descriptive name of the app. This can
     * contain any characters
     *
     * @param {string} [app.name] The name of the app used in URLs
     *
     * @param {string} app.os The OS the app will be running on. Possible values
     * include: 'Android', 'iOS', 'macOS', 'Tizen', 'tvOS', 'Windows', 'Linux',
     * 'Custom'
     *
     * @param {string} app.platform The platform of the app. Possible values
     * include: 'Java', 'Objective-C-Swift', 'UWP', 'Cordova', 'React-Native',
     * 'Xamarin', 'Unity', 'Electron', 'WPF', 'WinForms', 'Custom'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateCreatedResponseModelModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(app: models.AppModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateCreatedResponseModelModelModelModelModelModel>>;

    /**
     * Creates a new app and returns it to the caller
     *
     * @param {object} app The data for the app
     *
     * @param {string} [app.description] A short text describing the app
     *
     * @param {string} [app.releaseType] A one-word descriptive release-type value
     * that starts with a capital letter but is otherwise lowercase
     *
     * @param {string} app.displayName The descriptive name of the app. This can
     * contain any characters
     *
     * @param {string} [app.name] The name of the app used in URLs
     *
     * @param {string} app.os The OS the app will be running on. Possible values
     * include: 'Android', 'iOS', 'macOS', 'Tizen', 'tvOS', 'Windows', 'Linux',
     * 'Custom'
     *
     * @param {string} app.platform The platform of the app. Possible values
     * include: 'Java', 'Objective-C-Swift', 'UWP', 'Cordova', 'React-Native',
     * 'Xamarin', 'Unity', 'Electron', 'WPF', 'WinForms', 'Custom'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateCreatedResponseModelModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateCreatedResponseModelModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      CreateCreatedResponseModelModelModelModelModelModel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(app: models.AppModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateCreatedResponseModelModelModelModelModelModel>;
    create(app: models.AppModel, callback: ServiceCallback<models.CreateCreatedResponseModelModelModelModelModelModel>): void;
    create(app: models.AppModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateCreatedResponseModelModelModelModelModelModel>): void;


    /**
     * Returns a list of apps
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.orderBy] The name of the attribute by which to
     * order the response by. By default, apps are in order of creation. All
     * results are ordered in ascending order. Possible values include:
     * 'display_name', 'name'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { orderBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponseItemModelModelModelModelModelModelModelModelModelModelModelModelModel[]>>;

    /**
     * Returns a list of apps
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.orderBy] The name of the attribute by which to
     * order the response by. By default, apps are in order of creation. All
     * results are ordered in ascending order. Possible values include:
     * 'display_name', 'name'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { orderBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponseItemModelModelModelModelModelModelModelModelModelModelModelModelModel[]>;
    list(callback: ServiceCallback<models.ListOKResponseItemModelModelModelModelModelModelModelModelModelModelModelModelModel[]>): void;
    list(options: { orderBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponseItemModelModelModelModelModelModelModelModelModelModelModelModelModel[]>): void;
}

/**
 * @class
 * DistributionGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface DistributionGroups {


    /**
     * Returns a unique list of users including the whole organization members plus
     * testers in any shared group of that org
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllTestersForOrgWithHttpOperationResponse(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListAllTestersForOrgOKResponseItem[]>>;

    /**
     * Returns a unique list of users including the whole organization members plus
     * testers in any shared group of that org
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAllTestersForOrg(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListAllTestersForOrgOKResponseItem[]>;
    listAllTestersForOrg(orgName: string, callback: ServiceCallback<models.ListAllTestersForOrgOKResponseItem[]>): void;
    listAllTestersForOrg(orgName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListAllTestersForOrgOKResponseItem[]>): void;


    /**
     * Returns a list of distribution groups with details for an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.appsLimit] The max number of apps to include in the
     * response
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    detailsForOrgWithHttpOperationResponse(orgName: string, options?: { appsLimit? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetailsForOrgOKResponseItem[]>>;

    /**
     * Returns a list of distribution groups with details for an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.appsLimit] The max number of apps to include in the
     * response
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    detailsForOrg(orgName: string, options?: { appsLimit? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.DetailsForOrgOKResponseItem[]>;
    detailsForOrg(orgName: string, callback: ServiceCallback<models.DetailsForOrgOKResponseItem[]>): void;
    detailsForOrg(orgName: string, options: { appsLimit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetailsForOrgOKResponseItem[]>): void;


    /**
     * Resend shared distribution group invite notification to previously invited
     * testers
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.userEmails] The list of emails of the users
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resendSharedInviteWithHttpOperationResponse(orgName: string, distributionGroupName: string, options?: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Resend shared distribution group invite notification to previously invited
     * testers
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.userEmails] The list of emails of the users
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resendSharedInvite(orgName: string, distributionGroupName: string, options?: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resendSharedInvite(orgName: string, distributionGroupName: string, callback: ServiceCallback<void>): void;
    resendSharedInvite(orgName: string, distributionGroupName: string, options: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Delete testers from distribution group in an org
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.userEmails] The list of emails of the users
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    bulkDeleteUsersWithHttpOperationResponse(orgName: string, distributionGroupName: string, options?: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete testers from distribution group in an org
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.userEmails] The list of emails of the users
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    bulkDeleteUsers(orgName: string, distributionGroupName: string, options?: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    bulkDeleteUsers(orgName: string, distributionGroupName: string, callback: ServiceCallback<void>): void;
    bulkDeleteUsers(orgName: string, distributionGroupName: string, options: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns a list of member in the distribution group specified
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsersForOrgWithHttpOperationResponse(orgName: string, distributionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListUsersForOrgOKResponseItem[]>>;

    /**
     * Returns a list of member in the distribution group specified
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsersForOrg(orgName: string, distributionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListUsersForOrgOKResponseItem[]>;
    listUsersForOrg(orgName: string, distributionGroupName: string, callback: ServiceCallback<models.ListUsersForOrgOKResponseItem[]>): void;
    listUsersForOrg(orgName: string, distributionGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListUsersForOrgOKResponseItem[]>): void;


    /**
     * Accepts an array of user email addresses to get added to the specified group
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.userEmails] The list of emails of the users
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addUsersForOrgWithHttpOperationResponse(orgName: string, distributionGroupName: string, options?: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AddUsersForOrgOKResponseItem[]>>;

    /**
     * Accepts an array of user email addresses to get added to the specified group
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.userEmails] The list of emails of the users
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addUsersForOrg(orgName: string, distributionGroupName: string, options?: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.AddUsersForOrgOKResponseItem[]>;
    addUsersForOrg(orgName: string, distributionGroupName: string, callback: ServiceCallback<models.AddUsersForOrgOKResponseItem[]>): void;
    addUsersForOrg(orgName: string, distributionGroupName: string, options: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AddUsersForOrgOKResponseItem[]>): void;


    /**
     * Delete apps from distribution group in an org
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.apps] The list of apps to delete from the
     * distribution group
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    bulkDeleteAppsWithHttpOperationResponse(orgName: string, distributionGroupName: string, options?: { apps? : models.AppsAppsItem[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete apps from distribution group in an org
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.apps] The list of apps to delete from the
     * distribution group
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    bulkDeleteApps(orgName: string, distributionGroupName: string, options?: { apps? : models.AppsAppsItem[], customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    bulkDeleteApps(orgName: string, distributionGroupName: string, callback: ServiceCallback<void>): void;
    bulkDeleteApps(orgName: string, distributionGroupName: string, options: { apps? : models.AppsAppsItem[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get apps from a distribution group in an org
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAppsWithHttpOperationResponse(orgName: string, distributionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetAppsOKResponseItem[]>>;

    /**
     * Get apps from a distribution group in an org
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getApps(orgName: string, distributionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetAppsOKResponseItem[]>;
    getApps(orgName: string, distributionGroupName: string, callback: ServiceCallback<models.GetAppsOKResponseItem[]>): void;
    getApps(orgName: string, distributionGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetAppsOKResponseItem[]>): void;


    /**
     * Add apps to distribution group in an org
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.apps] The list of apps to add to distribution group
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addAppsWithHttpOperationResponse(orgName: string, distributionGroupName: string, options?: { apps? : models.AppsAppsItemModel[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Add apps to distribution group in an org
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.apps] The list of apps to add to distribution group
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addApps(orgName: string, distributionGroupName: string, options?: { apps? : models.AppsAppsItemModel[], customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    addApps(orgName: string, distributionGroupName: string, callback: ServiceCallback<void>): void;
    addApps(orgName: string, distributionGroupName: string, options: { apps? : models.AppsAppsItemModel[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns a single distribution group in org for a given distribution group
     * name
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetForOrgOKResponseModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getForOrgWithHttpOperationResponse(orgName: string, distributionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetForOrgOKResponseModel>>;

    /**
     * Returns a single distribution group in org for a given distribution group
     * name
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetForOrgOKResponseModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetForOrgOKResponseModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetForOrgOKResponseModel} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getForOrg(orgName: string, distributionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetForOrgOKResponseModel>;
    getForOrg(orgName: string, distributionGroupName: string, callback: ServiceCallback<models.GetForOrgOKResponseModel>): void;
    getForOrg(orgName: string, distributionGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetForOrgOKResponseModel>): void;


    /**
     * Update one given distribution group name in an org
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] The name of the distribution group
     *
     * @param {boolean} [options.isPublic] Whether the distribution group is public
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PatchForOrgOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    patchForOrgWithHttpOperationResponse(orgName: string, distributionGroupName: string, options?: { name? : string, isPublic? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PatchForOrgOKResponse>>;

    /**
     * Update one given distribution group name in an org
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] The name of the distribution group
     *
     * @param {boolean} [options.isPublic] Whether the distribution group is public
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PatchForOrgOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PatchForOrgOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PatchForOrgOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    patchForOrg(orgName: string, distributionGroupName: string, options?: { name? : string, isPublic? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.PatchForOrgOKResponse>;
    patchForOrg(orgName: string, distributionGroupName: string, callback: ServiceCallback<models.PatchForOrgOKResponse>): void;
    patchForOrg(orgName: string, distributionGroupName: string, options: { name? : string, isPublic? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PatchForOrgOKResponse>): void;


    /**
     * Deletes a single distribution group from an org with a given distribution
     * group name
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteForOrgWithHttpOperationResponse(orgName: string, distributionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a single distribution group from an org with a given distribution
     * group name
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteForOrg(orgName: string, distributionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteForOrg(orgName: string, distributionGroupName: string, callback: ServiceCallback<void>): void;
    deleteForOrg(orgName: string, distributionGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a disribution goup which can be shared across apps under an
     * organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} name The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.displayName] The display name of the distribution
     * group. If not specified, the name will be used.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateForOrgCreatedResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createForOrgWithHttpOperationResponse(orgName: string, name: string, options?: { displayName? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateForOrgCreatedResponse>>;

    /**
     * Creates a disribution goup which can be shared across apps under an
     * organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} name The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.displayName] The display name of the distribution
     * group. If not specified, the name will be used.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateForOrgCreatedResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateForOrgCreatedResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreateForOrgCreatedResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createForOrg(orgName: string, name: string, options?: { displayName? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateForOrgCreatedResponse>;
    createForOrg(orgName: string, name: string, callback: ServiceCallback<models.CreateForOrgCreatedResponse>): void;
    createForOrg(orgName: string, name: string, options: { displayName? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateForOrgCreatedResponse>): void;


    /**
     * Returns a list of distribution groups in the org specified
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForOrgWithHttpOperationResponse(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListForOrgCreatedResponseItem[]>>;

    /**
     * Returns a list of distribution groups in the org specified
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForOrg(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListForOrgCreatedResponseItem[]>;
    listForOrg(orgName: string, callback: ServiceCallback<models.ListForOrgCreatedResponseItem[]>): void;
    listForOrg(orgName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListForOrgCreatedResponseItem[]>): void;


    /**
     * Resend distribution group app invite notification to previously invited
     * testers
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.userEmails] The list of emails of the users
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resendInviteWithHttpOperationResponse(ownerName: string, appName: string, distributionGroupName: string, options?: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Resend distribution group app invite notification to previously invited
     * testers
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.userEmails] The list of emails of the users
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resendInvite(ownerName: string, appName: string, distributionGroupName: string, options?: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resendInvite(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<void>): void;
    resendInvite(ownerName: string, appName: string, distributionGroupName: string, options: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Remove the users from the distribution group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.userEmails] The list of emails of the users
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    removeUserWithHttpOperationResponse(ownerName: string, appName: string, distributionGroupName: string, options?: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemoveUserOKResponseItem[]>>;

    /**
     * Remove the users from the distribution group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.userEmails] The list of emails of the users
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    removeUser(ownerName: string, appName: string, distributionGroupName: string, options?: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.RemoveUserOKResponseItem[]>;
    removeUser(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<models.RemoveUserOKResponseItem[]>): void;
    removeUser(ownerName: string, appName: string, distributionGroupName: string, options: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemoveUserOKResponseItem[]>): void;


    /**
     * Returns a list of member details in the distribution group specified
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.excludePendingInvitations] Whether to exclude
     * pending invitations in the response
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsersWithHttpOperationResponse(ownerName: string, appName: string, distributionGroupName: string, options?: { excludePendingInvitations? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListUsersOKResponseItem[]>>;

    /**
     * Returns a list of member details in the distribution group specified
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.excludePendingInvitations] Whether to exclude
     * pending invitations in the response
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsers(ownerName: string, appName: string, distributionGroupName: string, options?: { excludePendingInvitations? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListUsersOKResponseItem[]>;
    listUsers(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<models.ListUsersOKResponseItem[]>): void;
    listUsers(ownerName: string, appName: string, distributionGroupName: string, options: { excludePendingInvitations? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListUsersOKResponseItem[]>): void;


    /**
     * Adds the members to the specified distribution group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.userEmails] The list of emails of the users
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addUserWithHttpOperationResponse(ownerName: string, appName: string, distributionGroupName: string, options?: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AddUserOKResponseItem[]>>;

    /**
     * Adds the members to the specified distribution group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.userEmails] The list of emails of the users
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addUser(ownerName: string, appName: string, distributionGroupName: string, options?: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.AddUserOKResponseItem[]>;
    addUser(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<models.AddUserOKResponseItem[]>): void;
    addUser(ownerName: string, appName: string, distributionGroupName: string, options: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AddUserOKResponseItem[]>): void;


    /**
     * Returns a single distribution group for a given distribution group name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetOKResponseModelModelModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(ownerName: string, appName: string, distributionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponseModelModelModelModelModelModelModel>>;

    /**
     * Returns a single distribution group for a given distribution group name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetOKResponseModelModelModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetOKResponseModelModelModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      GetOKResponseModelModelModelModelModelModelModel} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(ownerName: string, appName: string, distributionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponseModelModelModelModelModelModelModel>;
    get(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModel>): void;
    get(ownerName: string, appName: string, distributionGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModel>): void;


    /**
     * Updates the attributes of distribution group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] The name of the distribution group
     *
     * @param {boolean} [options.isPublic] Whether the distribution group is public
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdateOKResponseModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(ownerName: string, appName: string, distributionGroupName: string, options?: { name? : string, isPublic? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdateOKResponseModelModelModelModel>>;

    /**
     * Updates the attributes of distribution group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] The name of the distribution group
     *
     * @param {boolean} [options.isPublic] Whether the distribution group is public
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdateOKResponseModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdateOKResponseModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UpdateOKResponseModelModelModelModel} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(ownerName: string, appName: string, distributionGroupName: string, options?: { name? : string, isPublic? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdateOKResponseModelModelModelModel>;
    update(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<models.UpdateOKResponseModelModelModelModel>): void;
    update(ownerName: string, appName: string, distributionGroupName: string, options: { name? : string, isPublic? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdateOKResponseModelModelModelModel>): void;


    /**
     * Deletes a distribution group
     *
     * @param {string} appName The name of the application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(appName: string, ownerName: string, distributionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a distribution group
     *
     * @param {string} appName The name of the application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} distributionGroupName The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(appName: string, ownerName: string, distributionGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(appName: string, ownerName: string, distributionGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(appName: string, ownerName: string, distributionGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns a list of distribution groups in the app specified
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponseItemModelModelModelModelModelModelModelModelModelModel[]>>;

    /**
     * Returns a list of distribution groups in the app specified
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponseItemModelModelModelModelModelModelModelModelModelModel[]>;
    list(ownerName: string, appName: string, callback: ServiceCallback<models.ListOKResponseItemModelModelModelModelModelModelModelModelModelModel[]>): void;
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponseItemModelModelModelModelModelModelModelModelModelModel[]>): void;


    /**
     * Creates a new distribution group and returns it to the caller
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} name The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.displayName] The display name of the distribution
     * group. If not specified, the name will be used.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateCreatedResponseModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(ownerName: string, appName: string, name: string, options?: { displayName? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateCreatedResponseModelModel>>;

    /**
     * Creates a new distribution group and returns it to the caller
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} name The name of the distribution group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.displayName] The display name of the distribution
     * group. If not specified, the name will be used.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateCreatedResponseModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateCreatedResponseModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreateCreatedResponseModelModel} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(ownerName: string, appName: string, name: string, options?: { displayName? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateCreatedResponseModelModel>;
    create(ownerName: string, appName: string, name: string, callback: ServiceCallback<models.CreateCreatedResponseModelModel>): void;
    create(ownerName: string, appName: string, name: string, options: { displayName? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateCreatedResponseModelModel>): void;
}

/**
 * @class
 * Teams
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Teams {


    /**
     * Removes a user from a team that is owned by an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {string} userName The slug name of the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    removeUserWithHttpOperationResponse(orgName: string, teamName: string, userName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Removes a user from a team that is owned by an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {string} userName The slug name of the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    removeUser(orgName: string, teamName: string, userName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    removeUser(orgName: string, teamName: string, userName: string, callback: ServiceCallback<void>): void;
    removeUser(orgName: string, teamName: string, userName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns the users of a team which is owned by an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetUsersOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getUsersWithHttpOperationResponse(orgName: string, teamName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetUsersOKResponse>>;

    /**
     * Returns the users of a team which is owned by an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetUsersOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetUsersOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetUsersOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getUsers(orgName: string, teamName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetUsersOKResponse>;
    getUsers(orgName: string, teamName: string, callback: ServiceCallback<models.GetUsersOKResponse>): void;
    getUsers(orgName: string, teamName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetUsersOKResponse>): void;


    /**
     * Adds a new user to a team that is owned by an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {string} userEmail The user's email address
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AddUserCreatedResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addUserWithHttpOperationResponse(orgName: string, teamName: string, userEmail: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AddUserCreatedResponse>>;

    /**
     * Adds a new user to a team that is owned by an organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {string} userEmail The user's email address
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AddUserCreatedResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AddUserCreatedResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AddUserCreatedResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addUser(orgName: string, teamName: string, userEmail: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AddUserCreatedResponse>;
    addUser(orgName: string, teamName: string, userEmail: string, callback: ServiceCallback<models.AddUserCreatedResponse>): void;
    addUser(orgName: string, teamName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AddUserCreatedResponse>): void;


    /**
     * Updates the permissions the team has to the app
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {string} appName The name of the application
     *
     * @param {array} permissions The permissions all members of the team have on
     * the app
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdatePermissionsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePermissionsWithHttpOperationResponse(orgName: string, teamName: string, appName: string, permissions: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdatePermissionsOKResponse>>;

    /**
     * Updates the permissions the team has to the app
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {string} appName The name of the application
     *
     * @param {array} permissions The permissions all members of the team have on
     * the app
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdatePermissionsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdatePermissionsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UpdatePermissionsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updatePermissions(orgName: string, teamName: string, appName: string, permissions: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdatePermissionsOKResponse>;
    updatePermissions(orgName: string, teamName: string, appName: string, permissions: string[], callback: ServiceCallback<models.UpdatePermissionsOKResponse>): void;
    updatePermissions(orgName: string, teamName: string, appName: string, permissions: string[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdatePermissionsOKResponse>): void;


    /**
     * Removes an app from a team
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    removeAppWithHttpOperationResponse(orgName: string, teamName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Removes an app from a team
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    removeApp(orgName: string, teamName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    removeApp(orgName: string, teamName: string, appName: string, callback: ServiceCallback<void>): void;
    removeApp(orgName: string, teamName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Adds an app to a team
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {string} name The name of the app to be added to the distribution
     * group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AddAppCreatedResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addAppWithHttpOperationResponse(orgName: string, teamName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AddAppCreatedResponse>>;

    /**
     * Adds an app to a team
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {string} name The name of the app to be added to the distribution
     * group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AddAppCreatedResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AddAppCreatedResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AddAppCreatedResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addApp(orgName: string, teamName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AddAppCreatedResponse>;
    addApp(orgName: string, teamName: string, name: string, callback: ServiceCallback<models.AddAppCreatedResponse>): void;
    addApp(orgName: string, teamName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AddAppCreatedResponse>): void;


    /**
     * Returns the apps a team has access to
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAppsWithHttpOperationResponse(orgName: string, teamName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListAppsOKResponseItem[]>>;

    /**
     * Returns the apps a team has access to
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listApps(orgName: string, teamName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListAppsOKResponseItem[]>;
    listApps(orgName: string, teamName: string, callback: ServiceCallback<models.ListAppsOKResponseItem[]>): void;
    listApps(orgName: string, teamName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListAppsOKResponseItem[]>): void;


    /**
     * Returns the details of a single team
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetTeamOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTeamWithHttpOperationResponse(orgName: string, teamName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetTeamOKResponse>>;

    /**
     * Returns the details of a single team
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetTeamOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetTeamOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetTeamOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTeam(orgName: string, teamName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetTeamOKResponse>;
    getTeam(orgName: string, teamName: string, callback: ServiceCallback<models.GetTeamOKResponse>): void;
    getTeam(orgName: string, teamName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetTeamOKResponse>): void;


    /**
     * Deletes a single team
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(orgName: string, teamName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a single team
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(orgName: string, teamName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(orgName: string, teamName: string, callback: ServiceCallback<void>): void;
    deleteMethod(orgName: string, teamName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a single team
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {string} displayName The new display name of the team
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdateOKResponseModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(orgName: string, teamName: string, displayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdateOKResponseModel>>;

    /**
     * Updates a single team
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} teamName The team's name
     *
     * @param {string} displayName The new display name of the team
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdateOKResponseModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdateOKResponseModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UpdateOKResponseModel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(orgName: string, teamName: string, displayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdateOKResponseModel>;
    update(orgName: string, teamName: string, displayName: string, callback: ServiceCallback<models.UpdateOKResponseModel>): void;
    update(orgName: string, teamName: string, displayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdateOKResponseModel>): void;


    /**
     * Returns the list of all teams in this org
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllWithHttpOperationResponse(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListAllOKResponseItem[]>>;

    /**
     * Returns the list of all teams in this org
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAll(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListAllOKResponseItem[]>;
    listAll(orgName: string, callback: ServiceCallback<models.ListAllOKResponseItem[]>): void;
    listAll(orgName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListAllOKResponseItem[]>): void;


    /**
     * Creates a team and returns it
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} displayName The display name of the team
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] The name of the team
     *
     * @param {string} [options.description] The description of the team
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createTeamWithHttpOperationResponse(orgName: string, displayName: string, options?: { name? : string, description? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateTeamCreatedResponseItem[]>>;

    /**
     * Creates a team and returns it
     *
     * @param {string} orgName The organization's name
     *
     * @param {string} displayName The display name of the team
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] The name of the team
     *
     * @param {string} [options.description] The description of the team
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createTeam(orgName: string, displayName: string, options?: { name? : string, description? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateTeamCreatedResponseItem[]>;
    createTeam(orgName: string, displayName: string, callback: ServiceCallback<models.CreateTeamCreatedResponseItem[]>): void;
    createTeam(orgName: string, displayName: string, options: { name? : string, description? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateTeamCreatedResponseItem[]>): void;
}

/**
 * @class
 * AzureSubscription
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface AzureSubscription {


    /**
     * Returns a list of azure subscriptions for the organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForOrgWithHttpOperationResponse(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListForOrgOKResponseItemModel[]>>;

    /**
     * Returns a list of azure subscriptions for the organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForOrg(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListForOrgOKResponseItemModel[]>;
    listForOrg(orgName: string, callback: ServiceCallback<models.ListForOrgOKResponseItemModel[]>): void;
    listForOrg(orgName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListForOrgOKResponseItemModel[]>): void;


    /**
     * Returns a list of azure subscriptions for the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForUserWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListForUserOKResponseItem[]>>;

    /**
     * Returns a list of azure subscriptions for the user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForUser(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListForUserOKResponseItem[]>;
    listForUser(callback: ServiceCallback<models.ListForUserOKResponseItem[]>): void;
    listForUser(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListForUserOKResponseItem[]>): void;


    /**
     * Delete the azure subscriptions for the app
     *
     * @param {uuid} azureSubscriptionId The unique ID (UUID) of the azure
     * subscription
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteForAppWithHttpOperationResponse(azureSubscriptionId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete the azure subscriptions for the app
     *
     * @param {uuid} azureSubscriptionId The unique ID (UUID) of the azure
     * subscription
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteForApp(azureSubscriptionId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteForApp(azureSubscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    deleteForApp(azureSubscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns a list of azure subscriptions for the app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForAppWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListForAppOKResponseItem[]>>;

    /**
     * Returns a list of azure subscriptions for the app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForApp(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListForAppOKResponseItem[]>;
    listForApp(ownerName: string, appName: string, callback: ServiceCallback<models.ListForAppOKResponseItem[]>): void;
    listForApp(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListForAppOKResponseItem[]>): void;


    /**
     * Link azure subscription to an app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {uuid} subscriptionId The azure subscription id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    linkForAppWithHttpOperationResponse(ownerName: string, appName: string, subscriptionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Link azure subscription to an app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {uuid} subscriptionId The azure subscription id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    linkForApp(ownerName: string, appName: string, subscriptionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    linkForApp(ownerName: string, appName: string, subscriptionId: string, callback: ServiceCallback<void>): void;
    linkForApp(ownerName: string, appName: string, subscriptionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * OrganizationOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface OrganizationOperations {


    /**
     * Sets the organization avatar
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.avatar] The image for an Organization avatar to
     * upload.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdateAvatarOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateAvatarWithHttpOperationResponse(orgName: string, options?: { avatar? : stream.Readable, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdateAvatarOKResponse>>;

    /**
     * Sets the organization avatar
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.avatar] The image for an Organization avatar to
     * upload.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdateAvatarOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdateAvatarOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UpdateAvatarOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateAvatar(orgName: string, options?: { avatar? : stream.Readable, customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdateAvatarOKResponse>;
    updateAvatar(orgName: string, callback: ServiceCallback<models.UpdateAvatarOKResponse>): void;
    updateAvatar(orgName: string, options: { avatar? : stream.Readable, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdateAvatarOKResponse>): void;


    /**
     * Deletes the uploaded organization avatar
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeleteAvatarOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAvatarWithHttpOperationResponse(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeleteAvatarOKResponse>>;

    /**
     * Deletes the uploaded organization avatar
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeleteAvatarOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeleteAvatarOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeleteAvatarOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAvatar(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeleteAvatarOKResponse>;
    deleteAvatar(orgName: string, callback: ServiceCallback<models.DeleteAvatarOKResponse>): void;
    deleteAvatar(orgName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeleteAvatarOKResponse>): void;
}

/**
 * @class
 * Organizations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Organizations {


    /**
     * Returns the details of a single organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetOKResponseModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponseModel>>;

    /**
     * Returns the details of a single organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetOKResponseModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetOKResponseModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetOKResponseModel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponseModel>;
    get(orgName: string, callback: ServiceCallback<models.GetOKResponseModel>): void;
    get(orgName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponseModel>): void;


    /**
     * Returns a list of organizations the requesting user has access to
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.displayName] The full (friendly) name of the
     * organization.
     *
     * @param {string} [options.name] The name of the organization used in URLs
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdateOKResponseModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(orgName: string, options?: { displayName? : string, name? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdateOKResponseModelModel>>;

    /**
     * Returns a list of organizations the requesting user has access to
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.displayName] The full (friendly) name of the
     * organization.
     *
     * @param {string} [options.name] The name of the organization used in URLs
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdateOKResponseModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdateOKResponseModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UpdateOKResponseModelModel} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(orgName: string, options?: { displayName? : string, name? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdateOKResponseModelModel>;
    update(orgName: string, callback: ServiceCallback<models.UpdateOKResponseModelModel>): void;
    update(orgName: string, options: { displayName? : string, name? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdateOKResponseModelModel>): void;


    /**
     * Deletes a single organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a single organization
     *
     * @param {string} orgName The organization's name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(orgName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(orgName: string, callback: ServiceCallback<void>): void;
    deleteMethod(orgName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new organization and returns it to the caller
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.displayName] The display name of the organization
     *
     * @param {string} [options.name] The name of the organization used in URLs
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateOrUpdateCreatedResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(options?: { displayName? : string, name? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateOrUpdateCreatedResponse>>;

    /**
     * Creates a new organization and returns it to the caller
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.displayName] The display name of the organization
     *
     * @param {string} [options.name] The name of the organization used in URLs
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateOrUpdateCreatedResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateOrUpdateCreatedResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreateOrUpdateCreatedResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(options?: { displayName? : string, name? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateOrUpdateCreatedResponse>;
    createOrUpdate(callback: ServiceCallback<models.CreateOrUpdateCreatedResponse>): void;
    createOrUpdate(options: { displayName? : string, name? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateOrUpdateCreatedResponse>): void;


    /**
     * Returns a list of organizations the requesting user has access to
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponseItem[]>>;

    /**
     * Returns a list of organizations the requesting user has access to
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponseItem[]>;
    list(callback: ServiceCallback<models.ListOKResponseItem[]>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponseItem[]>): void;


    /**
     * Returns a list organizations in which the requesting user is an admin
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListAdministeredOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAdministeredWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListAdministeredOKResponse>>;

    /**
     * Returns a list organizations in which the requesting user is an admin
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListAdministeredOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListAdministeredOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListAdministeredOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAdministered(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListAdministeredOKResponse>;
    listAdministered(callback: ServiceCallback<models.ListAdministeredOKResponse>): void;
    listAdministered(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListAdministeredOKResponse>): void;
}

/**
 * @class
 * BillingAggregatedInformation
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface BillingAggregatedInformation {


    /**
     * Aggregated Billing Information for a given Organization.
     *
     * @param {string} orgName The name of the Organization
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.service] Type of service that should be included in
     * the Billing Information. Possible values include: 'Test', 'Build'
     *
     * @param {string} [options.period] Type of period that should be included in
     * the Billing Information. Possible values include: 'Previous', 'Current',
     * 'Next'
     *
     * @param {boolean} [options.showOriginalPlans] Controls whether the API should
     * show the original plan when Azure Subscription is not enabled
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetForOrgOKResponseModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getForOrgWithHttpOperationResponse(orgName: string, options?: { service? : string, period? : string, showOriginalPlans? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetForOrgOKResponseModelModel>>;

    /**
     * Aggregated Billing Information for a given Organization.
     *
     * @param {string} orgName The name of the Organization
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.service] Type of service that should be included in
     * the Billing Information. Possible values include: 'Test', 'Build'
     *
     * @param {string} [options.period] Type of period that should be included in
     * the Billing Information. Possible values include: 'Previous', 'Current',
     * 'Next'
     *
     * @param {boolean} [options.showOriginalPlans] Controls whether the API should
     * show the original plan when Azure Subscription is not enabled
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetForOrgOKResponseModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetForOrgOKResponseModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetForOrgOKResponseModelModel} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getForOrg(orgName: string, options?: { service? : string, period? : string, showOriginalPlans? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.GetForOrgOKResponseModelModel>;
    getForOrg(orgName: string, callback: ServiceCallback<models.GetForOrgOKResponseModelModel>): void;
    getForOrg(orgName: string, options: { service? : string, period? : string, showOriginalPlans? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetForOrgOKResponseModelModel>): void;


    /**
     * Aggregated Billing Information for the requesting user and the organizations
     * in which the user is an admin.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.service] Type of service that should be included in
     * the Billing Information. Possible values include: 'Test', 'Build'
     *
     * @param {string} [options.period] Type of period that should be included in
     * the Billing Information. Possible values include: 'Previous', 'Current',
     * 'Next'
     *
     * @param {boolean} [options.showOriginalPlans] Controls whether the API should
     * show the original plan when Azure Subscription is not enabled
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetAllOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAllWithHttpOperationResponse(options?: { service? : string, period? : string, showOriginalPlans? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetAllOKResponse>>;

    /**
     * Aggregated Billing Information for the requesting user and the organizations
     * in which the user is an admin.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.service] Type of service that should be included in
     * the Billing Information. Possible values include: 'Test', 'Build'
     *
     * @param {string} [options.period] Type of period that should be included in
     * the Billing Information. Possible values include: 'Previous', 'Current',
     * 'Next'
     *
     * @param {boolean} [options.showOriginalPlans] Controls whether the API should
     * show the original plan when Azure Subscription is not enabled
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetAllOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetAllOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetAllOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAll(options?: { service? : string, period? : string, showOriginalPlans? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.GetAllOKResponse>;
    getAll(callback: ServiceCallback<models.GetAllOKResponse>): void;
    getAll(options: { service? : string, period? : string, showOriginalPlans? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetAllOKResponse>): void;


    /**
     * Aggregated Billing Information for owner of a given app.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.service] Type of service that should be included in
     * the Billing Information. Possible values include: 'Test', 'Build'
     *
     * @param {string} [options.period] Type of period that should be included in
     * the Billing Information. Possible values include: 'Previous', 'Current',
     * 'Next'
     *
     * @param {boolean} [options.showOriginalPlans] Controls whether the API should
     * show the original plan when Azure Subscription is not enabled
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetByAppOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByAppWithHttpOperationResponse(ownerName: string, appName: string, options?: { service? : string, period? : string, showOriginalPlans? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetByAppOKResponse>>;

    /**
     * Aggregated Billing Information for owner of a given app.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.service] Type of service that should be included in
     * the Billing Information. Possible values include: 'Test', 'Build'
     *
     * @param {string} [options.period] Type of period that should be included in
     * the Billing Information. Possible values include: 'Previous', 'Current',
     * 'Next'
     *
     * @param {boolean} [options.showOriginalPlans] Controls whether the API should
     * show the original plan when Azure Subscription is not enabled
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetByAppOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetByAppOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetByAppOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByApp(ownerName: string, appName: string, options?: { service? : string, period? : string, showOriginalPlans? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.GetByAppOKResponse>;
    getByApp(ownerName: string, appName: string, callback: ServiceCallback<models.GetByAppOKResponse>): void;
    getByApp(ownerName: string, appName: string, options: { service? : string, period? : string, showOriginalPlans? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetByAppOKResponse>): void;
}

/**
 * @class
 * LegacyCodePushAcquisition
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface LegacyCodePushAcquisition {


    /**
     * Check for updates
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.deploymentKey]
     *
     * @param {string} [options.appVersion]
     *
     * @param {string} [options.packageHash]
     *
     * @param {string} [options.label]
     *
     * @param {string} [options.clientUniqueId]
     *
     * @param {string} [options.isCompanion]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdateCheckOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateCheckWithHttpOperationResponse(options?: { deploymentKey? : string, appVersion? : string, packageHash? : string, label? : string, clientUniqueId? : string, isCompanion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdateCheckOKResponse>>;

    /**
     * Check for updates
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.deploymentKey]
     *
     * @param {string} [options.appVersion]
     *
     * @param {string} [options.packageHash]
     *
     * @param {string} [options.label]
     *
     * @param {string} [options.clientUniqueId]
     *
     * @param {string} [options.isCompanion]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdateCheckOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdateCheckOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UpdateCheckOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateCheck(options?: { deploymentKey? : string, appVersion? : string, packageHash? : string, label? : string, clientUniqueId? : string, isCompanion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdateCheckOKResponse>;
    updateCheck(callback: ServiceCallback<models.UpdateCheckOKResponse>): void;
    updateCheck(options: { deploymentKey? : string, appVersion? : string, packageHash? : string, label? : string, clientUniqueId? : string, isCompanion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdateCheckOKResponse>): void;


    /**
     * Report download of specified release
     *
     * @param {object} releaseMetadata Deployment status metric properties
     *
     * @param {string} [releaseMetadata.deploymentKey]
     *
     * @param {string} [releaseMetadata.label]
     *
     * @param {string} [releaseMetadata.appVersion]
     *
     * @param {string} [releaseMetadata.previousDeploymentKey]
     *
     * @param {string} [releaseMetadata.previousLabelOrAppVersion]
     *
     * @param {string} [releaseMetadata.status]
     *
     * @param {string} [releaseMetadata.clientUniqueId]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateDownloadStatusWithHttpOperationResponse(releaseMetadata: models.ReleaseMetadataModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Report download of specified release
     *
     * @param {object} releaseMetadata Deployment status metric properties
     *
     * @param {string} [releaseMetadata.deploymentKey]
     *
     * @param {string} [releaseMetadata.label]
     *
     * @param {string} [releaseMetadata.appVersion]
     *
     * @param {string} [releaseMetadata.previousDeploymentKey]
     *
     * @param {string} [releaseMetadata.previousLabelOrAppVersion]
     *
     * @param {string} [releaseMetadata.status]
     *
     * @param {string} [releaseMetadata.clientUniqueId]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateDownloadStatus(releaseMetadata: models.ReleaseMetadataModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    updateDownloadStatus(releaseMetadata: models.ReleaseMetadataModel, callback: ServiceCallback<void>): void;
    updateDownloadStatus(releaseMetadata: models.ReleaseMetadataModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Report deploy of specified release
     *
     * @param {object} releaseMetadata Deployment status metric properties
     *
     * @param {string} [releaseMetadata.deploymentKey]
     *
     * @param {string} [releaseMetadata.label]
     *
     * @param {string} [releaseMetadata.appVersion]
     *
     * @param {string} [releaseMetadata.previousDeploymentKey]
     *
     * @param {string} [releaseMetadata.previousLabelOrAppVersion]
     *
     * @param {string} [releaseMetadata.status]
     *
     * @param {string} [releaseMetadata.clientUniqueId]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateInstallsStatusWithHttpOperationResponse(releaseMetadata: models.ReleaseMetadataModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Report deploy of specified release
     *
     * @param {object} releaseMetadata Deployment status metric properties
     *
     * @param {string} [releaseMetadata.deploymentKey]
     *
     * @param {string} [releaseMetadata.label]
     *
     * @param {string} [releaseMetadata.appVersion]
     *
     * @param {string} [releaseMetadata.previousDeploymentKey]
     *
     * @param {string} [releaseMetadata.previousLabelOrAppVersion]
     *
     * @param {string} [releaseMetadata.status]
     *
     * @param {string} [releaseMetadata.clientUniqueId]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateInstallsStatus(releaseMetadata: models.ReleaseMetadataModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    updateInstallsStatus(releaseMetadata: models.ReleaseMetadataModel, callback: ServiceCallback<void>): void;
    updateInstallsStatus(releaseMetadata: models.ReleaseMetadataModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Invitations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Invitations {


    /**
     * Returns all invitations sent by the caller
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sentWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SentOKResponseItem[]>>;

    /**
     * Returns all invitations sent by the caller
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    sent(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SentOKResponseItem[]>;
    sent(callback: ServiceCallback<models.SentOKResponseItem[]>): void;
    sent(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SentOKResponseItem[]>): void;
}

/**
 * @class
 * Builds
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Builds {


    /**
     * Gets the Xcode versions available to this app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listXcodeVersionsWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListXcodeVersionsOKResponseItem[]>>;

    /**
     * Gets the Xcode versions available to this app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listXcodeVersions(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListXcodeVersionsOKResponseItem[]>;
    listXcodeVersions(ownerName: string, appName: string, callback: ServiceCallback<models.ListXcodeVersionsOKResponseItem[]>): void;
    listXcodeVersions(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListXcodeVersionsOKResponseItem[]>): void;


    /**
     * Gets the Xamarin SDK bundles available to this app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listXamarinSDKBundlesWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListXamarinSDKBundlesOKResponseItem[]>>;

    /**
     * Gets the Xamarin SDK bundles available to this app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listXamarinSDKBundles(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListXamarinSDKBundlesOKResponseItem[]>;
    listXamarinSDKBundles(ownerName: string, appName: string, callback: ServiceCallback<models.ListXamarinSDKBundlesOKResponseItem[]>): void;
    listXamarinSDKBundles(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListXamarinSDKBundlesOKResponseItem[]>): void;


    /**
     * Returns available toolsets for application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.tools] Toolset name. Possible values include:
     * 'xamarin', 'xcode', 'node'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListToolsetsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listToolsetsWithHttpOperationResponse(ownerName: string, appName: string, options?: { tools? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListToolsetsOKResponse>>;

    /**
     * Returns available toolsets for application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.tools] Toolset name. Possible values include:
     * 'xamarin', 'xcode', 'node'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListToolsetsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListToolsetsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListToolsetsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listToolsets(ownerName: string, appName: string, options?: { tools? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListToolsetsOKResponse>;
    listToolsets(ownerName: string, appName: string, callback: ServiceCallback<models.ListToolsetsOKResponse>): void;
    listToolsets(ownerName: string, appName: string, options: { tools? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListToolsetsOKResponse>): void;


    /**
     * Get the build log
     *
     * @param {number} buildId The build ID
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetLogOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLogWithHttpOperationResponse(buildId: number, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetLogOKResponse>>;

    /**
     * Get the build log
     *
     * @param {number} buildId The build ID
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetLogOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetLogOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetLogOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getLog(buildId: number, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetLogOKResponse>;
    getLog(buildId: number, ownerName: string, appName: string, callback: ServiceCallback<models.GetLogOKResponse>): void;
    getLog(buildId: number, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetLogOKResponse>): void;


    /**
     * Gets the download URI
     *
     * @param {number} buildId The build ID
     *
     * @param {string} downloadType The download type. Possible values include:
     * 'build', 'symbols', 'logs', 'mapping', 'bundle'
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetDownloadUriOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDownloadUriWithHttpOperationResponse(buildId: number, downloadType: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetDownloadUriOKResponse>>;

    /**
     * Gets the download URI
     *
     * @param {number} buildId The build ID
     *
     * @param {string} downloadType The download type. Possible values include:
     * 'build', 'symbols', 'logs', 'mapping', 'bundle'
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetDownloadUriOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetDownloadUriOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetDownloadUriOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDownloadUri(buildId: number, downloadType: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetDownloadUriOKResponse>;
    getDownloadUri(buildId: number, downloadType: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetDownloadUriOKResponse>): void;
    getDownloadUri(buildId: number, downloadType: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetDownloadUriOKResponse>): void;


    /**
     * Distribute a build
     *
     * @param {number} buildId The build ID
     *
     * @param {object} distributeInfo The distribution details
     *
     * @param {array} [distributeInfo.destinations] Array of objects {id:string,
     * type:string} with "id" being the distribution group ID, store ID, or tester
     * email, and "type" being "group", "store", or "tester"
     *
     * @param {string} [distributeInfo.releaseNotes] The release notes
     *
     * @param {boolean} [distributeInfo.mandatoryUpdate]
     *
     * @param {boolean} [distributeInfo.notifyTesters]
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DistributeOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    distributeWithHttpOperationResponse(buildId: number, distributeInfo: models.DistributeInfo, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DistributeOKResponse>>;

    /**
     * Distribute a build
     *
     * @param {number} buildId The build ID
     *
     * @param {object} distributeInfo The distribution details
     *
     * @param {array} [distributeInfo.destinations] Array of objects {id:string,
     * type:string} with "id" being the distribution group ID, store ID, or tester
     * email, and "type" being "group", "store", or "tester"
     *
     * @param {string} [distributeInfo.releaseNotes] The release notes
     *
     * @param {boolean} [distributeInfo.mandatoryUpdate]
     *
     * @param {boolean} [distributeInfo.notifyTesters]
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DistributeOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DistributeOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DistributeOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    distribute(buildId: number, distributeInfo: models.DistributeInfo, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DistributeOKResponse>;
    distribute(buildId: number, distributeInfo: models.DistributeInfo, ownerName: string, appName: string, callback: ServiceCallback<models.DistributeOKResponse>): void;
    distribute(buildId: number, distributeInfo: models.DistributeInfo, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DistributeOKResponse>): void;


    /**
     * Returns the build detail for the given build ID
     *
     * @param {number} buildId The build ID
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetOKResponseModelModelModelModelModelModelModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(buildId: number, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModel>>;

    /**
     * Returns the build detail for the given build ID
     *
     * @param {number} buildId The build ID
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetOKResponseModelModelModelModelModelModelModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetOKResponseModelModelModelModelModelModelModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      GetOKResponseModelModelModelModelModelModelModelModelModelModelModel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(buildId: number, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModel>;
    get(buildId: number, ownerName: string, appName: string, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModel>): void;
    get(buildId: number, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModel>): void;


    /**
     * Cancels a build
     *
     * @param {number} buildId The build ID
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.status] The build status; used to cancel builds.
     * Possible values include: 'cancelling'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdateOKResponseModelModelModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(buildId: number, ownerName: string, appName: string, options?: { status? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdateOKResponseModelModelModelModelModelModelModel>>;

    /**
     * Cancels a build
     *
     * @param {number} buildId The build ID
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.status] The build status; used to cancel builds.
     * Possible values include: 'cancelling'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdateOKResponseModelModelModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdateOKResponseModelModelModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      UpdateOKResponseModelModelModelModelModelModelModel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(buildId: number, ownerName: string, appName: string, options?: { status? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdateOKResponseModelModelModelModelModelModelModel>;
    update(buildId: number, ownerName: string, appName: string, callback: ServiceCallback<models.UpdateOKResponseModelModelModelModelModelModelModel>): void;
    update(buildId: number, ownerName: string, appName: string, options: { status? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdateOKResponseModelModelModelModelModelModelModel>): void;


    /**
     * Application specific build service status
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetStatusByAppIdOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getStatusByAppIdWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetStatusByAppIdOKResponse>>;

    /**
     * Application specific build service status
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetStatusByAppIdOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetStatusByAppIdOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetStatusByAppIdOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getStatusByAppId(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetStatusByAppIdOKResponse>;
    getStatusByAppId(ownerName: string, appName: string, callback: ServiceCallback<models.GetStatusByAppIdOKResponse>): void;
    getStatusByAppId(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetStatusByAppIdOKResponse>): void;


    /**
     * Returns the projects in the repository for the branch, for all toolsets
     *
     * @param {string} branch The branch name
     *
     * @param {string} os The desired OS for the project scan; normally the same as
     * the app OS. Possible values include: 'iOS', 'Android', 'Windows', 'macOS'
     *
     * @param {string} platform The desired platform for the project scan. Possible
     * values include: 'Objective-C-Swift', 'React-Native', 'Xamarin', 'Java',
     * 'UWP'
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.maxSearchDepth] The depth of the repository to
     * search for project files
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListToolsetProjectsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listToolsetProjectsWithHttpOperationResponse(branch: string, os: string, platform: string, ownerName: string, appName: string, options?: { maxSearchDepth? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListToolsetProjectsOKResponse>>;

    /**
     * Returns the projects in the repository for the branch, for all toolsets
     *
     * @param {string} branch The branch name
     *
     * @param {string} os The desired OS for the project scan; normally the same as
     * the app OS. Possible values include: 'iOS', 'Android', 'Windows', 'macOS'
     *
     * @param {string} platform The desired platform for the project scan. Possible
     * values include: 'Objective-C-Swift', 'React-Native', 'Xamarin', 'Java',
     * 'UWP'
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.maxSearchDepth] The depth of the repository to
     * search for project files
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListToolsetProjectsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListToolsetProjectsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListToolsetProjectsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listToolsetProjects(branch: string, os: string, platform: string, ownerName: string, appName: string, options?: { maxSearchDepth? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListToolsetProjectsOKResponse>;
    listToolsetProjects(branch: string, os: string, platform: string, ownerName: string, appName: string, callback: ServiceCallback<models.ListToolsetProjectsOKResponse>): void;
    listToolsetProjects(branch: string, os: string, platform: string, ownerName: string, appName: string, options: { maxSearchDepth? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListToolsetProjectsOKResponse>): void;


    /**
     * Returns the list of builds for the branch
     *
     * @param {string} branch The branch name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByBranchWithHttpOperationResponse(branch: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListByBranchOKResponseItem[]>>;

    /**
     * Returns the list of builds for the branch
     *
     * @param {string} branch The branch name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByBranch(branch: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListByBranchOKResponseItem[]>;
    listByBranch(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.ListByBranchOKResponseItem[]>): void;
    listByBranch(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListByBranchOKResponseItem[]>): void;


    /**
     * Create a build
     *
     * @param {string} branch The branch name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.sourceVersion] Version to build which represents
     * the full Git commit reference
     *
     * @param {boolean} [options.debug] Run build in debug mode
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateOKResponseModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(branch: string, ownerName: string, appName: string, options?: { sourceVersion? : string, debug? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateOKResponseModelModelModelModel>>;

    /**
     * Create a build
     *
     * @param {string} branch The branch name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.sourceVersion] Version to build which represents
     * the full Git commit reference
     *
     * @param {boolean} [options.debug] Run build in debug mode
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateOKResponseModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateOKResponseModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreateOKResponseModelModelModelModel} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(branch: string, ownerName: string, appName: string, options?: { sourceVersion? : string, debug? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateOKResponseModelModelModelModel>;
    create(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.CreateOKResponseModelModelModelModel>): void;
    create(branch: string, ownerName: string, appName: string, options: { sourceVersion? : string, debug? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateOKResponseModelModelModelModel>): void;


    /**
     * Returns the list of Git branches for this application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBranchesWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListBranchesOKResponseItem[]>>;

    /**
     * Returns the list of Git branches for this application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBranches(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListBranchesOKResponseItem[]>;
    listBranches(ownerName: string, appName: string, callback: ServiceCallback<models.ListBranchesOKResponseItem[]>): void;
    listBranches(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListBranchesOKResponseItem[]>): void;
}

/**
 * @class
 * Webhooks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Webhooks {


    /**
     * Get web hooks configured for a particular app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponse>>;

    /**
     * Get web hooks configured for a particular app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponse>;
    list(ownerName: string, appName: string, callback: ServiceCallback<models.ListOKResponse>): void;
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponse>): void;
}

/**
 * @class
 * Crashes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Crashes {


    /**
     * Gets a list of application versions.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAppVersionsWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetAppVersionsOKResponseItem[]>>;

    /**
     * Gets a list of application versions.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAppVersions(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetAppVersionsOKResponseItem[]>;
    getAppVersions(ownerName: string, appName: string, callback: ServiceCallback<models.GetAppVersionsOKResponseItem[]>): void;
    getAppVersions(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetAppVersionsOKResponseItem[]>): void;


    /**
     * Gets whether the application has any crashes.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetAppCrashesInfoOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAppCrashesInfoWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetAppCrashesInfoOKResponse>>;

    /**
     * Gets whether the application has any crashes.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetAppCrashesInfoOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetAppCrashesInfoOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetAppCrashesInfoOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAppCrashesInfo(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetAppCrashesInfoOKResponse>;
    getAppCrashesInfo(ownerName: string, appName: string, callback: ServiceCallback<models.GetAppCrashesInfoOKResponse>): void;
    getAppCrashesInfo(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetAppCrashesInfoOKResponse>): void;


    /**
     * Get session logs by crash ID
     *
     * @param {string} crashId The id of the a crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.date] Date of data requested
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListSessionLogsOKResponseModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSessionLogsWithHttpOperationResponse(crashId: string, ownerName: string, appName: string, options?: { date? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListSessionLogsOKResponseModel>>;

    /**
     * Get session logs by crash ID
     *
     * @param {string} crashId The id of the a crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.date] Date of data requested
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListSessionLogsOKResponseModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListSessionLogsOKResponseModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListSessionLogsOKResponseModel} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSessionLogs(crashId: string, ownerName: string, appName: string, options?: { date? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListSessionLogsOKResponseModel>;
    listSessionLogs(crashId: string, ownerName: string, appName: string, callback: ServiceCallback<models.ListSessionLogsOKResponseModel>): void;
    listSessionLogs(crashId: string, ownerName: string, appName: string, options: { date? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListSessionLogsOKResponseModel>): void;


    /**
     * Gets content of the text attachment.
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} attachmentId attachment id
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getCrashTextAttachmentContentWithHttpOperationResponse(crashId: string, attachmentId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Gets content of the text attachment.
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} attachmentId attachment id
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getCrashTextAttachmentContent(crashId: string, attachmentId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    getCrashTextAttachmentContent(crashId: string, attachmentId: string, ownerName: string, appName: string, callback: ServiceCallback<string>): void;
    getCrashTextAttachmentContent(crashId: string, attachmentId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Gets the URI location to download crash attachment.
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} attachmentId attachment id
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetCrashAttachmentLocationOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getCrashAttachmentLocationWithHttpOperationResponse(crashId: string, attachmentId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetCrashAttachmentLocationOKResponse>>;

    /**
     * Gets the URI location to download crash attachment.
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} attachmentId attachment id
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetCrashAttachmentLocationOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetCrashAttachmentLocationOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetCrashAttachmentLocationOKResponse} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getCrashAttachmentLocation(crashId: string, attachmentId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetCrashAttachmentLocationOKResponse>;
    getCrashAttachmentLocation(crashId: string, attachmentId: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetCrashAttachmentLocationOKResponse>): void;
    getCrashAttachmentLocation(crashId: string, attachmentId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetCrashAttachmentLocationOKResponse>): void;


    /**
     * Gets all attachments for a specific crash.
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAttachmentsWithHttpOperationResponse(crashId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListAttachmentsOKResponseItem[]>>;

    /**
     * Gets all attachments for a specific crash.
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAttachments(crashId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListAttachmentsOKResponseItem[]>;
    listAttachments(crashId: string, ownerName: string, appName: string, callback: ServiceCallback<models.ListAttachmentsOKResponseItem[]>): void;
    listAttachments(crashId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListAttachmentsOKResponseItem[]>): void;


    /**
     * Gets a stacktrace for a specific crash.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.groupingOnly] true if the stacktrace should be
     * only the relevant thread / exception. Default is false
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Stacktrace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getStacktraceWithHttpOperationResponse(crashGroupId: string, crashId: string, ownerName: string, appName: string, options?: { groupingOnly? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Stacktrace>>;

    /**
     * Gets a stacktrace for a specific crash.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.groupingOnly] true if the stacktrace should be
     * only the relevant thread / exception. Default is false
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Stacktrace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Stacktrace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Stacktrace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getStacktrace(crashGroupId: string, crashId: string, ownerName: string, appName: string, options?: { groupingOnly? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.Stacktrace>;
    getStacktrace(crashGroupId: string, crashId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Stacktrace>): void;
    getStacktrace(crashGroupId: string, crashId: string, ownerName: string, appName: string, options: { groupingOnly? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Stacktrace>): void;


    /**
     * Gets the URI location to download json of a specific crash.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetRawCrashLocationOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRawCrashLocationWithHttpOperationResponse(crashGroupId: string, crashId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetRawCrashLocationOKResponse>>;

    /**
     * Gets the URI location to download json of a specific crash.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetRawCrashLocationOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetRawCrashLocationOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetRawCrashLocationOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRawCrashLocation(crashGroupId: string, crashId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetRawCrashLocationOKResponse>;
    getRawCrashLocation(crashGroupId: string, crashId: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetRawCrashLocationOKResponse>): void;
    getRawCrashLocation(crashGroupId: string, crashId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetRawCrashLocationOKResponse>): void;


    /**
     * Gets the native log of a specific crash as a text attachment.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNativeCrashDownloadWithHttpOperationResponse(crashGroupId: string, crashId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Gets the native log of a specific crash as a text attachment.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNativeCrashDownload(crashGroupId: string, crashId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    getNativeCrashDownload(crashGroupId: string, crashId: string, ownerName: string, appName: string, callback: ServiceCallback<string>): void;
    getNativeCrashDownload(crashGroupId: string, crashId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Gets the native log of a specific crash.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNativeCrashWithHttpOperationResponse(crashGroupId: string, crashId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Gets the native log of a specific crash.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNativeCrash(crashGroupId: string, crashId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    getNativeCrash(crashGroupId: string, crashId: string, ownerName: string, appName: string, callback: ServiceCallback<string>): void;
    getNativeCrash(crashGroupId: string, crashId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Gets a specific crash for an app.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.includeReport] true if the crash should include
     * the raw crash report. Default is false
     *
     * @param {boolean} [options.includeLog] true if the crash should include the
     * custom log report. Default is false
     *
     * @param {boolean} [options.includeDetails] true if the crash should include
     * in depth crash details
     *
     * @param {boolean} [options.includeStacktrace] true if the crash should
     * include the stacktrace information
     *
     * @param {boolean} [options.groupingOnly] true if the stacktrace should be
     * only the relevant thread / exception. Default is false
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Crash>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(crashGroupId: string, crashId: string, ownerName: string, appName: string, options?: { includeReport? : boolean, includeLog? : boolean, includeDetails? : boolean, includeStacktrace? : boolean, groupingOnly? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Crash>>;

    /**
     * Gets a specific crash for an app.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.includeReport] true if the crash should include
     * the raw crash report. Default is false
     *
     * @param {boolean} [options.includeLog] true if the crash should include the
     * custom log report. Default is false
     *
     * @param {boolean} [options.includeDetails] true if the crash should include
     * in depth crash details
     *
     * @param {boolean} [options.includeStacktrace] true if the crash should
     * include the stacktrace information
     *
     * @param {boolean} [options.groupingOnly] true if the stacktrace should be
     * only the relevant thread / exception. Default is false
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Crash} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Crash} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Crash} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(crashGroupId: string, crashId: string, ownerName: string, appName: string, options?: { includeReport? : boolean, includeLog? : boolean, includeDetails? : boolean, includeStacktrace? : boolean, groupingOnly? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.Crash>;
    get(crashGroupId: string, crashId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Crash>): void;
    get(crashGroupId: string, crashId: string, ownerName: string, appName: string, options: { includeReport? : boolean, includeLog? : boolean, includeDetails? : boolean, includeStacktrace? : boolean, groupingOnly? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Crash>): void;


    /**
     * Delete a specific crash and related attachments and blobs for an app.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.retentionDelete] true in that case if the method
     * should skip update counts
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeleteOKResponseModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(crashGroupId: string, crashId: string, ownerName: string, appName: string, options?: { retentionDelete? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeleteOKResponseModelModel>>;

    /**
     * Delete a specific crash and related attachments and blobs for an app.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} crashId id of a specific crash
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.retentionDelete] true in that case if the method
     * should skip update counts
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeleteOKResponseModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeleteOKResponseModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeleteOKResponseModelModel} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(crashGroupId: string, crashId: string, ownerName: string, appName: string, options?: { retentionDelete? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeleteOKResponseModelModel>;
    deleteMethod(crashGroupId: string, crashId: string, ownerName: string, appName: string, callback: ServiceCallback<models.DeleteOKResponseModelModel>): void;
    deleteMethod(crashGroupId: string, crashId: string, ownerName: string, appName: string, options: { retentionDelete? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeleteOKResponseModelModel>): void;


    /**
     * Gets all crashes of a group.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.includeReport] true if the crash should include
     * the raw crash report. Default is false
     *
     * @param {boolean} [options.includeLog] true if the crash should include the
     * custom log report. Default is false
     *
     * @param {date} [options.dateFrom]
     *
     * @param {date} [options.dateTo]
     *
     * @param {string} [options.appVersion] version
     *
     * @param {string} [options.errorType] Possible values include:
     * 'CrashingErrors', 'HandledErrors'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(crashGroupId: string, ownerName: string, appName: string, options?: { includeReport? : boolean, includeLog? : boolean, dateFrom? : Date, dateTo? : Date, appVersion? : string, errorType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Crash[]>>;

    /**
     * Gets all crashes of a group.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.includeReport] true if the crash should include
     * the raw crash report. Default is false
     *
     * @param {boolean} [options.includeLog] true if the crash should include the
     * custom log report. Default is false
     *
     * @param {date} [options.dateFrom]
     *
     * @param {date} [options.dateTo]
     *
     * @param {string} [options.appVersion] version
     *
     * @param {string} [options.errorType] Possible values include:
     * 'CrashingErrors', 'HandledErrors'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(crashGroupId: string, ownerName: string, appName: string, options?: { includeReport? : boolean, includeLog? : boolean, dateFrom? : Date, dateTo? : Date, appVersion? : string, errorType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Crash[]>;
    list(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Crash[]>): void;
    list(crashGroupId: string, ownerName: string, appName: string, options: { includeReport? : boolean, includeLog? : boolean, dateFrom? : Date, dateTo? : Date, appVersion? : string, errorType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Crash[]>): void;
}

/**
 * @class
 * Test
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Test {


    /**
     * Gets a device set belonging to the user
     *
     * @param {uuid} id The UUID of the device set
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetDeviceSetOfUserOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDeviceSetOfUserWithHttpOperationResponse(id: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetDeviceSetOfUserOKResponse>>;

    /**
     * Gets a device set belonging to the user
     *
     * @param {uuid} id The UUID of the device set
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetDeviceSetOfUserOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetDeviceSetOfUserOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetDeviceSetOfUserOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDeviceSetOfUser(id: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetDeviceSetOfUserOKResponse>;
    getDeviceSetOfUser(id: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetDeviceSetOfUserOKResponse>): void;
    getDeviceSetOfUser(id: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetDeviceSetOfUserOKResponse>): void;


    /**
     * Updates a device set belonging to the user
     *
     * @param {uuid} id The UUID of the device set
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} devices List of device IDs
     *
     * @param {string} name The name of the device set
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateDeviceSetOfUserWithHttpOperationResponse(id: string, ownerName: string, appName: string, devices: string[], name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Updates a device set belonging to the user
     *
     * @param {uuid} id The UUID of the device set
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} devices List of device IDs
     *
     * @param {string} name The name of the device set
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateDeviceSetOfUser(id: string, ownerName: string, appName: string, devices: string[], name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateDeviceSetOfUser(id: string, ownerName: string, appName: string, devices: string[], name: string, callback: ServiceCallback<any>): void;
    updateDeviceSetOfUser(id: string, ownerName: string, appName: string, devices: string[], name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes a device set belonging to the user
     *
     * @param {uuid} id The UUID of the device set
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteDeviceSetOfUserWithHttpOperationResponse(id: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a device set belonging to the user
     *
     * @param {uuid} id The UUID of the device set
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteDeviceSetOfUser(id: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteDeviceSetOfUser(id: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    deleteDeviceSetOfUser(id: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists device sets belonging to the user
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeviceSetsOfUserWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListDeviceSetsOfUserOKResponseItem[]>>;

    /**
     * Lists device sets belonging to the user
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeviceSetsOfUser(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListDeviceSetsOfUserOKResponseItem[]>;
    listDeviceSetsOfUser(ownerName: string, appName: string, callback: ServiceCallback<models.ListDeviceSetsOfUserOKResponseItem[]>): void;
    listDeviceSetsOfUser(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListDeviceSetsOfUserOKResponseItem[]>): void;


    /**
     * Creates a device set belonging to the user
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} devices List of device IDs
     *
     * @param {string} name The name of the device set
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createDeviceSetOfUserWithHttpOperationResponse(ownerName: string, appName: string, devices: string[], name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Creates a device set belonging to the user
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} devices List of device IDs
     *
     * @param {string} name The name of the device set
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createDeviceSetOfUser(ownerName: string, appName: string, devices: string[], name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createDeviceSetOfUser(ownerName: string, appName: string, devices: string[], name: string, callback: ServiceCallback<any>): void;
    createDeviceSetOfUser(ownerName: string, appName: string, devices: string[], name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Returns list of all test runs for a given test series
     *
     * @param {string} testSeriesSlug The slug of the test series
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAllTestRunsForSeriesWithHttpOperationResponse(testSeriesSlug: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetAllTestRunsForSeriesOKResponseItem[]>>;

    /**
     * Returns list of all test runs for a given test series
     *
     * @param {string} testSeriesSlug The slug of the test series
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAllTestRunsForSeries(testSeriesSlug: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetAllTestRunsForSeriesOKResponseItem[]>;
    getAllTestRunsForSeries(testSeriesSlug: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetAllTestRunsForSeriesOKResponseItem[]>): void;
    getAllTestRunsForSeries(testSeriesSlug: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetAllTestRunsForSeriesOKResponseItem[]>): void;


    /**
     * Deletes a single test series
     *
     * @param {string} testSeriesSlug The slug of the test series
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteTestSeriesWithHttpOperationResponse(testSeriesSlug: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a single test series
     *
     * @param {string} testSeriesSlug The slug of the test series
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteTestSeries(testSeriesSlug: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteTestSeries(testSeriesSlug: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    deleteTestSeries(testSeriesSlug: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates name and slug of a test series
     *
     * @param {string} testSeriesSlug The slug of the test series
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} name Name of the new test series
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PatchTestSeriesOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    patchTestSeriesWithHttpOperationResponse(testSeriesSlug: string, ownerName: string, appName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PatchTestSeriesOKResponse>>;

    /**
     * Updates name and slug of a test series
     *
     * @param {string} testSeriesSlug The slug of the test series
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} name Name of the new test series
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PatchTestSeriesOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PatchTestSeriesOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PatchTestSeriesOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    patchTestSeries(testSeriesSlug: string, ownerName: string, appName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PatchTestSeriesOKResponse>;
    patchTestSeries(testSeriesSlug: string, ownerName: string, appName: string, name: string, callback: ServiceCallback<models.PatchTestSeriesOKResponse>): void;
    patchTestSeries(testSeriesSlug: string, ownerName: string, appName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PatchTestSeriesOKResponse>): void;


    /**
     * Returns list of all test series for an application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.query] A query string to filter test series
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAllTestSeriesWithHttpOperationResponse(ownerName: string, appName: string, options?: { query? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetAllTestSeriesOKResponseItem[]>>;

    /**
     * Returns list of all test series for an application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.query] A query string to filter test series
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAllTestSeries(ownerName: string, appName: string, options?: { query? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GetAllTestSeriesOKResponseItem[]>;
    getAllTestSeries(ownerName: string, appName: string, callback: ServiceCallback<models.GetAllTestSeriesOKResponseItem[]>): void;
    getAllTestSeries(ownerName: string, appName: string, options: { query? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetAllTestSeriesOKResponseItem[]>): void;


    /**
     * Creates new test series for an application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} name Name of the new test series
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createTestSeriesWithHttpOperationResponse(ownerName: string, appName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Creates new test series for an application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} name Name of the new test series
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createTestSeries(ownerName: string, appName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createTestSeries(ownerName: string, appName: string, name: string, callback: ServiceCallback<any>): void;
    createTestSeries(ownerName: string, appName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Stop a test run execution
     *
     * @param {string} testRunId The ID of the test run to be stopped
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StopTestRunOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopTestRunWithHttpOperationResponse(testRunId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StopTestRunOKResponse>>;

    /**
     * Stop a test run execution
     *
     * @param {string} testRunId The ID of the test run to be stopped
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StopTestRunOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StopTestRunOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StopTestRunOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stopTestRun(testRunId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StopTestRunOKResponse>;
    stopTestRun(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<models.StopTestRunOKResponse>): void;
    stopTestRun(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StopTestRunOKResponse>): void;


    /**
     * Gets state of the test run
     *
     * @param {string} testRunId The ID of the test run
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetTestRunStateOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTestRunStateWithHttpOperationResponse(testRunId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetTestRunStateOKResponse>>;

    /**
     * Gets state of the test run
     *
     * @param {string} testRunId The ID of the test run
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetTestRunStateOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetTestRunStateOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetTestRunStateOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTestRunState(testRunId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetTestRunStateOKResponse>;
    getTestRunState(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetTestRunStateOKResponse>): void;
    getTestRunState(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetTestRunStateOKResponse>): void;


    /**
     * Starts test run
     *
     * @param {string} testRunId The ID of the test run
     *
     * @param {object} startOptions Option required to start the test run
     *
     * @param {string} startOptions.testFramework Test framework used by tests.
     *
     * @param {string} startOptions.deviceSelection Device selection string.
     *
     * @param {string} [startOptions.language] Language that should be used to run
     * tests.
     *
     * @param {string} [startOptions.locale] Locale that should be used to run
     * tests.
     *
     * @param {string} [startOptions.testSeries] Name of the test series.
     *
     * @param {object} [startOptions.testParameters] A JSON dictionary with
     * additional test parameters
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StartTestRunOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startTestRunWithHttpOperationResponse(testRunId: string, startOptions: models.StartOptions, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StartTestRunOKResponse>>;

    /**
     * Starts test run
     *
     * @param {string} testRunId The ID of the test run
     *
     * @param {object} startOptions Option required to start the test run
     *
     * @param {string} startOptions.testFramework Test framework used by tests.
     *
     * @param {string} startOptions.deviceSelection Device selection string.
     *
     * @param {string} [startOptions.language] Language that should be used to run
     * tests.
     *
     * @param {string} [startOptions.locale] Locale that should be used to run
     * tests.
     *
     * @param {string} [startOptions.testSeries] Name of the test series.
     *
     * @param {object} [startOptions.testParameters] A JSON dictionary with
     * additional test parameters
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StartTestRunOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StartTestRunOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StartTestRunOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    startTestRun(testRunId: string, startOptions: models.StartOptions, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StartTestRunOKResponse>;
    startTestRun(testRunId: string, startOptions: models.StartOptions, ownerName: string, appName: string, callback: ServiceCallback<models.StartTestRunOKResponse>): void;
    startTestRun(testRunId: string, startOptions: models.StartOptions, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StartTestRunOKResponse>): void;


    /**
     * Returns a single test report
     *
     * @param {uuid} testRunId The ID of the test run
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetTestReportOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTestReportWithHttpOperationResponse(testRunId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetTestReportOKResponse>>;

    /**
     * Returns a single test report
     *
     * @param {uuid} testRunId The ID of the test run
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetTestReportOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetTestReportOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetTestReportOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTestReport(testRunId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetTestReportOKResponse>;
    getTestReport(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetTestReportOKResponse>): void;
    getTestReport(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetTestReportOKResponse>): void;


    /**
     * Adds file with the given hash to a test run
     *
     * @param {string} testRunId The ID of the test run
     *
     * @param {array} fileInfo File hash information
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    uploadHashesBatchWithHttpOperationResponse(testRunId: string, fileInfo: models.FileInfoItem[], ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UploadHashesBatchOKResponseItem[]>>;

    /**
     * Adds file with the given hash to a test run
     *
     * @param {string} testRunId The ID of the test run
     *
     * @param {array} fileInfo File hash information
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    uploadHashesBatch(testRunId: string, fileInfo: models.FileInfoItem[], ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UploadHashesBatchOKResponseItem[]>;
    uploadHashesBatch(testRunId: string, fileInfo: models.FileInfoItem[], ownerName: string, appName: string, callback: ServiceCallback<models.UploadHashesBatchOKResponseItem[]>): void;
    uploadHashesBatch(testRunId: string, fileInfo: models.FileInfoItem[], ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UploadHashesBatchOKResponseItem[]>): void;


    /**
     * Adds file with the given hash to a test run
     *
     * @param {string} testRunId The ID of the test run
     *
     * @param {object} fileInfo File hash information
     *
     * @param {string} fileInfo.fileType Type of the file. Possible values include:
     * 'dsym-file', 'app-file', 'test-file'
     *
     * @param {string} fileInfo.checksum SHA256 hash of the file
     *
     * @param {string} fileInfo.relativePath Relative path of the file
     *
     * @param {string} [fileInfo.byteRange] Range of bytes required to verify
     * ownership of the file
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    uploadHashWithHttpOperationResponse(testRunId: string, fileInfo: models.FileInfo, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Adds file with the given hash to a test run
     *
     * @param {string} testRunId The ID of the test run
     *
     * @param {object} fileInfo File hash information
     *
     * @param {string} fileInfo.fileType Type of the file. Possible values include:
     * 'dsym-file', 'app-file', 'test-file'
     *
     * @param {string} fileInfo.checksum SHA256 hash of the file
     *
     * @param {string} fileInfo.relativePath Relative path of the file
     *
     * @param {string} [fileInfo.byteRange] Range of bytes required to verify
     * ownership of the file
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    uploadHash(testRunId: string, fileInfo: models.FileInfo, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    uploadHash(testRunId: string, fileInfo: models.FileInfo, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    uploadHash(testRunId: string, fileInfo: models.FileInfo, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Uploads file for a test run
     *
     * @param {string} testRunId The ID of the test run
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startUploadingFileWithHttpOperationResponse(testRunId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Uploads file for a test run
     *
     * @param {string} testRunId The ID of the test run
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    startUploadingFile(testRunId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    startUploadingFile(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    startUploadingFile(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns a single test runs
     *
     * @param {uuid} testRunId The ID of the test run
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetTestRunOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTestRunWithHttpOperationResponse(testRunId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetTestRunOKResponse>>;

    /**
     * Returns a single test runs
     *
     * @param {uuid} testRunId The ID of the test run
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetTestRunOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetTestRunOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetTestRunOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTestRun(testRunId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetTestRunOKResponse>;
    getTestRun(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetTestRunOKResponse>): void;
    getTestRun(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetTestRunOKResponse>): void;


    /**
     * Logically deletes a test run
     *
     * @param {uuid} testRunId The ID of the test run
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ArchiveTestRunOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    archiveTestRunWithHttpOperationResponse(testRunId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ArchiveTestRunOKResponse>>;

    /**
     * Logically deletes a test run
     *
     * @param {uuid} testRunId The ID of the test run
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ArchiveTestRunOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ArchiveTestRunOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ArchiveTestRunOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    archiveTestRun(testRunId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ArchiveTestRunOKResponse>;
    archiveTestRun(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<models.ArchiveTestRunOKResponse>): void;
    archiveTestRun(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ArchiveTestRunOKResponse>): void;


    /**
     * Returns a list of test runs
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTestRunsWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetTestRunsOKResponseItem[]>>;

    /**
     * Returns a list of test runs
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTestRuns(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetTestRunsOKResponseItem[]>;
    getTestRuns(ownerName: string, appName: string, callback: ServiceCallback<models.GetTestRunsOKResponseItem[]>): void;
    getTestRuns(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetTestRunsOKResponseItem[]>): void;


    /**
     * Creates a new test run
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createTestRunWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Creates a new test run
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createTestRun(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    createTestRun(ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    createTestRun(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists test run data
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GdprExportTestRunOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    gdprExportTestRunWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GdprExportTestRunOKResponse>>;

    /**
     * Lists test run data
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GdprExportTestRunOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GdprExportTestRunOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GdprExportTestRunOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    gdprExportTestRun(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GdprExportTestRunOKResponse>;
    gdprExportTestRun(ownerName: string, appName: string, callback: ServiceCallback<models.GdprExportTestRunOKResponse>): void;
    gdprExportTestRun(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GdprExportTestRunOKResponse>): void;


    /**
     * Lists pipeline test data
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GdprExportPipelineTestOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    gdprExportPipelineTestWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GdprExportPipelineTestOKResponse>>;

    /**
     * Lists pipeline test data
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GdprExportPipelineTestOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GdprExportPipelineTestOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GdprExportPipelineTestOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    gdprExportPipelineTest(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GdprExportPipelineTestOKResponse>;
    gdprExportPipelineTest(ownerName: string, appName: string, callback: ServiceCallback<models.GdprExportPipelineTestOKResponse>): void;
    gdprExportPipelineTest(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GdprExportPipelineTestOKResponse>): void;


    /**
     * Lists hash file data
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GdprExportHashFileOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    gdprExportHashFileWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GdprExportHashFileOKResponse>>;

    /**
     * Lists hash file data
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GdprExportHashFileOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GdprExportHashFileOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GdprExportHashFileOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    gdprExportHashFile(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GdprExportHashFileOKResponse>;
    gdprExportHashFile(ownerName: string, appName: string, callback: ServiceCallback<models.GdprExportHashFileOKResponse>): void;
    gdprExportHashFile(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GdprExportHashFileOKResponse>): void;


    /**
     * Lists file set file data
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GdprExportFileSetFileOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    gdprExportFileSetFileWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GdprExportFileSetFileOKResponse>>;

    /**
     * Lists file set file data
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GdprExportFileSetFileOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GdprExportFileSetFileOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GdprExportFileSetFileOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    gdprExportFileSetFile(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GdprExportFileSetFileOKResponse>;
    gdprExportFileSetFile(ownerName: string, appName: string, callback: ServiceCallback<models.GdprExportFileSetFileOKResponse>): void;
    gdprExportFileSetFile(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GdprExportFileSetFileOKResponse>): void;


    /**
     * Lists app data
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GdprExportAppOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    gdprExportAppWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GdprExportAppOKResponse>>;

    /**
     * Lists app data
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GdprExportAppOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GdprExportAppOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GdprExportAppOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    gdprExportApp(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GdprExportAppOKResponse>;
    gdprExportApp(ownerName: string, appName: string, callback: ServiceCallback<models.GdprExportAppOKResponse>): void;
    gdprExportApp(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GdprExportAppOKResponse>): void;


    /**
     * Lists all the endpoints available for Test apps data
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GdprExportAppsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    gdprExportAppsWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GdprExportAppsOKResponse>>;

    /**
     * Lists all the endpoints available for Test apps data
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GdprExportAppsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GdprExportAppsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GdprExportAppsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    gdprExportApps(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GdprExportAppsOKResponse>;
    gdprExportApps(ownerName: string, appName: string, callback: ServiceCallback<models.GdprExportAppsOKResponse>): void;
    gdprExportApps(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GdprExportAppsOKResponse>): void;


    /**
     * Get information about the currently active subscriptions, if any
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetSubscriptionsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSubscriptionsWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetSubscriptionsOKResponse>>;

    /**
     * Get information about the currently active subscriptions, if any
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetSubscriptionsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetSubscriptionsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetSubscriptionsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSubscriptions(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetSubscriptionsOKResponse>;
    getSubscriptions(ownerName: string, appName: string, callback: ServiceCallback<models.GetSubscriptionsOKResponse>): void;
    getSubscriptions(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetSubscriptionsOKResponse>): void;


    /**
     * Accept a free trial subscription
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateSubscriptionCreatedResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createSubscriptionWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateSubscriptionCreatedResponse>>;

    /**
     * Accept a free trial subscription
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateSubscriptionCreatedResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateSubscriptionCreatedResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreateSubscriptionCreatedResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createSubscription(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateSubscriptionCreatedResponse>;
    createSubscription(ownerName: string, appName: string, callback: ServiceCallback<models.CreateSubscriptionCreatedResponse>): void;
    createSubscription(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateSubscriptionCreatedResponse>): void;


    /**
     * Gets a device set belonging to the owner
     *
     * @param {uuid} id The UUID of the device set
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetDeviceSetOfOwnerOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDeviceSetOfOwnerWithHttpOperationResponse(id: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetDeviceSetOfOwnerOKResponse>>;

    /**
     * Gets a device set belonging to the owner
     *
     * @param {uuid} id The UUID of the device set
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetDeviceSetOfOwnerOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetDeviceSetOfOwnerOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetDeviceSetOfOwnerOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDeviceSetOfOwner(id: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetDeviceSetOfOwnerOKResponse>;
    getDeviceSetOfOwner(id: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetDeviceSetOfOwnerOKResponse>): void;
    getDeviceSetOfOwner(id: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetDeviceSetOfOwnerOKResponse>): void;


    /**
     * Updates a device set belonging to the owner
     *
     * @param {uuid} id The UUID of the device set
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} devices List of device IDs
     *
     * @param {string} name The name of the device set
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateDeviceSetOfOwnerWithHttpOperationResponse(id: string, ownerName: string, appName: string, devices: string[], name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Updates a device set belonging to the owner
     *
     * @param {uuid} id The UUID of the device set
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} devices List of device IDs
     *
     * @param {string} name The name of the device set
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateDeviceSetOfOwner(id: string, ownerName: string, appName: string, devices: string[], name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateDeviceSetOfOwner(id: string, ownerName: string, appName: string, devices: string[], name: string, callback: ServiceCallback<any>): void;
    updateDeviceSetOfOwner(id: string, ownerName: string, appName: string, devices: string[], name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes a device set belonging to the owner
     *
     * @param {uuid} id The UUID of the device set
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteDeviceSetOfOwnerWithHttpOperationResponse(id: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a device set belonging to the owner
     *
     * @param {uuid} id The UUID of the device set
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteDeviceSetOfOwner(id: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteDeviceSetOfOwner(id: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    deleteDeviceSetOfOwner(id: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists device sets belonging to the owner
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeviceSetsOfOwnerWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListDeviceSetsOfOwnerOKResponseItem[]>>;

    /**
     * Lists device sets belonging to the owner
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeviceSetsOfOwner(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListDeviceSetsOfOwnerOKResponseItem[]>;
    listDeviceSetsOfOwner(ownerName: string, appName: string, callback: ServiceCallback<models.ListDeviceSetsOfOwnerOKResponseItem[]>): void;
    listDeviceSetsOfOwner(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListDeviceSetsOfOwnerOKResponseItem[]>): void;


    /**
     * Creates a device set belonging to the owner
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} devices List of device IDs
     *
     * @param {string} name The name of the device set
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createDeviceSetOfOwnerWithHttpOperationResponse(ownerName: string, appName: string, devices: string[], name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Creates a device set belonging to the owner
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} devices List of device IDs
     *
     * @param {string} name The name of the device set
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createDeviceSetOfOwner(ownerName: string, appName: string, devices: string[], name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createDeviceSetOfOwner(ownerName: string, appName: string, devices: string[], name: string, callback: ServiceCallback<any>): void;
    createDeviceSetOfOwner(ownerName: string, appName: string, devices: string[], name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Creates a short ID for a list of devices
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} devices
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createDeviceSelectionWithHttpOperationResponse(ownerName: string, appName: string, devices: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Creates a short ID for a list of devices
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} devices
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createDeviceSelection(ownerName: string, appName: string, devices: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createDeviceSelection(ownerName: string, appName: string, devices: string[], callback: ServiceCallback<any>): void;
    createDeviceSelection(ownerName: string, appName: string, devices: string[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Returns a list of available devices
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {uuid} [options.appUploadId] The ID of the test run
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDeviceConfigurationsWithHttpOperationResponse(ownerName: string, appName: string, options?: { appUploadId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetDeviceConfigurationsOKResponseItem[]>>;

    /**
     * Returns a list of available devices
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {uuid} [options.appUploadId] The ID of the test run
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDeviceConfigurations(ownerName: string, appName: string, options?: { appUploadId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GetDeviceConfigurationsOKResponseItem[]>;
    getDeviceConfigurations(ownerName: string, appName: string, callback: ServiceCallback<models.GetDeviceConfigurationsOKResponseItem[]>): void;
    getDeviceConfigurations(ownerName: string, appName: string, options: { appUploadId? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetDeviceConfigurationsOKResponseItem[]>): void;


    /**
     * Lists feature flag data
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GdprExportFeatureFlagOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    gdprExportFeatureFlagWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GdprExportFeatureFlagOKResponse>>;

    /**
     * Lists feature flag data
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GdprExportFeatureFlagOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GdprExportFeatureFlagOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GdprExportFeatureFlagOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    gdprExportFeatureFlag(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GdprExportFeatureFlagOKResponse>;
    gdprExportFeatureFlag(callback: ServiceCallback<models.GdprExportFeatureFlagOKResponse>): void;
    gdprExportFeatureFlag(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GdprExportFeatureFlagOKResponse>): void;


    /**
     * Lists account data
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GdprExportAccountOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    gdprExportAccountWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GdprExportAccountOKResponse>>;

    /**
     * Lists account data
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GdprExportAccountOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GdprExportAccountOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GdprExportAccountOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    gdprExportAccount(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GdprExportAccountOKResponse>;
    gdprExportAccount(callback: ServiceCallback<models.GdprExportAccountOKResponse>): void;
    gdprExportAccount(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GdprExportAccountOKResponse>): void;


    /**
     * Lists all the endpoints available for Test accounts data
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GdprExportAccountsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    gdprExportAccountsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GdprExportAccountsOKResponse>>;

    /**
     * Lists all the endpoints available for Test accounts data
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GdprExportAccountsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GdprExportAccountsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GdprExportAccountsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    gdprExportAccounts(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GdprExportAccountsOKResponse>;
    gdprExportAccounts(callback: ServiceCallback<models.GdprExportAccountsOKResponse>): void;
    gdprExportAccounts(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GdprExportAccountsOKResponse>): void;
}

/**
 * @class
 * Symbols
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Symbols {


    /**
     * Returns a particular symbol by id (uuid) for the provided application
     *
     * @param {string} symbolId The ID of the symbol (uuid of the symbol)
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getStatusWithHttpOperationResponse(symbolId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Returns a particular symbol by id (uuid) for the provided application
     *
     * @param {string} symbolId The ID of the symbol (uuid of the symbol)
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getStatus(symbolId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getStatus(symbolId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    getStatus(symbolId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets the URL to download the symbol
     *
     * @param {string} symbolId The ID of the symbol (uuid of the symbol)
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLocationWithHttpOperationResponse(symbolId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets the URL to download the symbol
     *
     * @param {string} symbolId The ID of the symbol (uuid of the symbol)
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getLocation(symbolId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getLocation(symbolId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    getLocation(symbolId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Marks a symbol by id (uuid) as ignored
     *
     * @param {string} symbolId The ID of the symbol (uuid of the symbol)
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ignoreWithHttpOperationResponse(symbolId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Marks a symbol by id (uuid) as ignored
     *
     * @param {string} symbolId The ID of the symbol (uuid of the symbol)
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    ignore(symbolId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    ignore(symbolId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    ignore(symbolId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Returns a particular symbol by id (uuid) for the provided application
     *
     * @param {string} symbolId The ID of the symbol (uuid of the symbol)
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(symbolId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Returns a particular symbol by id (uuid) for the provided application
     *
     * @param {string} symbolId The ID of the symbol (uuid of the symbol)
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(symbolId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    get(symbolId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    get(symbolId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Returns the list of all symbols for the provided application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Returns the list of all symbols for the provided application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    list(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * SymbolUploads
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface SymbolUploads {


    /**
     * Gets the URL to download the symbol upload
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLocationWithHttpOperationResponse(symbolUploadId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets the URL to download the symbol upload
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getLocation(symbolUploadId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getLocation(symbolUploadId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    getLocation(symbolUploadId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets a symbol upload by id for the specified application
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(symbolUploadId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets a symbol upload by id for the specified application
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(symbolUploadId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    get(symbolUploadId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    get(symbolUploadId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Commits or aborts the symbol upload process for a new set of symbols for the
     * specified application
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} status The desired operation for the symbol upload. Possible
     * values include: 'committed', 'aborted'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    completeWithHttpOperationResponse(symbolUploadId: string, ownerName: string, appName: string, status: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Commits or aborts the symbol upload process for a new set of symbols for the
     * specified application
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} status The desired operation for the symbol upload. Possible
     * values include: 'committed', 'aborted'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    complete(symbolUploadId: string, ownerName: string, appName: string, status: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    complete(symbolUploadId: string, ownerName: string, appName: string, status: string, callback: ServiceCallback<any>): void;
    complete(symbolUploadId: string, ownerName: string, appName: string, status: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes a symbol upload by id for the specified application
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(symbolUploadId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Deletes a symbol upload by id for the specified application
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(symbolUploadId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteMethod(symbolUploadId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    deleteMethod(symbolUploadId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets a list of all uploads for the specified application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of results to return.
     *
     * @param {string} [options.status] Filter results by the current status of a
     * symbol upload: * all: all states in the symbol upload process. Includes
     * created, aborted, committed, processing, indexed and failed states *
     * uploaded: all states after package is uploaded. Includes committed,
     * processing, indexed and failed states * processed: symbol upload processing
     * is completed. Includes indexed and failed states.
     * . Possible values include: 'all', 'uploaded', 'processed'
     *
     * @param {string} [options.symbolType] The type of symbols. Possible values
     * include: 'AndroidProguard', 'Apple', 'Breakpad', 'JavaScript', 'UWP'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(ownerName: string, appName: string, options?: { top? : number, status? : string, symbolType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets a list of all uploads for the specified application
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of results to return.
     *
     * @param {string} [options.status] Filter results by the current status of a
     * symbol upload: * all: all states in the symbol upload process. Includes
     * created, aborted, committed, processing, indexed and failed states *
     * uploaded: all states after package is uploaded. Includes committed,
     * processing, indexed and failed states * processed: symbol upload processing
     * is completed. Includes indexed and failed states.
     * . Possible values include: 'all', 'uploaded', 'processed'
     *
     * @param {string} [options.symbolType] The type of symbols. Possible values
     * include: 'AndroidProguard', 'Apple', 'Breakpad', 'JavaScript', 'UWP'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(ownerName: string, appName: string, options?: { top? : number, status? : string, symbolType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    list(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    list(ownerName: string, appName: string, options: { top? : number, status? : string, symbolType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Begins the symbol upload process for a new set of symbols for the specified
     * application
     *
     * @param {object} body The symbol information
     *
     * @param {string} body.symbolType The type of the symbol for the current
     * symbol upload. Possible values include: 'Apple', 'JavaScript', 'Breakpad',
     * 'AndroidProguard', 'UWP'
     *
     * @param {string} [body.clientCallback] The callback URL that the client can
     * optionally provide to get status updates for the current symbol upload
     *
     * @param {string} [body.fileName] The file name for the symbol upload
     *
     * @param {string} [body.build] The build number. Optional for Apple. Required
     * for Android.
     *
     * @param {string} [body.version] The version number. Optional for Apple.
     * Required for Android.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(body: models.BodyModelModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Begins the symbol upload process for a new set of symbols for the specified
     * application
     *
     * @param {object} body The symbol information
     *
     * @param {string} body.symbolType The type of the symbol for the current
     * symbol upload. Possible values include: 'Apple', 'JavaScript', 'Breakpad',
     * 'AndroidProguard', 'UWP'
     *
     * @param {string} [body.clientCallback] The callback URL that the client can
     * optionally provide to get status updates for the current symbol upload
     *
     * @param {string} [body.fileName] The file name for the symbol upload
     *
     * @param {string} [body.build] The build number. Optional for Apple. Required
     * for Android.
     *
     * @param {string} [body.version] The version number. Optional for Apple.
     * Required for Android.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(body: models.BodyModelModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    create(body: models.BodyModelModel, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    create(body: models.BodyModelModel, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * StoreNotifications
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface StoreNotifications {


    /**
     * Application specific store service status
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetNotificationByAppIdOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNotificationByAppIdWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetNotificationByAppIdOKResponse>>;

    /**
     * Application specific store service status
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetNotificationByAppIdOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetNotificationByAppIdOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetNotificationByAppIdOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNotificationByAppId(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetNotificationByAppIdOKResponse>;
    getNotificationByAppId(ownerName: string, appName: string, callback: ServiceCallback<models.GetNotificationByAppIdOKResponse>): void;
    getNotificationByAppId(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetNotificationByAppIdOKResponse>): void;
}

/**
 * @class
 * Repositories
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Repositories {


    /**
     * Gets the repositories available from the source code host
     *
     * @param {string} sourceHost The source host. Possible values include:
     * 'github', 'bitbucket', 'vsts', 'gitlab'
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.vstsAccountName] Filter repositories only for
     * specified account and project, "vstsProjectId" is required
     *
     * @param {string} [options.vstsProjectId] Filter repositories only for
     * specified account and project, "vstsAccountName" is required
     *
     * @param {string} [options.serviceConnectionId] The id of the service
     * connection (private). Required for GitLab self-hosted repositories
     *
     * @param {string} [options.form] The selected form of the object. Possible
     * values include: 'lite', 'full'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(sourceHost: string, ownerName: string, appName: string, options?: { vstsAccountName? : string, vstsProjectId? : string, serviceConnectionId? : string, form? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponseItemModelModelModelModel[]>>;

    /**
     * Gets the repositories available from the source code host
     *
     * @param {string} sourceHost The source host. Possible values include:
     * 'github', 'bitbucket', 'vsts', 'gitlab'
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.vstsAccountName] Filter repositories only for
     * specified account and project, "vstsProjectId" is required
     *
     * @param {string} [options.vstsProjectId] Filter repositories only for
     * specified account and project, "vstsAccountName" is required
     *
     * @param {string} [options.serviceConnectionId] The id of the service
     * connection (private). Required for GitLab self-hosted repositories
     *
     * @param {string} [options.form] The selected form of the object. Possible
     * values include: 'lite', 'full'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(sourceHost: string, ownerName: string, appName: string, options?: { vstsAccountName? : string, vstsProjectId? : string, serviceConnectionId? : string, form? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponseItemModelModelModelModel[]>;
    list(sourceHost: string, ownerName: string, appName: string, callback: ServiceCallback<models.ListOKResponseItemModelModelModelModel[]>): void;
    list(sourceHost: string, ownerName: string, appName: string, options: { vstsAccountName? : string, vstsProjectId? : string, serviceConnectionId? : string, form? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponseItemModelModelModelModel[]>): void;
}

/**
 * @class
 * RepositoryConfigurations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface RepositoryConfigurations {


    /**
     * Returns the repository build configuration status of the app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.includeInactive] Include inactive configurations
     * if none are active
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(ownerName: string, appName: string, options?: { includeInactive? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponseItemModelModelModelModelModel[]>>;

    /**
     * Returns the repository build configuration status of the app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.includeInactive] Include inactive configurations
     * if none are active
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(ownerName: string, appName: string, options?: { includeInactive? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponseItemModelModelModelModelModel[]>;
    list(ownerName: string, appName: string, callback: ServiceCallback<models.ListOKResponseItemModelModelModelModelModel[]>): void;
    list(ownerName: string, appName: string, options: { includeInactive? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponseItemModelModelModelModelModel[]>): void;


    /**
     * Configures the repository for build
     *
     * @param {object} repo The repository information
     *
     * @param {string} repo.repoUrl The repository's git url, must be a HTTPS URL
     *
     * @param {string} [repo.repoId] The repository id from the repository
     * provider. Required for repositories connected from GitHub App and GitLab.com
     *
     * @param {string} [repo.externalUserId] The external user id from the
     * repository provider. Required for GitLab.com repositories
     *
     * @param {string} [repo.serviceConnectionId] The id of the service connection
     * (private). Required for GitLab self-hosted repositories
     *
     * @param {string} [repo.installationId] The GitHub App Installation id.
     * Required for repositories connected from GitHub App
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateOrUpdateOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(repo: models.Repo, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateOrUpdateOKResponse>>;

    /**
     * Configures the repository for build
     *
     * @param {object} repo The repository information
     *
     * @param {string} repo.repoUrl The repository's git url, must be a HTTPS URL
     *
     * @param {string} [repo.repoId] The repository id from the repository
     * provider. Required for repositories connected from GitHub App and GitLab.com
     *
     * @param {string} [repo.externalUserId] The external user id from the
     * repository provider. Required for GitLab.com repositories
     *
     * @param {string} [repo.serviceConnectionId] The id of the service connection
     * (private). Required for GitLab self-hosted repositories
     *
     * @param {string} [repo.installationId] The GitHub App Installation id.
     * Required for repositories connected from GitHub App
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateOrUpdateOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateOrUpdateOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreateOrUpdateOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(repo: models.Repo, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateOrUpdateOKResponse>;
    createOrUpdate(repo: models.Repo, ownerName: string, appName: string, callback: ServiceCallback<models.CreateOrUpdateOKResponse>): void;
    createOrUpdate(repo: models.Repo, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateOrUpdateOKResponse>): void;


    /**
     * Removes the configuration for the repository
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeleteOKResponseModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeleteOKResponseModel>>;

    /**
     * Removes the configuration for the repository
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeleteOKResponseModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeleteOKResponseModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeleteOKResponseModel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeleteOKResponseModel>;
    deleteMethod(ownerName: string, appName: string, callback: ServiceCallback<models.DeleteOKResponseModel>): void;
    deleteMethod(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeleteOKResponseModel>): void;
}

/**
 * @class
 * Provisioning
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Provisioning {


    /**
     * Return information about the provisioning profile. Only available for iOS.
     *
     * @param {number} releaseId The release_id
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    profileWithHttpOperationResponse(releaseId: number, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Return information about the provisioning profile. Only available for iOS.
     *
     * @param {number} releaseId The release_id
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    profile(releaseId: number, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    profile(releaseId: number, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    profile(releaseId: number, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Push
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Push {


    /**
     * Returns whether a push configuration exists for the selected app.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    configExistsWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Returns whether a push configuration exists for the selected app.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    configExists(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    configExists(ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    configExists(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get the push configuration for the selected app.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetConfigOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getConfigWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetConfigOKResponse>>;

    /**
     * Get the push configuration for the selected app.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetConfigOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetConfigOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetConfigOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getConfig(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetConfigOKResponse>;
    getConfig(ownerName: string, appName: string, callback: ServiceCallback<models.GetConfigOKResponse>): void;
    getConfig(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetConfigOKResponse>): void;


    /**
     * Set the push configuration for the selected app.
     *
     * @param {object} properties Notification configurations.
     *
     * @param {string} properties.type Polymorphic Discriminator
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SetConfigOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    setConfigWithHttpOperationResponse(properties: models.Properties, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SetConfigOKResponse>>;

    /**
     * Set the push configuration for the selected app.
     *
     * @param {object} properties Notification configurations.
     *
     * @param {string} properties.type Polymorphic Discriminator
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SetConfigOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SetConfigOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SetConfigOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    setConfig(properties: models.Properties, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SetConfigOKResponse>;
    setConfig(properties: models.Properties, ownerName: string, appName: string, callback: ServiceCallback<models.SetConfigOKResponse>): void;
    setConfig(properties: models.Properties, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SetConfigOKResponse>): void;


    /**
     * Delete the push configuration for the selected app.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteConfigWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete the push configuration for the selected app.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteConfig(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteConfig(ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    deleteConfig(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get details about a specific notification.
     *
     * @param {string} notificationId The id of the notification.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetOKResponseModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(notificationId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponseModelModelModelModel>>;

    /**
     * Get details about a specific notification.
     *
     * @param {string} notificationId The id of the notification.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetOKResponseModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetOKResponseModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetOKResponseModelModelModelModel} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(notificationId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponseModelModelModelModel>;
    get(notificationId: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetOKResponseModelModelModelModel>): void;
    get(notificationId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponseModelModelModelModel>): void;


    /**
     * Get a list of notifications from the service.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {string} [options.skiptoken] The value identifies a starting point in
     * the collection of entities. This parameter along with limit is used to
     * perform pagination.
     *
     * @param {string} [options.orderby] controls the sorting order and sorting
     * based on which column
     *
     * @param {string} [options.inlinecount] Controls whether or not to include a
     * count of all the items across all pages. Possible values include:
     * 'allpages', 'none'
     *
     * @param {boolean} [options.includeArchived] Include arhived push
     * notifications
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListOKResponseModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(ownerName: string, appName: string, options?: { top? : number, skiptoken? : string, orderby? : string, inlinecount? : string, includeArchived? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponseModel>>;

    /**
     * Get a list of notifications from the service.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {string} [options.skiptoken] The value identifies a starting point in
     * the collection of entities. This parameter along with limit is used to
     * perform pagination.
     *
     * @param {string} [options.orderby] controls the sorting order and sorting
     * based on which column
     *
     * @param {string} [options.inlinecount] Controls whether or not to include a
     * count of all the items across all pages. Possible values include:
     * 'allpages', 'none'
     *
     * @param {boolean} [options.includeArchived] Include arhived push
     * notifications
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListOKResponseModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListOKResponseModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListOKResponseModel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(ownerName: string, appName: string, options?: { top? : number, skiptoken? : string, orderby? : string, inlinecount? : string, includeArchived? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponseModel>;
    list(ownerName: string, appName: string, callback: ServiceCallback<models.ListOKResponseModel>): void;
    list(ownerName: string, appName: string, options: { top? : number, skiptoken? : string, orderby? : string, inlinecount? : string, includeArchived? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponseModel>): void;


    /**
     * Send a notification to one or more devices.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} notificationContent Notification definition object
     *
     * @param {string} notificationContent.name Notification name
     *
     * @param {string} [notificationContent.title] Notification title
     *
     * @param {string} [notificationContent.body] Notification body
     *
     * @param {object} [notificationContent.customData] Notification custom data
     * (such as badge, color, sound, etc.)
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.notificationTarget] Type of Notification target
     * (audiences, devices, user ids, account ids or broadcast). The object must
     * include the correct properties for the specified target type except for
     * broadcast.
     *
     * @param {string} options.notificationTarget.type Polymorphic Discriminator
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SendAcceptedResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sendWithHttpOperationResponse(ownerName: string, appName: string, notificationContent: models.PropertiesNotificationContent, options?: { notificationTarget? : models.PropertiesNotificationTarget, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SendAcceptedResponse>>;

    /**
     * Send a notification to one or more devices.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} notificationContent Notification definition object
     *
     * @param {string} notificationContent.name Notification name
     *
     * @param {string} [notificationContent.title] Notification title
     *
     * @param {string} [notificationContent.body] Notification body
     *
     * @param {object} [notificationContent.customData] Notification custom data
     * (such as badge, color, sound, etc.)
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.notificationTarget] Type of Notification target
     * (audiences, devices, user ids, account ids or broadcast). The object must
     * include the correct properties for the specified target type except for
     * broadcast.
     *
     * @param {string} options.notificationTarget.type Polymorphic Discriminator
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SendAcceptedResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SendAcceptedResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SendAcceptedResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    send(ownerName: string, appName: string, notificationContent: models.PropertiesNotificationContent, options?: { notificationTarget? : models.PropertiesNotificationTarget, customHeaders? : { [headerName: string]: string; } }): Promise<models.SendAcceptedResponse>;
    send(ownerName: string, appName: string, notificationContent: models.PropertiesNotificationContent, callback: ServiceCallback<models.SendAcceptedResponse>): void;
    send(ownerName: string, appName: string, notificationContent: models.PropertiesNotificationContent, options: { notificationTarget? : models.PropertiesNotificationTarget, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SendAcceptedResponse>): void;


    /**
     * Delete a notification.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} values List of notification Ids.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(ownerName: string, appName: string, values: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a notification.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} values List of notification Ids.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(ownerName: string, appName: string, values: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(ownerName: string, appName: string, values: string[], callback: ServiceCallback<void>): void;
    deleteMethod(ownerName: string, appName: string, values: string[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Delete a device with the selected installId.
     *
     * @param {string} installId device install id
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteInstallIdWithHttpOperationResponse(installId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a device with the selected installId.
     *
     * @param {string} installId device install id
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteInstallId(installId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteInstallId(installId: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    deleteInstallId(installId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get the status of an export operation.
     *
     * @param {string} exportId The id of the export.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportDevicesStatusOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    exportDevicesStatusWithHttpOperationResponse(exportId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportDevicesStatusOKResponse>>;

    /**
     * Get the status of an export operation.
     *
     * @param {string} exportId The id of the export.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportDevicesStatusOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportDevicesStatusOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportDevicesStatusOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    exportDevicesStatus(exportId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportDevicesStatusOKResponse>;
    exportDevicesStatus(exportId: string, ownerName: string, appName: string, callback: ServiceCallback<models.ExportDevicesStatusOKResponse>): void;
    exportDevicesStatus(exportId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportDevicesStatusOKResponse>): void;


    /**
     * Exports information for all devices using Push to Azure Blob Storage
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} blobContainerSasUri A shared access signature (SAS) URI with
     * Read, Write and Delete permissions on a container.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportDevicesAcceptedResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    exportDevicesWithHttpOperationResponse(ownerName: string, appName: string, blobContainerSasUri: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportDevicesAcceptedResponse>>;

    /**
     * Exports information for all devices using Push to Azure Blob Storage
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} blobContainerSasUri A shared access signature (SAS) URI with
     * Read, Write and Delete permissions on a container.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportDevicesAcceptedResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportDevicesAcceptedResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportDevicesAcceptedResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    exportDevices(ownerName: string, appName: string, blobContainerSasUri: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportDevicesAcceptedResponse>;
    exportDevices(ownerName: string, appName: string, blobContainerSasUri: string, callback: ServiceCallback<models.ExportDevicesAcceptedResponse>): void;
    exportDevices(ownerName: string, appName: string, blobContainerSasUri: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportDevicesAcceptedResponse>): void;
}

/**
 * @class
 * FileAssets
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface FileAssets {


    /**
     * Create a new asset to upload a file
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.payload]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateOKResponseModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(ownerName: string, appName: string, options?: { payload? : any, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateOKResponseModel>>;

    /**
     * Create a new asset to upload a file
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.payload]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateOKResponseModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateOKResponseModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreateOKResponseModel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(ownerName: string, appName: string, options?: { payload? : any, customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateOKResponseModel>;
    create(ownerName: string, appName: string, callback: ServiceCallback<models.CreateOKResponseModel>): void;
    create(ownerName: string, appName: string, options: { payload? : any, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateOKResponseModel>): void;
}

/**
 * @class
 * ExportConfigurations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface ExportConfigurations {


    /**
     * Enable export configuration.
     *
     * @param {string} exportConfigurationId The id of the export configuration.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    enableWithHttpOperationResponse(exportConfigurationId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Enable export configuration.
     *
     * @param {string} exportConfigurationId The id of the export configuration.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    enable(exportConfigurationId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    enable(exportConfigurationId: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    enable(exportConfigurationId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Disable export configuration.
     *
     * @param {string} exportConfigurationId The id of the export configuration.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    disableWithHttpOperationResponse(exportConfigurationId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Disable export configuration.
     *
     * @param {string} exportConfigurationId The id of the export configuration.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    disable(exportConfigurationId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    disable(exportConfigurationId: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    disable(exportConfigurationId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get export configuration.
     *
     * @param {string} exportConfigurationId The id of the export configuration.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetOKResponseModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(exportConfigurationId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponseModelModelModelModelModel>>;

    /**
     * Get export configuration.
     *
     * @param {string} exportConfigurationId The id of the export configuration.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetOKResponseModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetOKResponseModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetOKResponseModelModelModelModelModel} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(exportConfigurationId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponseModelModelModelModelModel>;
    get(exportConfigurationId: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModel>): void;
    get(exportConfigurationId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModel>): void;


    /**
     * Partially update export configuration.
     *
     * @param {string} exportConfigurationId The id of the export configuration.
     *
     * @param {object} properties Export configurations.
     *
     * @param {array} [properties.exportEntities]
     *
     * @param {string} [properties.resourceName] The resource name on azure
     *
     * @param {string} [properties.resourceGroup] The resource group name on azure
     *
     * @param {boolean} [properties.backfill] Field to determine if backfilling
     * should occur. The default value is true. If set to false export starts from
     * date and time of config creation.
     *
     * @param {string} properties.type Polymorphic Discriminator
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PartialUpdateOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    partialUpdateWithHttpOperationResponse(exportConfigurationId: string, properties: models.PropertiesModelModelModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PartialUpdateOKResponse>>;

    /**
     * Partially update export configuration.
     *
     * @param {string} exportConfigurationId The id of the export configuration.
     *
     * @param {object} properties Export configurations.
     *
     * @param {array} [properties.exportEntities]
     *
     * @param {string} [properties.resourceName] The resource name on azure
     *
     * @param {string} [properties.resourceGroup] The resource group name on azure
     *
     * @param {boolean} [properties.backfill] Field to determine if backfilling
     * should occur. The default value is true. If set to false export starts from
     * date and time of config creation.
     *
     * @param {string} properties.type Polymorphic Discriminator
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PartialUpdateOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PartialUpdateOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PartialUpdateOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    partialUpdate(exportConfigurationId: string, properties: models.PropertiesModelModelModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PartialUpdateOKResponse>;
    partialUpdate(exportConfigurationId: string, properties: models.PropertiesModelModelModel, ownerName: string, appName: string, callback: ServiceCallback<models.PartialUpdateOKResponse>): void;
    partialUpdate(exportConfigurationId: string, properties: models.PropertiesModelModelModel, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PartialUpdateOKResponse>): void;


    /**
     * Delete export configuration.
     *
     * @param {string} exportConfigurationId The id of the export configuration.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(exportConfigurationId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete export configuration.
     *
     * @param {string} exportConfigurationId The id of the export configuration.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(exportConfigurationId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(exportConfigurationId: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    deleteMethod(exportConfigurationId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List export configurations.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListOKResponseModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponseModelModelModel>>;

    /**
     * List export configurations.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListOKResponseModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListOKResponseModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListOKResponseModelModelModel} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponseModelModelModel>;
    list(ownerName: string, appName: string, callback: ServiceCallback<models.ListOKResponseModelModelModel>): void;
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponseModelModelModel>): void;


    /**
     * Create new export configuration
     *
     * @param {object} properties Export configurations.
     *
     * @param {array} [properties.exportEntities]
     *
     * @param {string} [properties.resourceName] The resource name on azure
     *
     * @param {string} [properties.resourceGroup] The resource group name on azure
     *
     * @param {boolean} [properties.backfill] Field to determine if backfilling
     * should occur. The default value is true. If set to false export starts from
     * date and time of config creation.
     *
     * @param {string} properties.type Polymorphic Discriminator
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateAcceptedResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(properties: models.PropertiesModelModelModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateAcceptedResponse>>;

    /**
     * Create new export configuration
     *
     * @param {object} properties Export configurations.
     *
     * @param {array} [properties.exportEntities]
     *
     * @param {string} [properties.resourceName] The resource name on azure
     *
     * @param {string} [properties.resourceGroup] The resource group name on azure
     *
     * @param {boolean} [properties.backfill] Field to determine if backfilling
     * should occur. The default value is true. If set to false export starts from
     * date and time of config creation.
     *
     * @param {string} properties.type Polymorphic Discriminator
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateAcceptedResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateAcceptedResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreateAcceptedResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(properties: models.PropertiesModelModelModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateAcceptedResponse>;
    create(properties: models.PropertiesModelModelModel, ownerName: string, appName: string, callback: ServiceCallback<models.CreateAcceptedResponse>): void;
    create(properties: models.PropertiesModelModelModel, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateAcceptedResponse>): void;
}

/**
 * @class
 * Errors
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Errors {


    /**
     * Get session logs by error ID
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.date] Date of data requested
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListSessionLogsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSessionLogsWithHttpOperationResponse(errorId: string, ownerName: string, appName: string, options?: { date? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListSessionLogsOKResponse>>;

    /**
     * Get session logs by error ID
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.date] Date of data requested
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListSessionLogsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListSessionLogsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListSessionLogsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSessionLogs(errorId: string, ownerName: string, appName: string, options?: { date? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListSessionLogsOKResponse>;
    listSessionLogs(errorId: string, ownerName: string, appName: string, callback: ServiceCallback<models.ListSessionLogsOKResponse>): void;
    listSessionLogs(errorId: string, ownerName: string, appName: string, options: { date? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListSessionLogsOKResponse>): void;


    /**
     * Error attachment text.
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} attachmentId Error attachment id.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ErrorAttachmentTextOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    errorAttachmentTextMethodWithHttpOperationResponse(errorId: string, attachmentId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorAttachmentTextOKResponse>>;

    /**
     * Error attachment text.
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} attachmentId Error attachment id.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ErrorAttachmentTextOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ErrorAttachmentTextOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ErrorAttachmentTextOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    errorAttachmentTextMethod(errorId: string, attachmentId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorAttachmentTextOKResponse>;
    errorAttachmentTextMethod(errorId: string, attachmentId: string, ownerName: string, appName: string, callback: ServiceCallback<models.ErrorAttachmentTextOKResponse>): void;
    errorAttachmentTextMethod(errorId: string, attachmentId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorAttachmentTextOKResponse>): void;


    /**
     * Error attachment location.
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} attachmentId Error attachment id.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ErrorAttachmentLocationOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    errorAttachmentLocationMethodWithHttpOperationResponse(errorId: string, attachmentId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorAttachmentLocationOKResponse>>;

    /**
     * Error attachment location.
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} attachmentId Error attachment id.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ErrorAttachmentLocationOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ErrorAttachmentLocationOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ErrorAttachmentLocationOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    errorAttachmentLocationMethod(errorId: string, attachmentId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorAttachmentLocationOKResponse>;
    errorAttachmentLocationMethod(errorId: string, attachmentId: string, ownerName: string, appName: string, callback: ServiceCallback<models.ErrorAttachmentLocationOKResponse>): void;
    errorAttachmentLocationMethod(errorId: string, attachmentId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorAttachmentLocationOKResponse>): void;


    /**
     * List error attachments.
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    errorAttachmentsWithHttpOperationResponse(errorId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorAttachmentsOKResponseItem[]>>;

    /**
     * List error attachments.
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    errorAttachments(errorId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorAttachmentsOKResponseItem[]>;
    errorAttachments(errorId: string, ownerName: string, appName: string, callback: ServiceCallback<models.ErrorAttachmentsOKResponseItem[]>): void;
    errorAttachments(errorId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorAttachmentsOKResponseItem[]>): void;


    /**
     * Errors list based on search parameters
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] A filter as specified in OData notation
     *
     * @param {string} [options.q] A query string
     *
     * @param {string} [options.order] It controls the order of sorting. Possible
     * values include: 'desc', 'asc'
     *
     * @param {string} [options.sort] It controls the sort based on specified
     * field. Possible values include: 'timestamp', 'errorGroupId',
     * 'exceptionClassName', 'exceptionFile', 'exceptionLine', 'exceptionMessage',
     * 'exceptionMethod', 'deviceName', 'osVersion', 'userId'
     *
     * @param {number} [options.top] The maximum number of results to return
     *
     * @param {number} [options.skip] The offset (starting at 0) of the first
     * result to return. This parameter along with limit is used to perform
     * pagination.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ErrorSearchOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    errorSearchWithHttpOperationResponse(ownerName: string, appName: string, options?: { filter? : string, q? : string, order? : string, sort? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorSearchOKResponse>>;

    /**
     * Errors list based on search parameters
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] A filter as specified in OData notation
     *
     * @param {string} [options.q] A query string
     *
     * @param {string} [options.order] It controls the order of sorting. Possible
     * values include: 'desc', 'asc'
     *
     * @param {string} [options.sort] It controls the sort based on specified
     * field. Possible values include: 'timestamp', 'errorGroupId',
     * 'exceptionClassName', 'exceptionFile', 'exceptionLine', 'exceptionMessage',
     * 'exceptionMethod', 'deviceName', 'osVersion', 'userId'
     *
     * @param {number} [options.top] The maximum number of results to return
     *
     * @param {number} [options.skip] The offset (starting at 0) of the first
     * result to return. This parameter along with limit is used to perform
     * pagination.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ErrorSearchOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ErrorSearchOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ErrorSearchOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    errorSearch(ownerName: string, appName: string, options?: { filter? : string, q? : string, order? : string, sort? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorSearchOKResponse>;
    errorSearch(ownerName: string, appName: string, callback: ServiceCallback<models.ErrorSearchOKResponse>): void;
    errorSearch(ownerName: string, appName: string, options: { filter? : string, q? : string, order? : string, sort? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorSearchOKResponse>): void;


    /**
     * @summary Creates and updates the retention settings in days
     *
     * Creates and updates the retention settings in days
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {number} retentionInDays
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PutRetentionSettingsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    putRetentionSettingsWithHttpOperationResponse(ownerName: string, appName: string, retentionInDays: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PutRetentionSettingsOKResponse>>;

    /**
     * @summary Creates and updates the retention settings in days
     *
     * Creates and updates the retention settings in days
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {number} retentionInDays
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PutRetentionSettingsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PutRetentionSettingsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PutRetentionSettingsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    putRetentionSettings(ownerName: string, appName: string, retentionInDays: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PutRetentionSettingsOKResponse>;
    putRetentionSettings(ownerName: string, appName: string, retentionInDays: number, callback: ServiceCallback<models.PutRetentionSettingsOKResponse>): void;
    putRetentionSettings(ownerName: string, appName: string, retentionInDays: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PutRetentionSettingsOKResponse>): void;


    /**
     * @summary gets the retention settings in days
     *
     * gets the retention settings in days
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetRetentionSettingsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRetentionSettingsWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetRetentionSettingsOKResponse>>;

    /**
     * @summary gets the retention settings in days
     *
     * gets the retention settings in days
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetRetentionSettingsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetRetentionSettingsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetRetentionSettingsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRetentionSettings(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetRetentionSettingsOKResponse>;
    getRetentionSettings(ownerName: string, appName: string, callback: ServiceCallback<models.GetRetentionSettingsOKResponse>): void;
    getRetentionSettings(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetRetentionSettingsOKResponse>): void;


    /**
     * Percentage of error-free devices by day in the time range based on the
     * selected versions. If SingleErrorTypeParameter is not provided, defaults to
     * handlederror. API will return -1 if crash devices is greater than active
     * devices
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {array} [options.versions]
     *
     * @param {string} [options.appBuild] app build
     *
     * @param {string} [options.errorType] Type of error (handled vs unhandled),
     * excluding All. Possible values include: 'unhandledError', 'handledError'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ErrorFreeDevicePercentagesOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    errorFreeDevicePercentagesMethodWithHttpOperationResponse(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], appBuild? : string, errorType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorFreeDevicePercentagesOKResponse>>;

    /**
     * Percentage of error-free devices by day in the time range based on the
     * selected versions. If SingleErrorTypeParameter is not provided, defaults to
     * handlederror. API will return -1 if crash devices is greater than active
     * devices
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {array} [options.versions]
     *
     * @param {string} [options.appBuild] app build
     *
     * @param {string} [options.errorType] Type of error (handled vs unhandled),
     * excluding All. Possible values include: 'unhandledError', 'handledError'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ErrorFreeDevicePercentagesOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ErrorFreeDevicePercentagesOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ErrorFreeDevicePercentagesOKResponse} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    errorFreeDevicePercentagesMethod(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], appBuild? : string, errorType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorFreeDevicePercentagesOKResponse>;
    errorFreeDevicePercentagesMethod(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.ErrorFreeDevicePercentagesOKResponse>): void;
    errorFreeDevicePercentagesMethod(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], appBuild? : string, errorType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorFreeDevicePercentagesOKResponse>): void;


    /**
     * Gets the stack trace for the error group.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticsStackTrace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    groupErrorStackTraceWithHttpOperationResponse(errorGroupId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticsStackTrace>>;

    /**
     * Gets the stack trace for the error group.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticsStackTrace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticsStackTrace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticsStackTrace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    groupErrorStackTrace(errorGroupId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticsStackTrace>;
    groupErrorStackTrace(errorGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.DiagnosticsStackTrace>): void;
    groupErrorStackTrace(errorGroupId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticsStackTrace>): void;


    /**
     * Top OSes of the selected error group.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results till the max number.)
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupOperatingSystemCountsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    groupOperatingSystemCountsWithHttpOperationResponse(errorGroupId: string, ownerName: string, appName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupOperatingSystemCountsOKResponse>>;

    /**
     * Top OSes of the selected error group.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results till the max number.)
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupOperatingSystemCountsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupOperatingSystemCountsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupOperatingSystemCountsOKResponse} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    groupOperatingSystemCounts(errorGroupId: string, ownerName: string, appName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupOperatingSystemCountsOKResponse>;
    groupOperatingSystemCounts(errorGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.GroupOperatingSystemCountsOKResponse>): void;
    groupOperatingSystemCounts(errorGroupId: string, ownerName: string, appName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupOperatingSystemCountsOKResponse>): void;


    /**
     * Top models of the selected error group.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results till the max number.)
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupModelCountsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    groupModelCountsWithHttpOperationResponse(errorGroupId: string, ownerName: string, appName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupModelCountsOKResponse>>;

    /**
     * Top models of the selected error group.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results till the max number.)
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupModelCountsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupModelCountsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupModelCountsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    groupModelCounts(errorGroupId: string, ownerName: string, appName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupModelCountsOKResponse>;
    groupModelCounts(errorGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.GroupModelCountsOKResponse>): void;
    groupModelCounts(errorGroupId: string, ownerName: string, appName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupModelCountsOKResponse>): void;


    /**
     * Error Stacktrace details.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticsStackTrace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    errorStackTraceWithHttpOperationResponse(errorGroupId: string, errorId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticsStackTrace>>;

    /**
     * Error Stacktrace details.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticsStackTrace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticsStackTrace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticsStackTrace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    errorStackTrace(errorGroupId: string, errorId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticsStackTrace>;
    errorStackTrace(errorGroupId: string, errorId: string, ownerName: string, appName: string, callback: ServiceCallback<models.DiagnosticsStackTrace>): void;
    errorStackTrace(errorGroupId: string, errorId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticsStackTrace>): void;


    /**
     * Error location.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ErrorLocationOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    errorLocationMethodWithHttpOperationResponse(errorGroupId: string, errorId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorLocationOKResponse>>;

    /**
     * Error location.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ErrorLocationOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ErrorLocationOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ErrorLocationOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    errorLocationMethod(errorGroupId: string, errorId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorLocationOKResponse>;
    errorLocationMethod(errorGroupId: string, errorId: string, ownerName: string, appName: string, callback: ServiceCallback<models.ErrorLocationOKResponse>): void;
    errorLocationMethod(errorGroupId: string, errorId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorLocationOKResponse>): void;


    /**
     * Download details for a specific error.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.format] the format of the crash log. Possible
     * values include: 'json', 'txt'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    errorDownloadWithHttpOperationResponse(errorGroupId: string, errorId: string, ownerName: string, appName: string, options?: { format? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * Download details for a specific error.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.format] the format of the crash log. Possible
     * values include: 'json', 'txt'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    errorDownload(errorGroupId: string, errorId: string, ownerName: string, appName: string, options?: { format? : string, customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    errorDownload(errorGroupId: string, errorId: string, ownerName: string, appName: string, callback: ServiceCallback<stream.Readable>): void;
    errorDownload(errorGroupId: string, errorId: string, ownerName: string, appName: string, options: { format? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


    /**
     * Error details.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetErrorDetailsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getErrorDetailsWithHttpOperationResponse(errorGroupId: string, errorId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetErrorDetailsOKResponse>>;

    /**
     * Error details.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetErrorDetailsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetErrorDetailsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetErrorDetailsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getErrorDetails(errorGroupId: string, errorId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetErrorDetailsOKResponse>;
    getErrorDetails(errorGroupId: string, errorId: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetErrorDetailsOKResponse>): void;
    getErrorDetails(errorGroupId: string, errorId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetErrorDetailsOKResponse>): void;


    /**
     * Delete a specific error and related attachments and blobs for an app.
     * Searchable data will not be deleted immediately and may take up to 30 days.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeleteErrorOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteErrorWithHttpOperationResponse(errorGroupId: string, errorId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeleteErrorOKResponse>>;

    /**
     * Delete a specific error and related attachments and blobs for an app.
     * Searchable data will not be deleted immediately and may take up to 30 days.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} errorId The id of the error
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeleteErrorOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeleteErrorOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeleteErrorOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteError(errorGroupId: string, errorId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeleteErrorOKResponse>;
    deleteError(errorGroupId: string, errorId: string, ownerName: string, appName: string, callback: ServiceCallback<models.DeleteErrorOKResponse>): void;
    deleteError(errorGroupId: string, errorId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeleteErrorOKResponse>): void;


    /**
     * Latest error details.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LatestErrorDetailsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    latestErrorDetailsWithHttpOperationResponse(errorGroupId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LatestErrorDetailsOKResponse>>;

    /**
     * Latest error details.
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LatestErrorDetailsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LatestErrorDetailsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LatestErrorDetailsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    latestErrorDetails(errorGroupId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LatestErrorDetailsOKResponse>;
    latestErrorDetails(errorGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.LatestErrorDetailsOKResponse>): void;
    latestErrorDetails(errorGroupId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LatestErrorDetailsOKResponse>): void;


    /**
     * Get all errors for group
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results till the max number.)
     *
     * @param {string} [options.model]
     *
     * @param {string} [options.os]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListForGroupOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForGroupWithHttpOperationResponse(errorGroupId: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, model? : string, os? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListForGroupOKResponse>>;

    /**
     * Get all errors for group
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results till the max number.)
     *
     * @param {string} [options.model]
     *
     * @param {string} [options.os]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListForGroupOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListForGroupOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListForGroupOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForGroup(errorGroupId: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, model? : string, os? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListForGroupOKResponse>;
    listForGroup(errorGroupId: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.ListForGroupOKResponse>): void;
    listForGroup(errorGroupId: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, top? : number, model? : string, os? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListForGroupOKResponse>): void;


    /**
     * Percentage of error-free devices by day in the time range. Api will return
     * -1 if crash devices is greater than active devices
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupErrorFreeDevicePercentagesOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    groupErrorFreeDevicePercentagesWithHttpOperationResponse(errorGroupId: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupErrorFreeDevicePercentagesOKResponse>>;

    /**
     * Percentage of error-free devices by day in the time range. Api will return
     * -1 if crash devices is greater than active devices
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupErrorFreeDevicePercentagesOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupErrorFreeDevicePercentagesOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupErrorFreeDevicePercentagesOKResponse}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    groupErrorFreeDevicePercentages(errorGroupId: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupErrorFreeDevicePercentagesOKResponse>;
    groupErrorFreeDevicePercentages(errorGroupId: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.GroupErrorFreeDevicePercentagesOKResponse>): void;
    groupErrorFreeDevicePercentages(errorGroupId: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupErrorFreeDevicePercentagesOKResponse>): void;


    /**
     * Count of errors by day in the time range of the selected error group with
     * selected version
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.version]
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupCountsPerDayOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    groupCountsPerDayWithHttpOperationResponse(errorGroupId: string, start: Date|string, ownerName: string, appName: string, options?: { version? : string, end? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupCountsPerDayOKResponse>>;

    /**
     * Count of errors by day in the time range of the selected error group with
     * selected version
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.version]
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupCountsPerDayOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupCountsPerDayOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupCountsPerDayOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    groupCountsPerDay(errorGroupId: string, start: Date|string, ownerName: string, appName: string, options?: { version? : string, end? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupCountsPerDayOKResponse>;
    groupCountsPerDay(errorGroupId: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.GroupCountsPerDayOKResponse>): void;
    groupCountsPerDay(errorGroupId: string, start: Date|string, ownerName: string, appName: string, options: { version? : string, end? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupCountsPerDayOKResponse>): void;


    /**
     * Error group details
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupDetailsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    groupDetailsWithHttpOperationResponse(errorGroupId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupDetailsOKResponse>>;

    /**
     * Error group details
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupDetailsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupDetailsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupDetailsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    groupDetails(errorGroupId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupDetailsOKResponse>;
    groupDetails(errorGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.GroupDetailsOKResponse>): void;
    groupDetails(errorGroupId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupDetailsOKResponse>): void;


    /**
     * Update error group state
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} state Possible values include: 'open', 'closed', 'ignored'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.annotation]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdateStateOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateStateWithHttpOperationResponse(errorGroupId: string, ownerName: string, appName: string, state: string, options?: { annotation? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdateStateOKResponse>>;

    /**
     * Update error group state
     *
     * @param {string} errorGroupId The id of the error group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} state Possible values include: 'open', 'closed', 'ignored'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.annotation]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdateStateOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdateStateOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UpdateStateOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateState(errorGroupId: string, ownerName: string, appName: string, state: string, options?: { annotation? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdateStateOKResponse>;
    updateState(errorGroupId: string, ownerName: string, appName: string, state: string, callback: ServiceCallback<models.UpdateStateOKResponse>): void;
    updateState(errorGroupId: string, ownerName: string, appName: string, state: string, options: { annotation? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdateStateOKResponse>): void;


    /**
     * Error groups list based on search parameters
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] A filter as specified in OData notation
     *
     * @param {string} [options.q] A query string
     *
     * @param {string} [options.order] It controls the order of sorting. Possible
     * values include: 'desc', 'asc'
     *
     * @param {string} [options.sort] It controls the sort based on specified
     * field. Possible values include: 'matchingReportsCount',
     * 'exceptionClassName', 'exceptionMessage', 'exceptionMethod',
     * 'lastOccurrence'
     *
     * @param {number} [options.top] The maximum number of results to return
     *
     * @param {number} [options.skip] The offset (starting at 0) of the first
     * result to return. This parameter along with limit is used to perform
     * pagination.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ErrorGroupsSearchOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    errorGroupsSearchWithHttpOperationResponse(ownerName: string, appName: string, options?: { filter? : string, q? : string, order? : string, sort? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorGroupsSearchOKResponse>>;

    /**
     * Error groups list based on search parameters
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] A filter as specified in OData notation
     *
     * @param {string} [options.q] A query string
     *
     * @param {string} [options.order] It controls the order of sorting. Possible
     * values include: 'desc', 'asc'
     *
     * @param {string} [options.sort] It controls the sort based on specified
     * field. Possible values include: 'matchingReportsCount',
     * 'exceptionClassName', 'exceptionMessage', 'exceptionMethod',
     * 'lastOccurrence'
     *
     * @param {number} [options.top] The maximum number of results to return
     *
     * @param {number} [options.skip] The offset (starting at 0) of the first
     * result to return. This parameter along with limit is used to perform
     * pagination.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ErrorGroupsSearchOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ErrorGroupsSearchOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ErrorGroupsSearchOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    errorGroupsSearch(ownerName: string, appName: string, options?: { filter? : string, q? : string, order? : string, sort? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorGroupsSearchOKResponse>;
    errorGroupsSearch(ownerName: string, appName: string, callback: ServiceCallback<models.ErrorGroupsSearchOKResponse>): void;
    errorGroupsSearch(ownerName: string, appName: string, options: { filter? : string, q? : string, order? : string, sort? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorGroupsSearchOKResponse>): void;


    /**
     * List of error groups
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.version]
     *
     * @param {string} [options.appBuild] app build
     *
     * @param {string} [options.groupState]
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {string} [options.orderby] controls the sorting order and sorting
     * based on which column
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results till the max number.)
     *
     * @param {string} [options.errorType] Type of error (handled vs unhandled),
     * including All. Possible values include: 'all', 'unhandledError',
     * 'handledError'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupListOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    groupListWithHttpOperationResponse(start: Date|string, ownerName: string, appName: string, options?: { version? : string, appBuild? : string, groupState? : string, end? : Date, orderby? : string, top? : number, errorType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupListOKResponse>>;

    /**
     * List of error groups
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.version]
     *
     * @param {string} [options.appBuild] app build
     *
     * @param {string} [options.groupState]
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {string} [options.orderby] controls the sorting order and sorting
     * based on which column
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results till the max number.)
     *
     * @param {string} [options.errorType] Type of error (handled vs unhandled),
     * including All. Possible values include: 'all', 'unhandledError',
     * 'handledError'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupListOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupListOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupListOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    groupList(start: Date|string, ownerName: string, appName: string, options?: { version? : string, appBuild? : string, groupState? : string, end? : Date, orderby? : string, top? : number, errorType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupListOKResponse>;
    groupList(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.GroupListOKResponse>): void;
    groupList(start: Date|string, ownerName: string, appName: string, options: { version? : string, appBuild? : string, groupState? : string, end? : Date, orderby? : string, top? : number, errorType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupListOKResponse>): void;


    /**
     * Count of crashes or errors by day in the time range based the selected
     * versions. If SingleErrorTypeParameter is not provided, defaults to
     * handlederror.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.version]
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {string} [options.appBuild] app build
     *
     * @param {string} [options.errorType] Type of error (handled vs unhandled),
     * excluding All. Possible values include: 'unhandledError', 'handledError'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CountsPerDayOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    countsPerDayWithHttpOperationResponse(start: Date|string, ownerName: string, appName: string, options?: { version? : string, end? : Date, appBuild? : string, errorType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CountsPerDayOKResponse>>;

    /**
     * Count of crashes or errors by day in the time range based the selected
     * versions. If SingleErrorTypeParameter is not provided, defaults to
     * handlederror.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.version]
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {string} [options.appBuild] app build
     *
     * @param {string} [options.errorType] Type of error (handled vs unhandled),
     * excluding All. Possible values include: 'unhandledError', 'handledError'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CountsPerDayOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CountsPerDayOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CountsPerDayOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    countsPerDay(start: Date|string, ownerName: string, appName: string, options?: { version? : string, end? : Date, appBuild? : string, errorType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CountsPerDayOKResponse>;
    countsPerDay(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.CountsPerDayOKResponse>): void;
    countsPerDay(start: Date|string, ownerName: string, appName: string, options: { version? : string, end? : Date, appBuild? : string, errorType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CountsPerDayOKResponse>): void;


    /**
     * Get all available versions in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results till the max number.)
     *
     * @param {number} [options.skip] The offset (starting at 0) of the first
     * result to return. This parameter along with limit is used to perform
     * pagination.
     *
     * @param {string} [options.filter] A filter as specified in
     * https://github.com/microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering.
     *
     * @param {string} [options.inlinecount] Controls whether or not to include a
     * count of all the items across all pages. Possible values include:
     * 'allpages', 'none'
     *
     * @param {string} [options.errorType] Type of error (handled vs unhandled),
     * including All. Possible values include: 'all', 'unhandledError',
     * 'handledError'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AvailableVersionsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    availableVersionsMethodWithHttpOperationResponse(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, skip? : number, filter? : string, inlinecount? : string, errorType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AvailableVersionsOKResponse>>;

    /**
     * Get all available versions in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results till the max number.)
     *
     * @param {number} [options.skip] The offset (starting at 0) of the first
     * result to return. This parameter along with limit is used to perform
     * pagination.
     *
     * @param {string} [options.filter] A filter as specified in
     * https://github.com/microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering.
     *
     * @param {string} [options.inlinecount] Controls whether or not to include a
     * count of all the items across all pages. Possible values include:
     * 'allpages', 'none'
     *
     * @param {string} [options.errorType] Type of error (handled vs unhandled),
     * including All. Possible values include: 'all', 'unhandledError',
     * 'handledError'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AvailableVersionsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AvailableVersionsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AvailableVersionsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    availableVersionsMethod(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, skip? : number, filter? : string, inlinecount? : string, errorType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.AvailableVersionsOKResponse>;
    availableVersionsMethod(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.AvailableVersionsOKResponse>): void;
    availableVersionsMethod(start: Date|string, ownerName: string, appName: string, options: { end? : Date, top? : number, skip? : number, filter? : string, inlinecount? : string, errorType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailableVersionsOKResponse>): void;


    /**
     * List of app builds
     *
     * @param {string} version
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results till the max number.)
     *
     * @param {string} [options.errorType] Type of error (handled vs unhandled),
     * including All. Possible values include: 'all', 'unhandledError',
     * 'handledError'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppBuildsListOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    appBuildsListWithHttpOperationResponse(version: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, errorType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppBuildsListOKResponse>>;

    /**
     * List of app builds
     *
     * @param {string} version
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results till the max number.)
     *
     * @param {string} [options.errorType] Type of error (handled vs unhandled),
     * including All. Possible values include: 'all', 'unhandledError',
     * 'handledError'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppBuildsListOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppBuildsListOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppBuildsListOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    appBuildsList(version: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, errorType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.AppBuildsListOKResponse>;
    appBuildsList(version: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.AppBuildsListOKResponse>): void;
    appBuildsList(version: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, top? : number, errorType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppBuildsListOKResponse>): void;
}

/**
 * @class
 * StoreReleases
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface StoreReleases {


    /**
     * Return the Real time Status publishing of release from store.
     *
     * @param {string} storeName The name of the store
     *
     * @param {number} releaseId The id of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetRealTimeStatusByReleaseIdOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRealTimeStatusByReleaseIdWithHttpOperationResponse(storeName: string, releaseId: number, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetRealTimeStatusByReleaseIdOKResponse>>;

    /**
     * Return the Real time Status publishing of release from store.
     *
     * @param {string} storeName The name of the store
     *
     * @param {number} releaseId The id of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetRealTimeStatusByReleaseIdOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetRealTimeStatusByReleaseIdOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetRealTimeStatusByReleaseIdOKResponse} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRealTimeStatusByReleaseId(storeName: string, releaseId: number, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetRealTimeStatusByReleaseIdOKResponse>;
    getRealTimeStatusByReleaseId(storeName: string, releaseId: number, ownerName: string, appName: string, callback: ServiceCallback<models.GetRealTimeStatusByReleaseIdOKResponse>): void;
    getRealTimeStatusByReleaseId(storeName: string, releaseId: number, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetRealTimeStatusByReleaseIdOKResponse>): void;


    /**
     * Return the Error Details of release which failed in publishing.
     *
     * @param {string} storeName The name of the store
     *
     * @param {number} releaseId The id of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetPublishErrorOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPublishErrorWithHttpOperationResponse(storeName: string, releaseId: number, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetPublishErrorOKResponse>>;

    /**
     * Return the Error Details of release which failed in publishing.
     *
     * @param {string} storeName The name of the store
     *
     * @param {number} releaseId The id of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetPublishErrorOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetPublishErrorOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetPublishErrorOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPublishError(storeName: string, releaseId: number, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetPublishErrorOKResponse>;
    getPublishError(storeName: string, releaseId: number, ownerName: string, appName: string, callback: ServiceCallback<models.GetPublishErrorOKResponse>): void;
    getPublishError(storeName: string, releaseId: number, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetPublishErrorOKResponse>): void;


    /**
     * Return releases published in a store for releaseId and storeId
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} releaseId The name of the store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(storeName: string, releaseId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponseItem[]>>;

    /**
     * Return releases published in a store for releaseId and storeId
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} releaseId The name of the store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(storeName: string, releaseId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponseItem[]>;
    get(storeName: string, releaseId: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetOKResponseItem[]>): void;
    get(storeName: string, releaseId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponseItem[]>): void;


    /**
     * delete the release with release Id
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} releaseId The id of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.body]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(storeName: string, releaseId: string, ownerName: string, appName: string, options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * delete the release with release Id
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} releaseId The id of the release
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.body]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(storeName: string, releaseId: string, ownerName: string, appName: string, options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(storeName: string, releaseId: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    deleteMethod(storeName: string, releaseId: string, ownerName: string, appName: string, options: { body? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Return all releases published  in a store
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(storeName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponseItemModelModelModelModelModelModelModel[]>>;

    /**
     * Return all releases published  in a store
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(storeName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponseItemModelModelModelModelModelModelModel[]>;
    list(storeName: string, ownerName: string, appName: string, callback: ServiceCallback<models.ListOKResponseItemModelModelModelModelModelModelModel[]>): void;
    list(storeName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponseItemModelModelModelModelModelModelModel[]>): void;


    /**
     * Returns the latest release published in a store.
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLatestWithHttpOperationResponse(storeName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetLatestOKResponseItem[]>>;

    /**
     * Returns the latest release published in a store.
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getLatest(storeName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetLatestOKResponseItem[]>;
    getLatest(storeName: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetLatestOKResponseItem[]>): void;
    getLatest(storeName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetLatestOKResponseItem[]>): void;
}

/**
 * @class
 * StoreReleasePublishLogs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface StoreReleasePublishLogs {


    /**
     * Returns publish logs for a particular release published to a particular
     * store
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} releaseId The ID of the realease
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(storeName: string, releaseId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Returns publish logs for a particular release published to a particular
     * store
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} releaseId The ID of the realease
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(storeName: string, releaseId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    get(storeName: string, releaseId: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    get(storeName: string, releaseId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Stores
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Stores {


    /**
     * Return the store details for specified store name.
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetOKResponseModelModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(storeName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponseModelModelModelModelModelModel>>;

    /**
     * Return the store details for specified store name.
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetOKResponseModelModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetOKResponseModelModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetOKResponseModelModelModelModelModelModel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(storeName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponseModelModelModelModelModelModel>;
    get(storeName: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModel>): void;
    get(storeName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModel>): void;


    /**
     * Update the store.
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} serviceConnectionId Service connection id to updated.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    patchWithHttpOperationResponse(storeName: string, ownerName: string, appName: string, serviceConnectionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update the store.
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} serviceConnectionId Service connection id to updated.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    patch(storeName: string, ownerName: string, appName: string, serviceConnectionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    patch(storeName: string, ownerName: string, appName: string, serviceConnectionId: string, callback: ServiceCallback<void>): void;
    patch(storeName: string, ownerName: string, appName: string, serviceConnectionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * delete the store based on specific store name.
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.body]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(storeName: string, ownerName: string, appName: string, options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * delete the store based on specific store name.
     *
     * @param {string} storeName The name of the store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.body]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(storeName: string, ownerName: string, appName: string, options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(storeName: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    deleteMethod(storeName: string, ownerName: string, appName: string, options: { body? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create a new external store for the specified application.
     *
     * @param {object} body The store request
     *
     * @param {string} [body.type] store Type. Possible values include:
     * 'googleplay', 'intune', 'apple'
     *
     * @param {string} [body.name] name of the store. In case of googleplay, and
     * Apple store this is fixed to Production.
     *
     * @param {string} [body.track] track of the store. Can be production, alpha &
     * beta for googleplay. Can be production, testflight-internal &
     * testflight-external for Apple Store. Possible values include: 'production',
     * 'alpha', 'beta', 'testflight-internal', 'testflight-external'
     *
     * @param {object} [body.intuneDetails]
     *
     * @param {object} [body.intuneDetails.secretJson]
     *
     * @param {string} [body.intuneDetails.secretJson.idToken] the id token of user
     *
     * @param {string} [body.intuneDetails.secretJson.refreshToken] the refresh
     * token for user
     *
     * @param {string} [body.intuneDetails.secretJson.refreshTokenExpiry] the
     * expiry of refresh token
     *
     * @param {object} [body.intuneDetails.targetAudience]
     *
     * @param {string} [body.intuneDetails.targetAudience.name] display name for
     * the target audience/group
     *
     * @param {object} [body.intuneDetails.appCategory]
     *
     * @param {string} [body.intuneDetails.appCategory.name] display name for the
     * app category
     *
     * @param {string} [body.intuneDetails.tenantId] tenant id of the intune store
     *
     * @param {string} [body.serviceConnectionId] Id for the shared service
     * connection. In case of Apple AppStore, this connection will be used to
     * create and connect to the Apple AppStore in Mobile Center.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateCreatedResponseModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(body: models.BodyModelModelModelModelModelModelModelModelModelModelModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateCreatedResponseModel>>;

    /**
     * Create a new external store for the specified application.
     *
     * @param {object} body The store request
     *
     * @param {string} [body.type] store Type. Possible values include:
     * 'googleplay', 'intune', 'apple'
     *
     * @param {string} [body.name] name of the store. In case of googleplay, and
     * Apple store this is fixed to Production.
     *
     * @param {string} [body.track] track of the store. Can be production, alpha &
     * beta for googleplay. Can be production, testflight-internal &
     * testflight-external for Apple Store. Possible values include: 'production',
     * 'alpha', 'beta', 'testflight-internal', 'testflight-external'
     *
     * @param {object} [body.intuneDetails]
     *
     * @param {object} [body.intuneDetails.secretJson]
     *
     * @param {string} [body.intuneDetails.secretJson.idToken] the id token of user
     *
     * @param {string} [body.intuneDetails.secretJson.refreshToken] the refresh
     * token for user
     *
     * @param {string} [body.intuneDetails.secretJson.refreshTokenExpiry] the
     * expiry of refresh token
     *
     * @param {object} [body.intuneDetails.targetAudience]
     *
     * @param {string} [body.intuneDetails.targetAudience.name] display name for
     * the target audience/group
     *
     * @param {object} [body.intuneDetails.appCategory]
     *
     * @param {string} [body.intuneDetails.appCategory.name] display name for the
     * app category
     *
     * @param {string} [body.intuneDetails.tenantId] tenant id of the intune store
     *
     * @param {string} [body.serviceConnectionId] Id for the shared service
     * connection. In case of Apple AppStore, this connection will be used to
     * create and connect to the Apple AppStore in Mobile Center.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateCreatedResponseModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateCreatedResponseModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreateCreatedResponseModel} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(body: models.BodyModelModelModelModelModelModelModelModelModelModelModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateCreatedResponseModel>;
    create(body: models.BodyModelModelModelModelModelModelModelModelModelModelModel, ownerName: string, appName: string, callback: ServiceCallback<models.CreateCreatedResponseModel>): void;
    create(body: models.BodyModelModelModelModelModelModelModelModelModelModelModel, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateCreatedResponseModel>): void;


    /**
     * Get all the store details from Storage store table for a particular
     * application.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponseItemModelModelModelModelModelModelModelModel[]>>;

    /**
     * Get all the store details from Storage store table for a particular
     * application.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponseItemModelModelModelModelModelModelModelModel[]>;
    list(ownerName: string, appName: string, callback: ServiceCallback<models.ListOKResponseItemModelModelModelModelModelModelModelModel[]>): void;
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponseItemModelModelModelModelModelModelModelModel[]>): void;
}

/**
 * @class
 * MissingSymbolGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface MissingSymbolGroups {


    /**
     * @summary Gets application level statistics for all missing symbol groups
     *
     * Gets application level statistics for all missing symbol groups
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InfoOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    infoWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InfoOKResponse>>;

    /**
     * @summary Gets application level statistics for all missing symbol groups
     *
     * Gets application level statistics for all missing symbol groups
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InfoOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InfoOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InfoOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    info(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InfoOKResponse>;
    info(ownerName: string, appName: string, callback: ServiceCallback<models.InfoOKResponse>): void;
    info(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InfoOKResponse>): void;


    /**
     * @summary Gets missing symbol crash group by its id
     *
     * Gets missing symbol crash group by its id
     *
     * @param {string} symbolGroupId missing symbol crash group id
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetOKResponseModelModelModelModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(symbolGroupId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponseModelModelModelModelModelModelModelModel>>;

    /**
     * @summary Gets missing symbol crash group by its id
     *
     * Gets missing symbol crash group by its id
     *
     * @param {string} symbolGroupId missing symbol crash group id
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetOKResponseModelModelModelModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetOKResponseModelModelModelModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      GetOKResponseModelModelModelModelModelModelModelModel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(symbolGroupId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponseModelModelModelModelModelModelModelModel>;
    get(symbolGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModelModel>): void;
    get(symbolGroupId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModelModel>): void;


    /**
     * @summary Gets top N (ordered by crash count) of crash groups by missing
     * symbol
     *
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     *
     * @param {number} top top N elements
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] query filter
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListOKResponseModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(top: number, ownerName: string, appName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponseModelModelModelModel>>;

    /**
     * @summary Gets top N (ordered by crash count) of crash groups by missing
     * symbol
     *
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     *
     * @param {number} top top N elements
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] query filter
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListOKResponseModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListOKResponseModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListOKResponseModelModelModelModel} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(top: number, ownerName: string, appName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponseModelModelModelModel>;
    list(top: number, ownerName: string, appName: string, callback: ServiceCallback<models.ListOKResponseModelModelModelModel>): void;
    list(top: number, ownerName: string, appName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponseModelModelModelModel>): void;
}

/**
 * @class
 * AppOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface AppOperations {


    /**
     * **Warning, this operation is not reversible.**
     *
     * A successful call to this API will permanently stop ingesting any logs
     * received via SDK by app_id, and cannot be restored. We advise caution when
     * using this API, it is designed to permanently disable an app_id.
     *
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    blockLogsWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * **Warning, this operation is not reversible.**
     *
     * A successful call to this API will permanently stop ingesting any logs
     * received via SDK by app_id, and cannot be restored. We advise caution when
     * using this API, it is designed to permanently disable an app_id.
     *
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    blockLogs(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    blockLogs(ownerName: string, appName: string, callback: ServiceCallback<string>): void;
    blockLogs(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * CodePushDeploymentUpload
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface CodePushDeploymentUpload {


    /**
     * Create a new CodePush release upload for the specified deployment
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateOKResponseModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(deploymentName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateOKResponseModelModel>>;

    /**
     * Create a new CodePush release upload for the specified deployment
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateOKResponseModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateOKResponseModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreateOKResponseModelModel} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(deploymentName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateOKResponseModelModel>;
    create(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<models.CreateOKResponseModelModel>): void;
    create(deploymentName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateOKResponseModelModel>): void;
}

/**
 * @class
 * CodePushDeploymentRelease
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface CodePushDeploymentRelease {


    /**
     * Rollback the latest or a specific release for an app deployment
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.label]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RollbackCreatedResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    rollbackWithHttpOperationResponse(deploymentName: string, ownerName: string, appName: string, options?: { label? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RollbackCreatedResponse>>;

    /**
     * Rollback the latest or a specific release for an app deployment
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.label]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RollbackCreatedResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RollbackCreatedResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RollbackCreatedResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    rollback(deploymentName: string, ownerName: string, appName: string, options?: { label? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.RollbackCreatedResponse>;
    rollback(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<models.RollbackCreatedResponse>): void;
    rollback(deploymentName: string, ownerName: string, appName: string, options: { label? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RollbackCreatedResponse>): void;
}

/**
 * @class
 * DeploymentReleases
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface DeploymentReleases {


    /**
     * Modifies a CodePush release metadata under the given Deployment
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} releaseLabel release label
     *
     * @param {object} release Release modification. All fields are optional and
     * only provided fields will get updated.
     *
     * @param {string} [release.targetBinaryRange]
     *
     * @param {string} [release.description]
     *
     * @param {boolean} [release.isDisabled]
     *
     * @param {boolean} [release.isMandatory]
     *
     * @param {number} [release.rollout]
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdateOKResponseModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(deploymentName: string, releaseLabel: string, release: models.ReleaseModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdateOKResponseModelModelModelModelModel>>;

    /**
     * Modifies a CodePush release metadata under the given Deployment
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} releaseLabel release label
     *
     * @param {object} release Release modification. All fields are optional and
     * only provided fields will get updated.
     *
     * @param {string} [release.targetBinaryRange]
     *
     * @param {string} [release.description]
     *
     * @param {boolean} [release.isDisabled]
     *
     * @param {boolean} [release.isMandatory]
     *
     * @param {number} [release.rollout]
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdateOKResponseModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdateOKResponseModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UpdateOKResponseModelModelModelModelModel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(deploymentName: string, releaseLabel: string, release: models.ReleaseModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdateOKResponseModelModelModelModelModel>;
    update(deploymentName: string, releaseLabel: string, release: models.ReleaseModel, ownerName: string, appName: string, callback: ServiceCallback<models.UpdateOKResponseModelModelModelModelModel>): void;
    update(deploymentName: string, releaseLabel: string, release: models.ReleaseModel, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdateOKResponseModelModelModelModelModel>): void;
}

/**
 * @class
 * CodePushDeploymentReleases
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface CodePushDeploymentReleases {


    /**
     * Clears a Deployment of releases
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deploymentName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Clears a Deployment of releases
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deploymentName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deploymentName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the history of releases on a Deployment
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deploymentName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponseItemModel[]>>;

    /**
     * Gets the history of releases on a Deployment
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deploymentName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponseItemModel[]>;
    get(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetOKResponseItemModel[]>): void;
    get(deploymentName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponseItemModel[]>): void;


    /**
     * Create a new CodePush release for the specified deployment
     *
     * @param {string} deploymentName deployment name
     *
     * @param {object} uploadedRelease The necessary information required to
     * download the bundle and being the release process.
     *
     * @param {object} uploadedRelease.releaseUpload The upload metadata from the
     * release initialization step.
     *
     * @param {uuid} uploadedRelease.releaseUpload.id The ID for the newly created
     * upload. It is going to be required later in the process.
     *
     * @param {string} uploadedRelease.releaseUpload.uploadDomain The URL domain
     * used to upload the release.
     *
     * @param {string} uploadedRelease.releaseUpload.token The URL encoded token
     * used for upload permissions.
     *
     * @param {string} uploadedRelease.targetBinaryVersion the binary version of
     * the application
     *
     * @param {string} [uploadedRelease.deploymentName] This specifies which
     * deployment you want to release the update to. Default is Staging.
     *
     * @param {string} [uploadedRelease.description] This provides an optional
     * "change log" for the deployment.
     *
     * @param {boolean} [uploadedRelease.disabled] This specifies whether an update
     * should be downloadable by end users or not.
     *
     * @param {boolean} [uploadedRelease.mandatory] This specifies whether the
     * update should be considered mandatory or not (e.g. it includes a critical
     * security fix).
     *
     * @param {boolean} [uploadedRelease.noDuplicateReleaseError] This specifies
     * that if the update is identical to the latest release on the deployment, the
     * CLI should generate a warning instead of an error.
     *
     * @param {number} [uploadedRelease.rollout] This specifies the percentage of
     * users (as an integer between 1 and 100) that should be eligible to receive
     * this update.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateCreatedResponseModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(deploymentName: string, uploadedRelease: models.UploadedRelease, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateCreatedResponseModelModelModel>>;

    /**
     * Create a new CodePush release for the specified deployment
     *
     * @param {string} deploymentName deployment name
     *
     * @param {object} uploadedRelease The necessary information required to
     * download the bundle and being the release process.
     *
     * @param {object} uploadedRelease.releaseUpload The upload metadata from the
     * release initialization step.
     *
     * @param {uuid} uploadedRelease.releaseUpload.id The ID for the newly created
     * upload. It is going to be required later in the process.
     *
     * @param {string} uploadedRelease.releaseUpload.uploadDomain The URL domain
     * used to upload the release.
     *
     * @param {string} uploadedRelease.releaseUpload.token The URL encoded token
     * used for upload permissions.
     *
     * @param {string} uploadedRelease.targetBinaryVersion the binary version of
     * the application
     *
     * @param {string} [uploadedRelease.deploymentName] This specifies which
     * deployment you want to release the update to. Default is Staging.
     *
     * @param {string} [uploadedRelease.description] This provides an optional
     * "change log" for the deployment.
     *
     * @param {boolean} [uploadedRelease.disabled] This specifies whether an update
     * should be downloadable by end users or not.
     *
     * @param {boolean} [uploadedRelease.mandatory] This specifies whether the
     * update should be considered mandatory or not (e.g. it includes a critical
     * security fix).
     *
     * @param {boolean} [uploadedRelease.noDuplicateReleaseError] This specifies
     * that if the update is identical to the latest release on the deployment, the
     * CLI should generate a warning instead of an error.
     *
     * @param {number} [uploadedRelease.rollout] This specifies the percentage of
     * users (as an integer between 1 and 100) that should be eligible to receive
     * this update.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateCreatedResponseModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateCreatedResponseModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreateCreatedResponseModelModelModel} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(deploymentName: string, uploadedRelease: models.UploadedRelease, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateCreatedResponseModelModelModel>;
    create(deploymentName: string, uploadedRelease: models.UploadedRelease, ownerName: string, appName: string, callback: ServiceCallback<models.CreateCreatedResponseModelModelModel>): void;
    create(deploymentName: string, uploadedRelease: models.UploadedRelease, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateCreatedResponseModelModelModel>): void;
}

/**
 * @class
 * CodePushDeployments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface CodePushDeployments {


    /**
     * Promote one release (default latest one) from one deployment to another
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} promoteDeploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.release] Release to be promoted, only needs to
     * provide optional fields, description, label, disabled, mandatory, rollout,
     * targetBinaryVersion
     *
     * @param {string} [options.release.targetBinaryRange]
     *
     * @param {string} [options.release.description]
     *
     * @param {boolean} [options.release.isDisabled]
     *
     * @param {boolean} [options.release.isMandatory]
     *
     * @param {number} [options.release.rollout]
     *
     * @param {string} [options.release.label]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PromoteOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    promoteWithHttpOperationResponse(deploymentName: string, promoteDeploymentName: string, ownerName: string, appName: string, options?: { release? : models.ReleaseModelModel, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PromoteOKResponse>>;

    /**
     * Promote one release (default latest one) from one deployment to another
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} promoteDeploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.release] Release to be promoted, only needs to
     * provide optional fields, description, label, disabled, mandatory, rollout,
     * targetBinaryVersion
     *
     * @param {string} [options.release.targetBinaryRange]
     *
     * @param {string} [options.release.description]
     *
     * @param {boolean} [options.release.isDisabled]
     *
     * @param {boolean} [options.release.isMandatory]
     *
     * @param {number} [options.release.rollout]
     *
     * @param {string} [options.release.label]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PromoteOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PromoteOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PromoteOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    promote(deploymentName: string, promoteDeploymentName: string, ownerName: string, appName: string, options?: { release? : models.ReleaseModelModel, customHeaders? : { [headerName: string]: string; } }): Promise<models.PromoteOKResponse>;
    promote(deploymentName: string, promoteDeploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<models.PromoteOKResponse>): void;
    promote(deploymentName: string, promoteDeploymentName: string, ownerName: string, appName: string, options: { release? : models.ReleaseModelModel, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PromoteOKResponse>): void;


    /**
     * Deletes a CodePush Deployment for the given app
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.body]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deploymentName: string, ownerName: string, appName: string, options?: { body? : any, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a CodePush Deployment for the given app
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.body]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deploymentName: string, ownerName: string, appName: string, options?: { body? : any, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deploymentName: string, ownerName: string, appName: string, options: { body? : any, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a CodePush Deployment for the given app
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetOKResponseModelModelModelModelModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deploymentName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponseModelModelModelModelModelModelModelModelModel>>;

    /**
     * Gets a CodePush Deployment for the given app
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetOKResponseModelModelModelModelModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetOKResponseModelModelModelModelModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      GetOKResponseModelModelModelModelModelModelModelModelModel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deploymentName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponseModelModelModelModelModelModelModelModelModel>;
    get(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModelModelModel>): void;
    get(deploymentName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModelModelModel>): void;


    /**
     * Modifies a CodePush Deployment for the given app
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(deploymentName: string, ownerName: string, appName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Modifies a CodePush Deployment for the given app
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(deploymentName: string, ownerName: string, appName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(deploymentName: string, ownerName: string, appName: string, name: string, callback: ServiceCallback<void>): void;
    update(deploymentName: string, ownerName: string, appName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of CodePush deployments for the given app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponseItemModelModelModelModelModelModelModelModelModelModelModel[]>>;

    /**
     * Gets a list of CodePush deployments for the given app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponseItemModelModelModelModelModelModelModelModelModelModelModel[]>;
    list(ownerName: string, appName: string, callback: ServiceCallback<models.ListOKResponseItemModelModelModelModelModelModelModelModelModelModelModel[]>): void;
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponseItemModelModelModelModelModelModelModelModelModelModelModel[]>): void;


    /**
     * Creates a CodePush Deployment for the given app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.key]
     *
     * @param {object} [options.latestRelease]
     *
     * @param {string} [options.latestRelease.targetBinaryRange]
     *
     * @param {string} [options.latestRelease.description]
     *
     * @param {boolean} [options.latestRelease.isDisabled]
     *
     * @param {boolean} [options.latestRelease.isMandatory]
     *
     * @param {number} [options.latestRelease.rollout]
     *
     * @param {string} [options.latestRelease.label]
     *
     * @param {string} [options.latestRelease.packageHash]
     *
     * @param {string} [options.latestRelease.blobUrl]
     *
     * @param {object} [options.latestRelease.diffPackageMap]
     *
     * @param {string} [options.latestRelease.originalDeployment] Set on 'Promote'
     *
     * @param {string} [options.latestRelease.originalLabel] Set on 'Promote' and
     * 'Rollback'
     *
     * @param {string} [options.latestRelease.releasedBy]
     *
     * @param {string} [options.latestRelease.releaseMethod] The release method is
     * unknown if unspecified. Possible values include: 'Upload', 'Promote',
     * 'Rollback'
     *
     * @param {number} [options.latestRelease.size]
     *
     * @param {number} [options.latestRelease.uploadTime]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateCreatedResponseModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(ownerName: string, appName: string, name: string, options?: { key? : string, latestRelease? : models.DeploymentLatestReleaseModel, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateCreatedResponseModelModelModelModel>>;

    /**
     * Creates a CodePush Deployment for the given app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.key]
     *
     * @param {object} [options.latestRelease]
     *
     * @param {string} [options.latestRelease.targetBinaryRange]
     *
     * @param {string} [options.latestRelease.description]
     *
     * @param {boolean} [options.latestRelease.isDisabled]
     *
     * @param {boolean} [options.latestRelease.isMandatory]
     *
     * @param {number} [options.latestRelease.rollout]
     *
     * @param {string} [options.latestRelease.label]
     *
     * @param {string} [options.latestRelease.packageHash]
     *
     * @param {string} [options.latestRelease.blobUrl]
     *
     * @param {object} [options.latestRelease.diffPackageMap]
     *
     * @param {string} [options.latestRelease.originalDeployment] Set on 'Promote'
     *
     * @param {string} [options.latestRelease.originalLabel] Set on 'Promote' and
     * 'Rollback'
     *
     * @param {string} [options.latestRelease.releasedBy]
     *
     * @param {string} [options.latestRelease.releaseMethod] The release method is
     * unknown if unspecified. Possible values include: 'Upload', 'Promote',
     * 'Rollback'
     *
     * @param {number} [options.latestRelease.size]
     *
     * @param {number} [options.latestRelease.uploadTime]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateCreatedResponseModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateCreatedResponseModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreateCreatedResponseModelModelModelModel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(ownerName: string, appName: string, name: string, options?: { key? : string, latestRelease? : models.DeploymentLatestReleaseModel, customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateCreatedResponseModelModelModelModel>;
    create(ownerName: string, appName: string, name: string, callback: ServiceCallback<models.CreateCreatedResponseModelModelModelModel>): void;
    create(ownerName: string, appName: string, name: string, options: { key? : string, latestRelease? : models.DeploymentLatestReleaseModel, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateCreatedResponseModelModelModelModel>): void;
}

/**
 * @class
 * CodePushDeploymentMetrics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface CodePushDeploymentMetrics {


    /**
     * Gets all releases metrics for specified Deployment
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deploymentName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponseItemModelModel[]>>;

    /**
     * Gets all releases metrics for specified Deployment
     *
     * @param {string} deploymentName deployment name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deploymentName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponseItemModelModel[]>;
    get(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetOKResponseItemModelModel[]>): void;
    get(deploymentName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponseItemModelModel[]>): void;
}

/**
 * @class
 * Data
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Data {


    /**
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getResourceProvisioningWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getResourceProvisioning(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getResourceProvisioning(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    getResourceProvisioning(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Creates Cosmos DB or attaches an existing one
     *
     * @param {string} acAuthorizationARM
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.provisionDatabaseParameters]
     *
     * @param {string} [options.provisionDatabaseParameters.subscriptionId]
     *
     * @param {string}
     * [options.provisionDatabaseParameters.databaseConnectionString]
     *
     * @param {string} [options.provisionDatabaseParameters.resourceRegion]
     * Possible values include: 'East Asia', 'Southeast Asia', 'Australia Central',
     * 'Australia Central 2', 'Australia East', 'Australia Southeast', 'Brazil
     * South', 'Canada Central', 'Canada East', 'Central India', 'South India',
     * 'West India', 'North Europe', 'West Europe', 'France Central', 'France
     * South', 'Germany Central', 'Germany Northeast', 'Japan East', 'Japan West',
     * 'Korea Central', 'Korea South', 'South Africa North', 'South Africa West',
     * 'UK South', 'UK West', 'Central US', 'East US', 'East US 2', 'US Gov
     * Arizona', 'US Gov Texas', 'North Central US', 'South Central US', 'West US',
     * 'West US 2', 'West Central US'
     *
     * @param {string} [options.provisionDatabaseParameters.database]
     *
     * @param {string} [options.provisionDatabaseParameters.collection]
     *
     * @param {number} [options.provisionDatabaseParameters.requestUnits]
     *
     * @param {string} [options.provisionDatabaseParameters.accountName]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    postResourceProvisioningWithHttpOperationResponse(acAuthorizationARM: string, ownerName: string, appName: string, options?: { provisionDatabaseParameters? : models.ProvisionDatabaseParameters, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Creates Cosmos DB or attaches an existing one
     *
     * @param {string} acAuthorizationARM
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.provisionDatabaseParameters]
     *
     * @param {string} [options.provisionDatabaseParameters.subscriptionId]
     *
     * @param {string}
     * [options.provisionDatabaseParameters.databaseConnectionString]
     *
     * @param {string} [options.provisionDatabaseParameters.resourceRegion]
     * Possible values include: 'East Asia', 'Southeast Asia', 'Australia Central',
     * 'Australia Central 2', 'Australia East', 'Australia Southeast', 'Brazil
     * South', 'Canada Central', 'Canada East', 'Central India', 'South India',
     * 'West India', 'North Europe', 'West Europe', 'France Central', 'France
     * South', 'Germany Central', 'Germany Northeast', 'Japan East', 'Japan West',
     * 'Korea Central', 'Korea South', 'South Africa North', 'South Africa West',
     * 'UK South', 'UK West', 'Central US', 'East US', 'East US 2', 'US Gov
     * Arizona', 'US Gov Texas', 'North Central US', 'South Central US', 'West US',
     * 'West US 2', 'West Central US'
     *
     * @param {string} [options.provisionDatabaseParameters.database]
     *
     * @param {string} [options.provisionDatabaseParameters.collection]
     *
     * @param {number} [options.provisionDatabaseParameters.requestUnits]
     *
     * @param {string} [options.provisionDatabaseParameters.accountName]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    postResourceProvisioning(acAuthorizationARM: string, ownerName: string, appName: string, options?: { provisionDatabaseParameters? : models.ProvisionDatabaseParameters, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    postResourceProvisioning(acAuthorizationARM: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    postResourceProvisioning(acAuthorizationARM: string, ownerName: string, appName: string, options: { provisionDatabaseParameters? : models.ProvisionDatabaseParameters, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Gets general data about the provisioned database
     *
     * @param {string} acAuthorizationARM ARM access token.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getOverviewWithHttpOperationResponse(acAuthorizationARM: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Gets general data about the provisioned database
     *
     * @param {string} acAuthorizationARM ARM access token.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getOverview(acAuthorizationARM: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getOverview(acAuthorizationARM: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    getOverview(acAuthorizationARM: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Checks that the Azure Cosmos DB account name already exists. A
     * valid account name may contain only lowercase letters, numbers, and the '-'
     * character, and must be between 3 and 31 characters.
     *
     * @param {string} acAuthorizationARM ARM token
     *
     * @param {string} accountName Account Name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNameExistsWithHttpOperationResponse(acAuthorizationARM: string, accountName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * @summary Checks that the Azure Cosmos DB account name already exists. A
     * valid account name may contain only lowercase letters, numbers, and the '-'
     * character, and must be between 3 and 31 characters.
     *
     * @param {string} acAuthorizationARM ARM token
     *
     * @param {string} accountName Account Name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNameExists(acAuthorizationARM: string, accountName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    checkNameExists(acAuthorizationARM: string, accountName: string, ownerName: string, appName: string, callback: ServiceCallback<stream.Readable>): void;
    checkNameExists(acAuthorizationARM: string, accountName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;
}

/**
 * @class
 * CrashGroupsOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface CrashGroupsOperations {


    /**
     * Gets a stacktrace for a specific crash.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.groupingOnly] true if the stacktrace should be
     * only the relevant thread / exception. Default is false
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Stacktrace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getStacktraceWithHttpOperationResponse(crashGroupId: string, ownerName: string, appName: string, options?: { groupingOnly? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Stacktrace>>;

    /**
     * Gets a stacktrace for a specific crash.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.groupingOnly] true if the stacktrace should be
     * only the relevant thread / exception. Default is false
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Stacktrace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Stacktrace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Stacktrace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getStacktrace(crashGroupId: string, ownerName: string, appName: string, options?: { groupingOnly? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.Stacktrace>;
    getStacktrace(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Stacktrace>): void;
    getStacktrace(crashGroupId: string, ownerName: string, appName: string, options: { groupingOnly? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Stacktrace>): void;


    /**
     * Gets a specific group.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetOKResponseModelModelModelModelModelModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(crashGroupId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponseModelModelModelModelModelModelModelModelModelModel>>;

    /**
     * Gets a specific group.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetOKResponseModelModelModelModelModelModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetOKResponseModelModelModelModelModelModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      GetOKResponseModelModelModelModelModelModelModelModelModelModel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(crashGroupId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponseModelModelModelModelModelModelModelModelModelModel>;
    get(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModelModelModelModel>): void;
    get(crashGroupId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModelModelModelModel>): void;


    /**
     * Updates a group.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.status]
     *
     * @param {string} [options.annotation]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdateOKResponseModelModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(crashGroupId: string, ownerName: string, appName: string, options?: { status? : any, annotation? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdateOKResponseModelModelModelModelModelModel>>;

    /**
     * Updates a group.
     *
     * @param {string} crashGroupId id of a specific group
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.status]
     *
     * @param {string} [options.annotation]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdateOKResponseModelModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdateOKResponseModelModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      UpdateOKResponseModelModelModelModelModelModel} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(crashGroupId: string, ownerName: string, appName: string, options?: { status? : any, annotation? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdateOKResponseModelModelModelModelModelModel>;
    update(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.UpdateOKResponseModelModelModelModelModelModel>): void;
    update(crashGroupId: string, ownerName: string, appName: string, options: { status? : any, annotation? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdateOKResponseModelModelModelModelModelModel>): void;


    /**
     * Gets a list of crash groups and whether the list contains all available
     * groups.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.lastOccurrenceFrom] Earliest date when the last time
     * a crash occured in a crash group
     *
     * @param {date} [options.lastOccurrenceTo] Latest date when the last time a
     * crash occured in a crash group
     *
     * @param {string} [options.appVersion] version
     *
     * @param {string} [options.groupType] Possible values include: 'GroupType1',
     * 'GroupType2'
     *
     * @param {string} [options.groupStatus] Possible values include: 'open',
     * 'closed', 'ignored'
     *
     * @param {string} [options.groupTextSearch] A freetext search that matches in
     * crash, crash types, crash stack_traces and crash user
     *
     * @param {string} [options.orderby] the OData-like $orderby argument. Possible
     * values include: 'last_occurrence asc', 'last_occurrence desc', 'count asc',
     * 'count desc', 'display_id asc', 'display_id desc', 'impacted_users asc',
     * 'impacted_users desc'
     *
     * @param {string} [options.continuationToken] Cassandra request continuation
     * token. The token is used for pagination.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListOKResponseModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(ownerName: string, appName: string, options?: { lastOccurrenceFrom? : Date, lastOccurrenceTo? : Date, appVersion? : string, groupType? : string, groupStatus? : string, groupTextSearch? : string, orderby? : string, continuationToken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOKResponseModelModelModelModelModel>>;

    /**
     * Gets a list of crash groups and whether the list contains all available
     * groups.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.lastOccurrenceFrom] Earliest date when the last time
     * a crash occured in a crash group
     *
     * @param {date} [options.lastOccurrenceTo] Latest date when the last time a
     * crash occured in a crash group
     *
     * @param {string} [options.appVersion] version
     *
     * @param {string} [options.groupType] Possible values include: 'GroupType1',
     * 'GroupType2'
     *
     * @param {string} [options.groupStatus] Possible values include: 'open',
     * 'closed', 'ignored'
     *
     * @param {string} [options.groupTextSearch] A freetext search that matches in
     * crash, crash types, crash stack_traces and crash user
     *
     * @param {string} [options.orderby] the OData-like $orderby argument. Possible
     * values include: 'last_occurrence asc', 'last_occurrence desc', 'count asc',
     * 'count desc', 'display_id asc', 'display_id desc', 'impacted_users asc',
     * 'impacted_users desc'
     *
     * @param {string} [options.continuationToken] Cassandra request continuation
     * token. The token is used for pagination.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListOKResponseModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListOKResponseModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListOKResponseModelModelModelModelModel} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(ownerName: string, appName: string, options?: { lastOccurrenceFrom? : Date, lastOccurrenceTo? : Date, appVersion? : string, groupType? : string, groupStatus? : string, groupTextSearch? : string, orderby? : string, continuationToken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOKResponseModelModelModelModelModel>;
    list(ownerName: string, appName: string, callback: ServiceCallback<models.ListOKResponseModelModelModelModelModel>): void;
    list(ownerName: string, appName: string, options: { lastOccurrenceFrom? : Date, lastOccurrenceTo? : Date, appVersion? : string, groupType? : string, groupStatus? : string, groupTextSearch? : string, orderby? : string, continuationToken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOKResponseModelModelModelModelModel>): void;
}

/**
 * @class
 * Commits
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Commits {


    /**
     * Returns commit information for a batch of shas
     *
     * @param {array} hashes A collection of commit SHAs comma-delimited
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByShaListWithHttpOperationResponse(hashes: string[], ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListByShaListOKResponseItem[]>>;

    /**
     * Returns commit information for a batch of shas
     *
     * @param {array} hashes A collection of commit SHAs comma-delimited
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByShaList(hashes: string[], ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListByShaListOKResponseItem[]>;
    listByShaList(hashes: string[], ownerName: string, appName: string, callback: ServiceCallback<models.ListByShaListOKResponseItem[]>): void;
    listByShaList(hashes: string[], ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListByShaListOKResponseItem[]>): void;
}

/**
 * @class
 * BugTracker
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface BugTracker {


    /**
     * Get project issue related to a crash group
     *
     * @param {string} crashGroupId CrashGroup Id
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetRepoIssueFromCrashOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRepoIssueFromCrashWithHttpOperationResponse(crashGroupId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetRepoIssueFromCrashOKResponse>>;

    /**
     * Get project issue related to a crash group
     *
     * @param {string} crashGroupId CrashGroup Id
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetRepoIssueFromCrashOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetRepoIssueFromCrashOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetRepoIssueFromCrashOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRepoIssueFromCrash(crashGroupId: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetRepoIssueFromCrashOKResponse>;
    getRepoIssueFromCrash(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetRepoIssueFromCrashOKResponse>): void;
    getRepoIssueFromCrash(crashGroupId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetRepoIssueFromCrashOKResponse>): void;


    /**
     * Get bug tracker settings for a particular app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetSettingsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSettingsWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetSettingsOKResponse>>;

    /**
     * Get bug tracker settings for a particular app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetSettingsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetSettingsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetSettingsOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSettings(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetSettingsOKResponse>;
    getSettings(ownerName: string, appName: string, callback: ServiceCallback<models.GetSettingsOKResponse>): void;
    getSettings(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetSettingsOKResponse>): void;
}

/**
 * @class
 * BranchConfigurations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface BranchConfigurations {


    /**
     * Gets the branch configuration
     *
     * @param {string} branch The branch name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(branch: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModel>>;

    /**
     * Gets the branch configuration
     *
     * @param {string} branch The branch name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(branch: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModel>;
    get(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModel>): void;
    get(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModel>): void;


    /**
     * Configures the branch for build
     *
     * @param {string} branch The branch name
     *
     * @param {object} params Parameters of the configuration
     *
     * @param {string} [params.trigger] Possible values include: 'continous',
     * 'continuous', 'manual'
     *
     * @param {boolean} [params.testsEnabled]
     *
     * @param {boolean} [params.badgeIsEnabled]
     *
     * @param {boolean} [params.signed]
     *
     * @param {string} [params.cloneFromBranch] A configured branch name to clone
     * from. If provided, all other parameters will be ignored. Only supported in
     * POST requests.
     *
     * @param {object} [params.toolsets] The branch build configuration for each
     * toolset
     *
     * @param {object} [params.toolsets.xcode] Build configuration when Xcode is
     * part of the build steps
     *
     * @param {string} [params.toolsets.xcode.projectOrWorkspacePath] Xcode
     * project/workspace path
     *
     * @param {string} [params.toolsets.xcode.podfilePath] Path to CococaPods file,
     * if present
     *
     * @param {string} [params.toolsets.xcode.cartfilePath] Path to Carthage file,
     * if present
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileEncoded]
     *
     * @param {string} [params.toolsets.xcode.certificateEncoded]
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileFileId]
     *
     * @param {string} [params.toolsets.xcode.certificateFileId]
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileUploadId]
     *
     * @param {array} [params.toolsets.xcode.appExtensionProvisioningProfileFiles]
     *
     * @param {string} [params.toolsets.xcode.certificateUploadId]
     *
     * @param {string} [params.toolsets.xcode.certificatePassword]
     *
     * @param {string} [params.toolsets.xcode.scheme]
     *
     * @param {string} [params.toolsets.xcode.xcodeVersion] Xcode version used to
     * build. Available versions can be found in "/xcode_versions" API. Default is
     * latest stable version, at the time when the configuration is set.
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileFilename]
     *
     * @param {string} [params.toolsets.xcode.certificateFilename]
     *
     * @param {string} [params.toolsets.xcode.teamId]
     *
     * @param {boolean} [params.toolsets.xcode.automaticSigning]
     *
     * @param {string} [params.toolsets.xcode.xcodeProjectSha] The selected
     * pbxproject hash to the repositroy
     *
     * @param {string} [params.toolsets.xcode.archiveConfiguration] The build
     * configuration of the target to archive
     *
     * @param {string} [params.toolsets.xcode.targetToArchive] The target id of the
     * selected scheme to archive
     *
     * @param {boolean} [params.toolsets.xcode.forceLegacyBuildSystem] Setting this
     * to true forces the build to use Xcode legacy build system. Otherwise, the
     * setting from workspace settings is used.
     * By default new build system is used if workspace setting is not committed to
     * the repository. Only used for iOS React Native app, with Xcode 10.
     *
     *
     * @param {object} [params.toolsets.javascript] Build configuration when React
     * Native, or other JavaScript tech, is part of the build steps
     *
     * @param {string} [params.toolsets.javascript.packageJsonPath] Path to
     * package.json file for the main project, e.g. "package.json" or
     * "myapp/package.json"
     *
     * @param {boolean} [params.toolsets.javascript.runTests] Whether to run Jest
     * unit tests, via npm test, during the build
     *
     * @param {string} [params.toolsets.javascript.reactNativeVersion] Version of
     * React Native from package.json files
     *
     * @param {object} [params.toolsets.xamarin] Build configuration for Xamarin
     * projects
     *
     * @param {string} [params.toolsets.xamarin.slnPath]
     *
     * @param {boolean} [params.toolsets.xamarin.isSimBuild]
     *
     * @param {string} [params.toolsets.xamarin.args]
     *
     * @param {string} [params.toolsets.xamarin.configuration]
     *
     * @param {string} [params.toolsets.xamarin.p12File]
     *
     * @param {string} [params.toolsets.xamarin.p12Pwd]
     *
     * @param {string} [params.toolsets.xamarin.provProfile]
     *
     * @param {string} [params.toolsets.xamarin.monoVersion]
     *
     * @param {string} [params.toolsets.xamarin.sdkBundle]
     *
     * @param {string} [params.toolsets.xamarin.symlink] Symlink of the SDK Bundle
     * and Mono installation.
     * The build will use the associated Mono bundled with related Xamarin SDK. If
     * both symlink and monoVersion or sdkBundle are passed, the symlink is taking
     * precedence. If non-existing symlink is passed, the current stable Mono
     * version will be configured for building.
     *
     *
     * @param {object} [params.toolsets.android] Build configuration for Android
     * projects
     *
     * @param {string} [params.toolsets.android.gradleWrapperPath] Path to the
     * Gradle wrapper script
     *
     * @param {string} [params.toolsets.android.module] The Gradle module to build
     *
     * @param {string} [params.toolsets.android.buildVariant] The Android build
     * variant to build
     *
     * @param {boolean} [params.toolsets.android.runTests] Whether to run unit
     * tests during the build (default)
     *
     * @param {boolean} [params.toolsets.android.runLint] Whether to run lint
     * checks during the build (default)
     *
     * @param {boolean} [params.toolsets.android.isRoot] Whether it is the root
     * module or not
     *
     * @param {boolean} [params.toolsets.android.automaticSigning] Whether to apply
     * automatic signing or not
     *
     * @param {string} [params.toolsets.android.keystorePassword] The password of
     * the keystore
     *
     * @param {string} [params.toolsets.android.keyAlias] The key alias
     *
     * @param {string} [params.toolsets.android.keyPassword] The key password
     *
     * @param {string} [params.toolsets.android.keystoreFilename] The name of the
     * keystore file
     *
     * @param {string} [params.toolsets.android.keystoreEncoded] The keystore
     * encoded value
     *
     * @param {object} [params.artifactVersioning] The versioning configuration for
     * artifacts built for this branch
     *
     * @param {string} [params.artifactVersioning.buildNumberFormat] Possible
     * values include: 'buildId', 'timestamp'
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateOKResponseModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(branch: string, params: models.Params, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateOKResponseModelModelModel>>;

    /**
     * Configures the branch for build
     *
     * @param {string} branch The branch name
     *
     * @param {object} params Parameters of the configuration
     *
     * @param {string} [params.trigger] Possible values include: 'continous',
     * 'continuous', 'manual'
     *
     * @param {boolean} [params.testsEnabled]
     *
     * @param {boolean} [params.badgeIsEnabled]
     *
     * @param {boolean} [params.signed]
     *
     * @param {string} [params.cloneFromBranch] A configured branch name to clone
     * from. If provided, all other parameters will be ignored. Only supported in
     * POST requests.
     *
     * @param {object} [params.toolsets] The branch build configuration for each
     * toolset
     *
     * @param {object} [params.toolsets.xcode] Build configuration when Xcode is
     * part of the build steps
     *
     * @param {string} [params.toolsets.xcode.projectOrWorkspacePath] Xcode
     * project/workspace path
     *
     * @param {string} [params.toolsets.xcode.podfilePath] Path to CococaPods file,
     * if present
     *
     * @param {string} [params.toolsets.xcode.cartfilePath] Path to Carthage file,
     * if present
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileEncoded]
     *
     * @param {string} [params.toolsets.xcode.certificateEncoded]
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileFileId]
     *
     * @param {string} [params.toolsets.xcode.certificateFileId]
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileUploadId]
     *
     * @param {array} [params.toolsets.xcode.appExtensionProvisioningProfileFiles]
     *
     * @param {string} [params.toolsets.xcode.certificateUploadId]
     *
     * @param {string} [params.toolsets.xcode.certificatePassword]
     *
     * @param {string} [params.toolsets.xcode.scheme]
     *
     * @param {string} [params.toolsets.xcode.xcodeVersion] Xcode version used to
     * build. Available versions can be found in "/xcode_versions" API. Default is
     * latest stable version, at the time when the configuration is set.
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileFilename]
     *
     * @param {string} [params.toolsets.xcode.certificateFilename]
     *
     * @param {string} [params.toolsets.xcode.teamId]
     *
     * @param {boolean} [params.toolsets.xcode.automaticSigning]
     *
     * @param {string} [params.toolsets.xcode.xcodeProjectSha] The selected
     * pbxproject hash to the repositroy
     *
     * @param {string} [params.toolsets.xcode.archiveConfiguration] The build
     * configuration of the target to archive
     *
     * @param {string} [params.toolsets.xcode.targetToArchive] The target id of the
     * selected scheme to archive
     *
     * @param {boolean} [params.toolsets.xcode.forceLegacyBuildSystem] Setting this
     * to true forces the build to use Xcode legacy build system. Otherwise, the
     * setting from workspace settings is used.
     * By default new build system is used if workspace setting is not committed to
     * the repository. Only used for iOS React Native app, with Xcode 10.
     *
     *
     * @param {object} [params.toolsets.javascript] Build configuration when React
     * Native, or other JavaScript tech, is part of the build steps
     *
     * @param {string} [params.toolsets.javascript.packageJsonPath] Path to
     * package.json file for the main project, e.g. "package.json" or
     * "myapp/package.json"
     *
     * @param {boolean} [params.toolsets.javascript.runTests] Whether to run Jest
     * unit tests, via npm test, during the build
     *
     * @param {string} [params.toolsets.javascript.reactNativeVersion] Version of
     * React Native from package.json files
     *
     * @param {object} [params.toolsets.xamarin] Build configuration for Xamarin
     * projects
     *
     * @param {string} [params.toolsets.xamarin.slnPath]
     *
     * @param {boolean} [params.toolsets.xamarin.isSimBuild]
     *
     * @param {string} [params.toolsets.xamarin.args]
     *
     * @param {string} [params.toolsets.xamarin.configuration]
     *
     * @param {string} [params.toolsets.xamarin.p12File]
     *
     * @param {string} [params.toolsets.xamarin.p12Pwd]
     *
     * @param {string} [params.toolsets.xamarin.provProfile]
     *
     * @param {string} [params.toolsets.xamarin.monoVersion]
     *
     * @param {string} [params.toolsets.xamarin.sdkBundle]
     *
     * @param {string} [params.toolsets.xamarin.symlink] Symlink of the SDK Bundle
     * and Mono installation.
     * The build will use the associated Mono bundled with related Xamarin SDK. If
     * both symlink and monoVersion or sdkBundle are passed, the symlink is taking
     * precedence. If non-existing symlink is passed, the current stable Mono
     * version will be configured for building.
     *
     *
     * @param {object} [params.toolsets.android] Build configuration for Android
     * projects
     *
     * @param {string} [params.toolsets.android.gradleWrapperPath] Path to the
     * Gradle wrapper script
     *
     * @param {string} [params.toolsets.android.module] The Gradle module to build
     *
     * @param {string} [params.toolsets.android.buildVariant] The Android build
     * variant to build
     *
     * @param {boolean} [params.toolsets.android.runTests] Whether to run unit
     * tests during the build (default)
     *
     * @param {boolean} [params.toolsets.android.runLint] Whether to run lint
     * checks during the build (default)
     *
     * @param {boolean} [params.toolsets.android.isRoot] Whether it is the root
     * module or not
     *
     * @param {boolean} [params.toolsets.android.automaticSigning] Whether to apply
     * automatic signing or not
     *
     * @param {string} [params.toolsets.android.keystorePassword] The password of
     * the keystore
     *
     * @param {string} [params.toolsets.android.keyAlias] The key alias
     *
     * @param {string} [params.toolsets.android.keyPassword] The key password
     *
     * @param {string} [params.toolsets.android.keystoreFilename] The name of the
     * keystore file
     *
     * @param {string} [params.toolsets.android.keystoreEncoded] The keystore
     * encoded value
     *
     * @param {object} [params.artifactVersioning] The versioning configuration for
     * artifacts built for this branch
     *
     * @param {string} [params.artifactVersioning.buildNumberFormat] Possible
     * values include: 'buildId', 'timestamp'
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateOKResponseModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateOKResponseModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreateOKResponseModelModelModel} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(branch: string, params: models.Params, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateOKResponseModelModelModel>;
    create(branch: string, params: models.Params, ownerName: string, appName: string, callback: ServiceCallback<models.CreateOKResponseModelModelModel>): void;
    create(branch: string, params: models.Params, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateOKResponseModelModelModel>): void;


    /**
     * Reconfigures the branch for build
     *
     * @param {string} branch The branch name
     *
     * @param {object} params Parameters of the configuration
     *
     * @param {string} [params.trigger] Possible values include: 'continous',
     * 'continuous', 'manual'
     *
     * @param {boolean} [params.testsEnabled]
     *
     * @param {boolean} [params.badgeIsEnabled]
     *
     * @param {boolean} [params.signed]
     *
     * @param {string} [params.cloneFromBranch] A configured branch name to clone
     * from. If provided, all other parameters will be ignored. Only supported in
     * POST requests.
     *
     * @param {object} [params.toolsets] The branch build configuration for each
     * toolset
     *
     * @param {object} [params.toolsets.xcode] Build configuration when Xcode is
     * part of the build steps
     *
     * @param {string} [params.toolsets.xcode.projectOrWorkspacePath] Xcode
     * project/workspace path
     *
     * @param {string} [params.toolsets.xcode.podfilePath] Path to CococaPods file,
     * if present
     *
     * @param {string} [params.toolsets.xcode.cartfilePath] Path to Carthage file,
     * if present
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileEncoded]
     *
     * @param {string} [params.toolsets.xcode.certificateEncoded]
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileFileId]
     *
     * @param {string} [params.toolsets.xcode.certificateFileId]
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileUploadId]
     *
     * @param {array} [params.toolsets.xcode.appExtensionProvisioningProfileFiles]
     *
     * @param {string} [params.toolsets.xcode.certificateUploadId]
     *
     * @param {string} [params.toolsets.xcode.certificatePassword]
     *
     * @param {string} [params.toolsets.xcode.scheme]
     *
     * @param {string} [params.toolsets.xcode.xcodeVersion] Xcode version used to
     * build. Available versions can be found in "/xcode_versions" API. Default is
     * latest stable version, at the time when the configuration is set.
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileFilename]
     *
     * @param {string} [params.toolsets.xcode.certificateFilename]
     *
     * @param {string} [params.toolsets.xcode.teamId]
     *
     * @param {boolean} [params.toolsets.xcode.automaticSigning]
     *
     * @param {string} [params.toolsets.xcode.xcodeProjectSha] The selected
     * pbxproject hash to the repositroy
     *
     * @param {string} [params.toolsets.xcode.archiveConfiguration] The build
     * configuration of the target to archive
     *
     * @param {string} [params.toolsets.xcode.targetToArchive] The target id of the
     * selected scheme to archive
     *
     * @param {boolean} [params.toolsets.xcode.forceLegacyBuildSystem] Setting this
     * to true forces the build to use Xcode legacy build system. Otherwise, the
     * setting from workspace settings is used.
     * By default new build system is used if workspace setting is not committed to
     * the repository. Only used for iOS React Native app, with Xcode 10.
     *
     *
     * @param {object} [params.toolsets.javascript] Build configuration when React
     * Native, or other JavaScript tech, is part of the build steps
     *
     * @param {string} [params.toolsets.javascript.packageJsonPath] Path to
     * package.json file for the main project, e.g. "package.json" or
     * "myapp/package.json"
     *
     * @param {boolean} [params.toolsets.javascript.runTests] Whether to run Jest
     * unit tests, via npm test, during the build
     *
     * @param {string} [params.toolsets.javascript.reactNativeVersion] Version of
     * React Native from package.json files
     *
     * @param {object} [params.toolsets.xamarin] Build configuration for Xamarin
     * projects
     *
     * @param {string} [params.toolsets.xamarin.slnPath]
     *
     * @param {boolean} [params.toolsets.xamarin.isSimBuild]
     *
     * @param {string} [params.toolsets.xamarin.args]
     *
     * @param {string} [params.toolsets.xamarin.configuration]
     *
     * @param {string} [params.toolsets.xamarin.p12File]
     *
     * @param {string} [params.toolsets.xamarin.p12Pwd]
     *
     * @param {string} [params.toolsets.xamarin.provProfile]
     *
     * @param {string} [params.toolsets.xamarin.monoVersion]
     *
     * @param {string} [params.toolsets.xamarin.sdkBundle]
     *
     * @param {string} [params.toolsets.xamarin.symlink] Symlink of the SDK Bundle
     * and Mono installation.
     * The build will use the associated Mono bundled with related Xamarin SDK. If
     * both symlink and monoVersion or sdkBundle are passed, the symlink is taking
     * precedence. If non-existing symlink is passed, the current stable Mono
     * version will be configured for building.
     *
     *
     * @param {object} [params.toolsets.android] Build configuration for Android
     * projects
     *
     * @param {string} [params.toolsets.android.gradleWrapperPath] Path to the
     * Gradle wrapper script
     *
     * @param {string} [params.toolsets.android.module] The Gradle module to build
     *
     * @param {string} [params.toolsets.android.buildVariant] The Android build
     * variant to build
     *
     * @param {boolean} [params.toolsets.android.runTests] Whether to run unit
     * tests during the build (default)
     *
     * @param {boolean} [params.toolsets.android.runLint] Whether to run lint
     * checks during the build (default)
     *
     * @param {boolean} [params.toolsets.android.isRoot] Whether it is the root
     * module or not
     *
     * @param {boolean} [params.toolsets.android.automaticSigning] Whether to apply
     * automatic signing or not
     *
     * @param {string} [params.toolsets.android.keystorePassword] The password of
     * the keystore
     *
     * @param {string} [params.toolsets.android.keyAlias] The key alias
     *
     * @param {string} [params.toolsets.android.keyPassword] The key password
     *
     * @param {string} [params.toolsets.android.keystoreFilename] The name of the
     * keystore file
     *
     * @param {string} [params.toolsets.android.keystoreEncoded] The keystore
     * encoded value
     *
     * @param {object} [params.artifactVersioning] The versioning configuration for
     * artifacts built for this branch
     *
     * @param {string} [params.artifactVersioning.buildNumberFormat] Possible
     * values include: 'buildId', 'timestamp'
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdateOKResponseModelModelModelModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(branch: string, params: models.Params, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdateOKResponseModelModelModelModelModelModelModelModel>>;

    /**
     * Reconfigures the branch for build
     *
     * @param {string} branch The branch name
     *
     * @param {object} params Parameters of the configuration
     *
     * @param {string} [params.trigger] Possible values include: 'continous',
     * 'continuous', 'manual'
     *
     * @param {boolean} [params.testsEnabled]
     *
     * @param {boolean} [params.badgeIsEnabled]
     *
     * @param {boolean} [params.signed]
     *
     * @param {string} [params.cloneFromBranch] A configured branch name to clone
     * from. If provided, all other parameters will be ignored. Only supported in
     * POST requests.
     *
     * @param {object} [params.toolsets] The branch build configuration for each
     * toolset
     *
     * @param {object} [params.toolsets.xcode] Build configuration when Xcode is
     * part of the build steps
     *
     * @param {string} [params.toolsets.xcode.projectOrWorkspacePath] Xcode
     * project/workspace path
     *
     * @param {string} [params.toolsets.xcode.podfilePath] Path to CococaPods file,
     * if present
     *
     * @param {string} [params.toolsets.xcode.cartfilePath] Path to Carthage file,
     * if present
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileEncoded]
     *
     * @param {string} [params.toolsets.xcode.certificateEncoded]
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileFileId]
     *
     * @param {string} [params.toolsets.xcode.certificateFileId]
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileUploadId]
     *
     * @param {array} [params.toolsets.xcode.appExtensionProvisioningProfileFiles]
     *
     * @param {string} [params.toolsets.xcode.certificateUploadId]
     *
     * @param {string} [params.toolsets.xcode.certificatePassword]
     *
     * @param {string} [params.toolsets.xcode.scheme]
     *
     * @param {string} [params.toolsets.xcode.xcodeVersion] Xcode version used to
     * build. Available versions can be found in "/xcode_versions" API. Default is
     * latest stable version, at the time when the configuration is set.
     *
     * @param {string} [params.toolsets.xcode.provisioningProfileFilename]
     *
     * @param {string} [params.toolsets.xcode.certificateFilename]
     *
     * @param {string} [params.toolsets.xcode.teamId]
     *
     * @param {boolean} [params.toolsets.xcode.automaticSigning]
     *
     * @param {string} [params.toolsets.xcode.xcodeProjectSha] The selected
     * pbxproject hash to the repositroy
     *
     * @param {string} [params.toolsets.xcode.archiveConfiguration] The build
     * configuration of the target to archive
     *
     * @param {string} [params.toolsets.xcode.targetToArchive] The target id of the
     * selected scheme to archive
     *
     * @param {boolean} [params.toolsets.xcode.forceLegacyBuildSystem] Setting this
     * to true forces the build to use Xcode legacy build system. Otherwise, the
     * setting from workspace settings is used.
     * By default new build system is used if workspace setting is not committed to
     * the repository. Only used for iOS React Native app, with Xcode 10.
     *
     *
     * @param {object} [params.toolsets.javascript] Build configuration when React
     * Native, or other JavaScript tech, is part of the build steps
     *
     * @param {string} [params.toolsets.javascript.packageJsonPath] Path to
     * package.json file for the main project, e.g. "package.json" or
     * "myapp/package.json"
     *
     * @param {boolean} [params.toolsets.javascript.runTests] Whether to run Jest
     * unit tests, via npm test, during the build
     *
     * @param {string} [params.toolsets.javascript.reactNativeVersion] Version of
     * React Native from package.json files
     *
     * @param {object} [params.toolsets.xamarin] Build configuration for Xamarin
     * projects
     *
     * @param {string} [params.toolsets.xamarin.slnPath]
     *
     * @param {boolean} [params.toolsets.xamarin.isSimBuild]
     *
     * @param {string} [params.toolsets.xamarin.args]
     *
     * @param {string} [params.toolsets.xamarin.configuration]
     *
     * @param {string} [params.toolsets.xamarin.p12File]
     *
     * @param {string} [params.toolsets.xamarin.p12Pwd]
     *
     * @param {string} [params.toolsets.xamarin.provProfile]
     *
     * @param {string} [params.toolsets.xamarin.monoVersion]
     *
     * @param {string} [params.toolsets.xamarin.sdkBundle]
     *
     * @param {string} [params.toolsets.xamarin.symlink] Symlink of the SDK Bundle
     * and Mono installation.
     * The build will use the associated Mono bundled with related Xamarin SDK. If
     * both symlink and monoVersion or sdkBundle are passed, the symlink is taking
     * precedence. If non-existing symlink is passed, the current stable Mono
     * version will be configured for building.
     *
     *
     * @param {object} [params.toolsets.android] Build configuration for Android
     * projects
     *
     * @param {string} [params.toolsets.android.gradleWrapperPath] Path to the
     * Gradle wrapper script
     *
     * @param {string} [params.toolsets.android.module] The Gradle module to build
     *
     * @param {string} [params.toolsets.android.buildVariant] The Android build
     * variant to build
     *
     * @param {boolean} [params.toolsets.android.runTests] Whether to run unit
     * tests during the build (default)
     *
     * @param {boolean} [params.toolsets.android.runLint] Whether to run lint
     * checks during the build (default)
     *
     * @param {boolean} [params.toolsets.android.isRoot] Whether it is the root
     * module or not
     *
     * @param {boolean} [params.toolsets.android.automaticSigning] Whether to apply
     * automatic signing or not
     *
     * @param {string} [params.toolsets.android.keystorePassword] The password of
     * the keystore
     *
     * @param {string} [params.toolsets.android.keyAlias] The key alias
     *
     * @param {string} [params.toolsets.android.keyPassword] The key password
     *
     * @param {string} [params.toolsets.android.keystoreFilename] The name of the
     * keystore file
     *
     * @param {string} [params.toolsets.android.keystoreEncoded] The keystore
     * encoded value
     *
     * @param {object} [params.artifactVersioning] The versioning configuration for
     * artifacts built for this branch
     *
     * @param {string} [params.artifactVersioning.buildNumberFormat] Possible
     * values include: 'buildId', 'timestamp'
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdateOKResponseModelModelModelModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdateOKResponseModelModelModelModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      UpdateOKResponseModelModelModelModelModelModelModelModel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(branch: string, params: models.Params, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdateOKResponseModelModelModelModelModelModelModelModel>;
    update(branch: string, params: models.Params, ownerName: string, appName: string, callback: ServiceCallback<models.UpdateOKResponseModelModelModelModelModelModelModelModel>): void;
    update(branch: string, params: models.Params, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdateOKResponseModelModelModelModelModelModelModelModel>): void;


    /**
     * Deletes the branch build configuration
     *
     * @param {string} branch The branch name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.payload]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeleteOKResponseModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(branch: string, ownerName: string, appName: string, options?: { payload? : any, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeleteOKResponseModel>>;

    /**
     * Deletes the branch build configuration
     *
     * @param {string} branch The branch name
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.payload]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeleteOKResponseModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeleteOKResponseModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeleteOKResponseModel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(branch: string, ownerName: string, appName: string, options?: { payload? : any, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeleteOKResponseModel>;
    deleteMethod(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.DeleteOKResponseModel>): void;
    deleteMethod(branch: string, ownerName: string, appName: string, options: { payload? : any, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeleteOKResponseModel>): void;
}

/**
 * @class
 * Identity
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Identity {


    /**
     * @summary Returns users of a tenant.
     * Returns all users if no searchTerm param is specified.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.acAuthorizationAADGraph] MSGraph Auth Token
     *
     * @param {string} [options.searchTerm] User search term
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getUsersWithHttpOperationResponse(ownerName: string, appName: string, options?: { acAuthorizationAADGraph? : string, searchTerm? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Returns users of a tenant.
     * Returns all users if no searchTerm param is specified.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.acAuthorizationAADGraph] MSGraph Auth Token
     *
     * @param {string} [options.searchTerm] User search term
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getUsers(ownerName: string, appName: string, options?: { acAuthorizationAADGraph? : string, searchTerm? : string, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getUsers(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    getUsers(ownerName: string, appName: string, options: { acAuthorizationAADGraph? : string, searchTerm? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * AppleMapping
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface AppleMapping {


    /**
     * Fetch all apple test flight groups
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    testFlightGroupsWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TestFlightGroupsOKResponseItem[]>>;

    /**
     * Fetch all apple test flight groups
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    testFlightGroups(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TestFlightGroupsOKResponseItem[]>;
    testFlightGroups(ownerName: string, appName: string, callback: ServiceCallback<models.TestFlightGroupsOKResponseItem[]>): void;
    testFlightGroups(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestFlightGroupsOKResponseItem[]>): void;


    /**
     * Get mapping of apple app to an existing app in apple store.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModel>>;

    /**
     * Get mapping of apple app to an existing app in apple store.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModel>;
    get(ownerName: string, appName: string, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModel>): void;
    get(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModelModel>): void;


    /**
     * Delete mapping of apple app to an existing app in apple store.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.body]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(ownerName: string, appName: string, options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete mapping of apple app to an existing app in apple store.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.body]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(ownerName: string, appName: string, options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    deleteMethod(ownerName: string, appName: string, options: { body? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create a mapping for an existing app in apple store for the specified
     * application.
     *
     * @param {object} body The apple app mapping object
     *
     * @param {string} body.serviceConnectionId Id for the shared service
     * connection. In case of Apple AppStore, this connection will be used to
     * create and connect to the Apple AppStore in Mobile Center.
     *
     * @param {string} [body.appleId] ID of the apple application in apple store,
     * takes precedence over bundle_identifier when both are provided
     *
     * @param {string} [body.bundleIdentifier] Bundle Identifier of the apple
     * package
     *
     * @param {string} body.teamIdentifier ID of the Team associated with the app
     * in apple store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateCreatedResponseModelModelModelModelModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(body: models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateCreatedResponseModelModelModelModelModel>>;

    /**
     * Create a mapping for an existing app in apple store for the specified
     * application.
     *
     * @param {object} body The apple app mapping object
     *
     * @param {string} body.serviceConnectionId Id for the shared service
     * connection. In case of Apple AppStore, this connection will be used to
     * create and connect to the Apple AppStore in Mobile Center.
     *
     * @param {string} [body.appleId] ID of the apple application in apple store,
     * takes precedence over bundle_identifier when both are provided
     *
     * @param {string} [body.bundleIdentifier] Bundle Identifier of the apple
     * package
     *
     * @param {string} body.teamIdentifier ID of the Team associated with the app
     * in apple store
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateCreatedResponseModelModelModelModelModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateCreatedResponseModelModelModelModelModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      CreateCreatedResponseModelModelModelModelModel} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(body: models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateCreatedResponseModelModelModelModelModel>;
    create(body: models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, ownerName: string, appName: string, callback: ServiceCallback<models.CreateCreatedResponseModelModelModelModelModel>): void;
    create(body: models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateCreatedResponseModelModelModelModelModel>): void;
}

/**
 * @class
 * AppApiTokens
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface AppApiTokens {


    /**
     * Delete the App Api Token object with the specific ID
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} apiTokenId The unique ID (UUID) of the api token
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(ownerName: string, appName: string, apiTokenId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Delete the App Api Token object with the specific ID
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {string} apiTokenId The unique ID (UUID) of the api token
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(ownerName: string, appName: string, apiTokenId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteMethod(ownerName: string, appName: string, apiTokenId: string, callback: ServiceCallback<any>): void;
    deleteMethod(ownerName: string, appName: string, apiTokenId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Returns App API tokens for the app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Returns App API tokens for the app
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    list(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Creates a new App API token
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.description] The description of the token
     *
     * @param {array} [options.scope] The scope for this token.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    newMethodWithHttpOperationResponse(ownerName: string, appName: string, options?: { description? : string, scope? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Creates a new App API token
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.description] The description of the token
     *
     * @param {array} [options.scope] The scope for this token.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    newMethod(ownerName: string, appName: string, options?: { description? : string, scope? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    newMethod(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
    newMethod(ownerName: string, appName: string, options: { description? : string, scope? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Analytics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface Analytics {


    /**
     * Count of active versions in the time range ordered by version.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VersionsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    versionsMethodWithHttpOperationResponse(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VersionsOKResponse>>;

    /**
     * Count of active versions in the time range ordered by version.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VersionsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VersionsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VersionsOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    versionsMethod(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.VersionsOKResponse>;
    versionsMethod(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.VersionsOKResponse>): void;
    versionsMethod(start: Date|string, ownerName: string, appName: string, options: { end? : Date, top? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VersionsOKResponse>): void;


    /**
     * Count of sessions per device in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} interval Size of interval in ISO 8601 duration format.
     * (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1
     * week (P1W), and 30 days (P30D).
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PerDeviceCountsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    perDeviceCountsWithHttpOperationResponse(start: Date|string, interval: string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PerDeviceCountsOKResponse>>;

    /**
     * Count of sessions per device in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} interval Size of interval in ISO 8601 duration format.
     * (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1
     * week (P1W), and 30 days (P30D).
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PerDeviceCountsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PerDeviceCountsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PerDeviceCountsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    perDeviceCounts(start: Date|string, interval: string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.PerDeviceCountsOKResponse>;
    perDeviceCounts(start: Date|string, interval: string, ownerName: string, appName: string, callback: ServiceCallback<models.PerDeviceCountsOKResponse>): void;
    perDeviceCounts(start: Date|string, interval: string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PerDeviceCountsOKResponse>): void;


    /**
     * Gets session duration.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SessionDurationsDistributionOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sessionDurationsDistributionMethodWithHttpOperationResponse(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SessionDurationsDistributionOKResponse>>;

    /**
     * Gets session duration.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SessionDurationsDistributionOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SessionDurationsDistributionOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SessionDurationsDistributionOKResponse} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    sessionDurationsDistributionMethod(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.SessionDurationsDistributionOKResponse>;
    sessionDurationsDistributionMethod(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.SessionDurationsDistributionOKResponse>): void;
    sessionDurationsDistributionMethod(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionDurationsDistributionOKResponse>): void;


    /**
     * Count of sessions in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} interval Size of interval in ISO 8601 duration format.
     * (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1
     * week (P1W), and 30 days (P30D).
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sessionCountsWithHttpOperationResponse(start: Date|string, interval: string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SessionCountsOKResponseItem[]>>;

    /**
     * Count of sessions in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} interval Size of interval in ISO 8601 duration format.
     * (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1
     * week (P1W), and 30 days (P30D).
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    sessionCounts(start: Date|string, interval: string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.SessionCountsOKResponseItem[]>;
    sessionCounts(start: Date|string, interval: string, ownerName: string, appName: string, callback: ServiceCallback<models.SessionCountsOKResponseItem[]>): void;
    sessionCounts(start: Date|string, interval: string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionCountsOKResponseItem[]>): void;


    /**
     * Places in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PlaceCountsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    placeCountsWithHttpOperationResponse(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PlaceCountsOKResponse>>;

    /**
     * Places in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PlaceCountsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PlaceCountsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PlaceCountsOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    placeCounts(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.PlaceCountsOKResponse>;
    placeCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.PlaceCountsOKResponse>): void;
    placeCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, top? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PlaceCountsOKResponse>): void;


    /**
     * OSes in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperatingSystemCountsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    operatingSystemCountsWithHttpOperationResponse(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperatingSystemCountsOKResponse>>;

    /**
     * OSes in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperatingSystemCountsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperatingSystemCountsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperatingSystemCountsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    operatingSystemCounts(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.OperatingSystemCountsOKResponse>;
    operatingSystemCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.OperatingSystemCountsOKResponse>): void;
    operatingSystemCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, top? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperatingSystemCountsOKResponse>): void;


    /**
     * Models in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ModelCountsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    modelCountsWithHttpOperationResponse(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ModelCountsOKResponse>>;

    /**
     * Models in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ModelCountsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ModelCountsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ModelCountsOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    modelCounts(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.ModelCountsOKResponse>;
    modelCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.ModelCountsOKResponse>): void;
    modelCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, top? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ModelCountsOKResponse>): void;


    /**
     * Logs received between the specified start time and the current time. The API
     * will return a maximum of 100 logs per call.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.start] Start date time in data in ISO 8601 date time
     * format. It must be within the current day in the UTC timezone. The default
     * value is the start time of the current day in UTC timezone.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LogFlowOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    logFlowWithHttpOperationResponse(ownerName: string, appName: string, options?: { start? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LogFlowOKResponse>>;

    /**
     * Logs received between the specified start time and the current time. The API
     * will return a maximum of 100 logs per call.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.start] Start date time in data in ISO 8601 date time
     * format. It must be within the current day in the UTC timezone. The default
     * value is the start time of the current day in UTC timezone.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LogFlowOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LogFlowOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LogFlowOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    logFlow(ownerName: string, appName: string, options?: { start? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.LogFlowOKResponse>;
    logFlow(ownerName: string, appName: string, callback: ServiceCallback<models.LogFlowOKResponse>): void;
    logFlow(ownerName: string, appName: string, options: { start? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LogFlowOKResponse>): void;


    /**
     * Languages in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LanguageCountsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    languageCountsWithHttpOperationResponse(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LanguageCountsOKResponse>>;

    /**
     * Languages in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LanguageCountsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LanguageCountsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LanguageCountsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    languageCounts(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, top? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.LanguageCountsOKResponse>;
    languageCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.LanguageCountsOKResponse>): void;
    languageCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, top? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LanguageCountsOKResponse>): void;


    /**
     * Logs received between the specified start time and the current time. The API
     * will return a maximum of 100 logs per call.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.start] Start date time in data in ISO 8601 date time
     * format. It must be within the current day in the UTC timezone. The default
     * value is the start time of the current day in UTC timezone.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GenericLogFlowOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    genericLogFlowWithHttpOperationResponse(ownerName: string, appName: string, options?: { start? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GenericLogFlowOKResponse>>;

    /**
     * Logs received between the specified start time and the current time. The API
     * will return a maximum of 100 logs per call.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.start] Start date time in data in ISO 8601 date time
     * format. It must be within the current day in the UTC timezone. The default
     * value is the start time of the current day in UTC timezone.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GenericLogFlowOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GenericLogFlowOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GenericLogFlowOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    genericLogFlow(ownerName: string, appName: string, options?: { start? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.GenericLogFlowOKResponse>;
    genericLogFlow(ownerName: string, appName: string, callback: ServiceCallback<models.GenericLogFlowOKResponse>): void;
    genericLogFlow(ownerName: string, appName: string, options: { start? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericLogFlowOKResponse>): void;


    /**
     * Event properties value counts during the time range in descending order.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {string} eventPropertyName The id of the event property.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {number} [options.top] The number of property values to return. Set
     * to 0 in order to fetch all results available.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventPropertyCountsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    eventPropertyCountsWithHttpOperationResponse(eventName: string, eventPropertyName: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventPropertyCountsOKResponse>>;

    /**
     * Event properties value counts during the time range in descending order.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {string} eventPropertyName The id of the event property.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {number} [options.top] The number of property values to return. Set
     * to 0 in order to fetch all results available.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventPropertyCountsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventPropertyCountsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventPropertyCountsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    eventPropertyCounts(eventName: string, eventPropertyName: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.EventPropertyCountsOKResponse>;
    eventPropertyCounts(eventName: string, eventPropertyName: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventPropertyCountsOKResponse>): void;
    eventPropertyCounts(eventName: string, eventPropertyName: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventPropertyCountsOKResponse>): void;


    /**
     * Event properties.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventPropertiesOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    eventPropertiesMethodWithHttpOperationResponse(eventName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventPropertiesOKResponse>>;

    /**
     * Event properties.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventPropertiesOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventPropertiesOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventPropertiesOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    eventPropertiesMethod(eventName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventPropertiesOKResponse>;
    eventPropertiesMethod(eventName: string, ownerName: string, appName: string, callback: ServiceCallback<models.EventPropertiesOKResponse>): void;
    eventPropertiesMethod(eventName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventPropertiesOKResponse>): void;


    /**
     * Count of events by interval in the time range.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventCountOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    eventCountMethodWithHttpOperationResponse(eventName: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventCountOKResponse>>;

    /**
     * Count of events by interval in the time range.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventCountOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventCountOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventCountOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    eventCountMethod(eventName: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.EventCountOKResponse>;
    eventCountMethod(eventName: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventCountOKResponse>): void;
    eventCountMethod(eventName: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventCountOKResponse>): void;


    /**
     * Count of devices for an event by interval in the time range.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventDeviceCountOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    eventDeviceCountMethodWithHttpOperationResponse(eventName: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventDeviceCountOKResponse>>;

    /**
     * Count of devices for an event by interval in the time range.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventDeviceCountOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventDeviceCountOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventDeviceCountOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    eventDeviceCountMethod(eventName: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.EventDeviceCountOKResponse>;
    eventDeviceCountMethod(eventName: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventDeviceCountOKResponse>): void;
    eventDeviceCountMethod(eventName: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventDeviceCountOKResponse>): void;


    /**
     * Count of events per session by interval in the time range.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventPerSessionCountOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    eventPerSessionCountWithHttpOperationResponse(eventName: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventPerSessionCountOKResponse>>;

    /**
     * Count of events per session by interval in the time range.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventPerSessionCountOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventPerSessionCountOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventPerSessionCountOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    eventPerSessionCount(eventName: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.EventPerSessionCountOKResponse>;
    eventPerSessionCount(eventName: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventPerSessionCountOKResponse>): void;
    eventPerSessionCount(eventName: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventPerSessionCountOKResponse>): void;


    /**
     * Count of events per device by interval in the time range.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventPerDeviceCountOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    eventPerDeviceCountWithHttpOperationResponse(eventName: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventPerDeviceCountOKResponse>>;

    /**
     * Count of events per device by interval in the time range.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventPerDeviceCountOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventPerDeviceCountOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventPerDeviceCountOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    eventPerDeviceCount(eventName: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.EventPerDeviceCountOKResponse>;
    eventPerDeviceCount(eventName: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventPerDeviceCountOKResponse>): void;
    eventPerDeviceCount(eventName: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventPerDeviceCountOKResponse>): void;


    /**
     * Delete the set of Events with the specified event names.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    eventsDeleteWithHttpOperationResponse(eventName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete the set of Events with the specified event names.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    eventsDelete(eventName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    eventsDelete(eventName: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    eventsDelete(eventName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Count of active events in the time range ordered by event.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {array} [options.eventName] To select the specific events.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {number} [options.skip] The offset (starting at 0) of the first
     * result to return. This parameter along with limit is used to perform
     * pagination.
     *
     * @param {string} [options.inlinecount] Controls whether or not to include a
     * count of all the items across all pages. Possible values include:
     * 'allpages', 'none'
     *
     * @param {string} [options.orderby] controls the sorting order and sorting
     * based on which column
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    eventsMethodWithHttpOperationResponse(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], eventName? : string[], top? : number, skip? : number, inlinecount? : string, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventsOKResponse>>;

    /**
     * Count of active events in the time range ordered by event.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {array} [options.eventName] To select the specific events.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {number} [options.skip] The offset (starting at 0) of the first
     * result to return. This parameter along with limit is used to perform
     * pagination.
     *
     * @param {string} [options.inlinecount] Controls whether or not to include a
     * count of all the items across all pages. Possible values include:
     * 'allpages', 'none'
     *
     * @param {string} [options.orderby] controls the sorting order and sorting
     * based on which column
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventsOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    eventsMethod(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], eventName? : string[], top? : number, skip? : number, inlinecount? : string, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.EventsOKResponse>;
    eventsMethod(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventsOKResponse>): void;
    eventsMethod(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], eventName? : string[], top? : number, skip? : number, inlinecount? : string, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventsOKResponse>): void;


    /**
     * Delete the set of Events with the specified event names.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    eventsDeleteLogsWithHttpOperationResponse(eventName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete the set of Events with the specified event names.
     *
     * @param {string} eventName The id of the event.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    eventsDeleteLogs(eventName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    eventsDeleteLogs(eventName: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    eventsDeleteLogs(eventName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Count of total downloads for the provided distribution releases.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} releases
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DistributionReleaseCountsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    distributionReleaseCountsWithHttpOperationResponse(ownerName: string, appName: string, releases: models.ReleasesReleasesItem[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DistributionReleaseCountsOKResponse>>;

    /**
     * Count of total downloads for the provided distribution releases.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} releases
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DistributionReleaseCountsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DistributionReleaseCountsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DistributionReleaseCountsOKResponse} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    distributionReleaseCounts(ownerName: string, appName: string, releases: models.ReleasesReleasesItem[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DistributionReleaseCountsOKResponse>;
    distributionReleaseCounts(ownerName: string, appName: string, releases: models.ReleasesReleasesItem[], callback: ServiceCallback<models.DistributionReleaseCountsOKResponse>): void;
    distributionReleaseCounts(ownerName: string, appName: string, releases: models.ReleasesReleasesItem[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DistributionReleaseCountsOKResponse>): void;


    /**
     * Percentage of crash-free device by day in the time range based on the
     * selected versions. Api will return -1 if crash devices is greater than
     * active devices.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} version
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CrashFreeDevicePercentagesOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    crashFreeDevicePercentagesMethodWithHttpOperationResponse(start: Date|string, version: string, ownerName: string, appName: string, options?: { end? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CrashFreeDevicePercentagesOKResponse>>;

    /**
     * Percentage of crash-free device by day in the time range based on the
     * selected versions. Api will return -1 if crash devices is greater than
     * active devices.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} version
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CrashFreeDevicePercentagesOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CrashFreeDevicePercentagesOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CrashFreeDevicePercentagesOKResponse} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    crashFreeDevicePercentagesMethod(start: Date|string, version: string, ownerName: string, appName: string, options?: { end? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.CrashFreeDevicePercentagesOKResponse>;
    crashFreeDevicePercentagesMethod(start: Date|string, version: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashFreeDevicePercentagesOKResponse>): void;
    crashFreeDevicePercentagesMethod(start: Date|string, version: string, ownerName: string, appName: string, options: { end? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashFreeDevicePercentagesOKResponse>): void;


    /**
     * @summary Available for UWP apps only.
     *
     * Overall crashes and affected users count of the selected crash group with
     * selected version. Available for UWP apps only.
     *
     * @param {string} crashGroupId The id of the crash group.
     *
     * @param {string} version
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CrashGroupTotalsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    crashGroupTotalsWithHttpOperationResponse(crashGroupId: string, version: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CrashGroupTotalsOKResponse>>;

    /**
     * @summary Available for UWP apps only.
     *
     * Overall crashes and affected users count of the selected crash group with
     * selected version. Available for UWP apps only.
     *
     * @param {string} crashGroupId The id of the crash group.
     *
     * @param {string} version
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CrashGroupTotalsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CrashGroupTotalsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CrashGroupTotalsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    crashGroupTotals(crashGroupId: string, version: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CrashGroupTotalsOKResponse>;
    crashGroupTotals(crashGroupId: string, version: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroupTotalsOKResponse>): void;
    crashGroupTotals(crashGroupId: string, version: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroupTotalsOKResponse>): void;


    /**
     * @summary Available for UWP apps only.
     *
     * Top OSes of the selected crash group with selected version. Available for
     * UWP apps only.
     *
     * @param {string} crashGroupId The id of the crash group.
     *
     * @param {string} version
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CrashGroupOperatingSystemCountsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    crashGroupOperatingSystemCountsWithHttpOperationResponse(crashGroupId: string, version: string, ownerName: string, appName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CrashGroupOperatingSystemCountsOKResponse>>;

    /**
     * @summary Available for UWP apps only.
     *
     * Top OSes of the selected crash group with selected version. Available for
     * UWP apps only.
     *
     * @param {string} crashGroupId The id of the crash group.
     *
     * @param {string} version
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CrashGroupOperatingSystemCountsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CrashGroupOperatingSystemCountsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CrashGroupOperatingSystemCountsOKResponse}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    crashGroupOperatingSystemCounts(crashGroupId: string, version: string, ownerName: string, appName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.CrashGroupOperatingSystemCountsOKResponse>;
    crashGroupOperatingSystemCounts(crashGroupId: string, version: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroupOperatingSystemCountsOKResponse>): void;
    crashGroupOperatingSystemCounts(crashGroupId: string, version: string, ownerName: string, appName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroupOperatingSystemCountsOKResponse>): void;


    /**
     * @summary Available for UWP apps only.
     *
     * Top models of the selected crash group with selected version. Available for
     * UWP apps only.
     *
     * @param {string} crashGroupId The id of the crash group.
     *
     * @param {string} version
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CrashGroupModelCountsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    crashGroupModelCountsWithHttpOperationResponse(crashGroupId: string, version: string, ownerName: string, appName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CrashGroupModelCountsOKResponse>>;

    /**
     * @summary Available for UWP apps only.
     *
     * Top models of the selected crash group with selected version. Available for
     * UWP apps only.
     *
     * @param {string} crashGroupId The id of the crash group.
     *
     * @param {string} version
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CrashGroupModelCountsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CrashGroupModelCountsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CrashGroupModelCountsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    crashGroupModelCounts(crashGroupId: string, version: string, ownerName: string, appName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.CrashGroupModelCountsOKResponse>;
    crashGroupModelCounts(crashGroupId: string, version: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroupModelCountsOKResponse>): void;
    crashGroupModelCounts(crashGroupId: string, version: string, ownerName: string, appName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroupModelCountsOKResponse>): void;


    /**
     * @summary Available for UWP apps only.
     *
     * Count of crashes by day in the time range of the selected crash group with
     * selected version. Available for UWP apps only.
     *
     * @param {string} crashGroupId The id of the crash group.
     *
     * @param {string} version
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CrashGroupCountsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    crashGroupCountsWithHttpOperationResponse(crashGroupId: string, version: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CrashGroupCountsOKResponse>>;

    /**
     * @summary Available for UWP apps only.
     *
     * Count of crashes by day in the time range of the selected crash group with
     * selected version. Available for UWP apps only.
     *
     * @param {string} crashGroupId The id of the crash group.
     *
     * @param {string} version
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CrashGroupCountsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CrashGroupCountsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CrashGroupCountsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    crashGroupCounts(crashGroupId: string, version: string, start: Date|string, ownerName: string, appName: string, options?: { end? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.CrashGroupCountsOKResponse>;
    crashGroupCounts(crashGroupId: string, version: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroupCountsOKResponse>): void;
    crashGroupCounts(crashGroupId: string, version: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroupCountsOKResponse>): void;


    /**
     * Overall crashes and affected users count of the selected crash groups with
     * selected versions.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} crashGroups
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    crashGroupsTotalsWithHttpOperationResponse(ownerName: string, appName: string, crashGroups: models.CrashGroupsCrashGroupsItem[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CrashGroupsTotalsOKResponseItem[]>>;

    /**
     * Overall crashes and affected users count of the selected crash groups with
     * selected versions.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {array} crashGroups
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    crashGroupsTotals(ownerName: string, appName: string, crashGroups: models.CrashGroupsCrashGroupsItem[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CrashGroupsTotalsOKResponseItem[]>;
    crashGroupsTotals(ownerName: string, appName: string, crashGroups: models.CrashGroupsCrashGroupsItem[], callback: ServiceCallback<models.CrashGroupsTotalsOKResponseItem[]>): void;
    crashGroupsTotals(ownerName: string, appName: string, crashGroups: models.CrashGroupsCrashGroupsItem[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroupsTotalsOKResponseItem[]>): void;


    /**
     * @summary Available for UWP apps only.
     *
     * Count of crashes by day in the time range based the selected versions.
     * Available for UWP apps only.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CrashCountsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    crashCountsMethodWithHttpOperationResponse(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CrashCountsOKResponse>>;

    /**
     * @summary Available for UWP apps only.
     *
     * Count of crashes by day in the time range based the selected versions.
     * Available for UWP apps only.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CrashCountsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CrashCountsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CrashCountsOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    crashCountsMethod(start: Date|string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.CrashCountsOKResponse>;
    crashCountsMethod(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashCountsOKResponse>): void;
    crashCountsMethod(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashCountsOKResponse>): void;


    /**
     * Returns whether audience definition exists.
     *
     * @param {string} audienceName The name of the audience
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    audienceNameExistsWithHttpOperationResponse(audienceName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Returns whether audience definition exists.
     *
     * @param {string} audienceName The name of the audience
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    audienceNameExists(audienceName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    audienceNameExists(audienceName: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    audienceNameExists(audienceName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes audience definition.
     *
     * @param {string} audienceName The name of the audience
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAudienceWithHttpOperationResponse(audienceName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes audience definition.
     *
     * @param {string} audienceName The name of the audience
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAudience(audienceName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteAudience(audienceName: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;
    deleteAudience(audienceName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets audience definition.
     *
     * @param {string} audienceName The name of the audience
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetAudienceOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAudienceWithHttpOperationResponse(audienceName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetAudienceOKResponse>>;

    /**
     * Gets audience definition.
     *
     * @param {string} audienceName The name of the audience
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetAudienceOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetAudienceOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetAudienceOKResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAudience(audienceName: string, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetAudienceOKResponse>;
    getAudience(audienceName: string, ownerName: string, appName: string, callback: ServiceCallback<models.GetAudienceOKResponse>): void;
    getAudience(audienceName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetAudienceOKResponse>): void;


    /**
     * Creates or updates audience definition.
     *
     * @param {string} audienceName The name of the audience
     *
     * @param {object} audience Audience definition
     *
     * @param {string} [audience.description] Audience description.
     *
     * @param {string} audience.definition Audience definition in OData format.
     *
     * @param {boolean} [audience.enabled]
     *
     * @param {object} [audience.customProperties] Custom properties used in the
     * definition.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreateOrUpdateAudienceOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAudienceWithHttpOperationResponse(audienceName: string, audience: models.AudienceModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreateOrUpdateAudienceOKResponse>>;

    /**
     * Creates or updates audience definition.
     *
     * @param {string} audienceName The name of the audience
     *
     * @param {object} audience Audience definition
     *
     * @param {string} [audience.description] Audience description.
     *
     * @param {string} audience.definition Audience definition in OData format.
     *
     * @param {boolean} [audience.enabled]
     *
     * @param {object} [audience.customProperties] Custom properties used in the
     * definition.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreateOrUpdateAudienceOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreateOrUpdateAudienceOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreateOrUpdateAudienceOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAudience(audienceName: string, audience: models.AudienceModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CreateOrUpdateAudienceOKResponse>;
    createOrUpdateAudience(audienceName: string, audience: models.AudienceModel, ownerName: string, appName: string, callback: ServiceCallback<models.CreateOrUpdateAudienceOKResponse>): void;
    createOrUpdateAudience(audienceName: string, audience: models.AudienceModel, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreateOrUpdateAudienceOKResponse>): void;


    /**
     * Get list of device property values.
     *
     * @param {string} propertyName Device property
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.contains] Contains string
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListDevicePropertyValuesOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDevicePropertyValuesWithHttpOperationResponse(propertyName: string, ownerName: string, appName: string, options?: { contains? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListDevicePropertyValuesOKResponse>>;

    /**
     * Get list of device property values.
     *
     * @param {string} propertyName Device property
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.contains] Contains string
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListDevicePropertyValuesOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListDevicePropertyValuesOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListDevicePropertyValuesOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDevicePropertyValues(propertyName: string, ownerName: string, appName: string, options?: { contains? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListDevicePropertyValuesOKResponse>;
    listDevicePropertyValues(propertyName: string, ownerName: string, appName: string, callback: ServiceCallback<models.ListDevicePropertyValuesOKResponse>): void;
    listDevicePropertyValues(propertyName: string, ownerName: string, appName: string, options: { contains? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListDevicePropertyValuesOKResponse>): void;


    /**
     * Get list of device properties.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListDevicePropertiesOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDevicePropertiesWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListDevicePropertiesOKResponse>>;

    /**
     * Get list of device properties.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListDevicePropertiesOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListDevicePropertiesOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListDevicePropertiesOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeviceProperties(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListDevicePropertiesOKResponse>;
    listDeviceProperties(ownerName: string, appName: string, callback: ServiceCallback<models.ListDevicePropertiesOKResponse>): void;
    listDeviceProperties(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListDevicePropertiesOKResponse>): void;


    /**
     * Get list of custom properties.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListCustomPropertiesOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCustomPropertiesWithHttpOperationResponse(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListCustomPropertiesOKResponse>>;

    /**
     * Get list of custom properties.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListCustomPropertiesOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListCustomPropertiesOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListCustomPropertiesOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCustomProperties(ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListCustomPropertiesOKResponse>;
    listCustomProperties(ownerName: string, appName: string, callback: ServiceCallback<models.ListCustomPropertiesOKResponse>): void;
    listCustomProperties(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListCustomPropertiesOKResponse>): void;


    /**
     * Tests audience definition.
     *
     * @param {object} audience Audience definition
     *
     * @param {string} [audience.description] Audience description.
     *
     * @param {string} audience.definition Audience definition in OData format.
     *
     * @param {boolean} [audience.enabled]
     *
     * @param {object} [audience.customProperties] Custom properties used in the
     * definition.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TestAudienceOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    testAudienceWithHttpOperationResponse(audience: models.AudienceModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TestAudienceOKResponse>>;

    /**
     * Tests audience definition.
     *
     * @param {object} audience Audience definition
     *
     * @param {string} [audience.description] Audience description.
     *
     * @param {string} audience.definition Audience definition in OData format.
     *
     * @param {boolean} [audience.enabled]
     *
     * @param {object} [audience.customProperties] Custom properties used in the
     * definition.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TestAudienceOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TestAudienceOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TestAudienceOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    testAudience(audience: models.AudienceModel, ownerName: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TestAudienceOKResponse>;
    testAudience(audience: models.AudienceModel, ownerName: string, appName: string, callback: ServiceCallback<models.TestAudienceOKResponse>): void;
    testAudience(audience: models.AudienceModel, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestAudienceOKResponse>): void;


    /**
     * Get list of audiences.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.includeDisabled] Include disabled audience
     * definitions
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListAudiencesOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAudiencesWithHttpOperationResponse(ownerName: string, appName: string, options?: { includeDisabled? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListAudiencesOKResponse>>;

    /**
     * Get list of audiences.
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.includeDisabled] Include disabled audience
     * definitions
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListAudiencesOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListAudiencesOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListAudiencesOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAudiences(ownerName: string, appName: string, options?: { includeDisabled? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListAudiencesOKResponse>;
    listAudiences(ownerName: string, appName: string, callback: ServiceCallback<models.ListAudiencesOKResponse>): void;
    listAudiences(ownerName: string, appName: string, options: { includeDisabled? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListAudiencesOKResponse>): void;


    /**
     * Count of active devices by interval in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} appBuild
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeviceCountsOKResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deviceCountsWithHttpOperationResponse(start: Date|string, appBuild: string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeviceCountsOKResponse>>;

    /**
     * Count of active devices by interval in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format.
     *
     * @param {string} appBuild
     *
     * @param {string} ownerName The name of the owner
     *
     * @param {string} appName The name of the application
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     *
     * @param {array} [options.versions]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeviceCountsOKResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeviceCountsOKResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeviceCountsOKResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deviceCounts(start: Date|string, appBuild: string, ownerName: string, appName: string, options?: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.DeviceCountsOKResponse>;
    deviceCounts(start: Date|string, appBuild: string, ownerName: string, appName: string, callback: ServiceCallback<models.DeviceCountsOKResponse>): void;
    deviceCounts(start: Date|string, appBuild: string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeviceCountsOKResponse>): void;
}

/**
 * @class
 * UserApiTokens
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AppCenterClient.
 */
export interface UserApiTokens {


    /**
     * Delete the user api_token object with the specific id
     *
     * @param {string} apiTokenId The unique ID (UUID) of the api token
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(apiTokenId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Delete the user api_token object with the specific id
     *
     * @param {string} apiTokenId The unique ID (UUID) of the api token
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(apiTokenId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteMethod(apiTokenId: string, callback: ServiceCallback<any>): void;
    deleteMethod(apiTokenId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Returns api tokens for the authenticated user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Returns api tokens for the authenticated user
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    list(callback: ServiceCallback<any>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Creates a new User API token
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.description] The description of the token
     *
     * @param {array} [options.scope] The scope for this token.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    newMethodWithHttpOperationResponse(options?: { description? : string, scope? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Creates a new User API token
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.description] The description of the token
     *
     * @param {array} [options.scope] The scope for this token.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    newMethod(options?: { description? : string, scope? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    newMethod(callback: ServiceCallback<any>): void;
    newMethod(options: { description? : string, scope? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}
