trigger:
- master

pr:
- master

variables: 
- name: API_TOKEN_KEY_VAULT
  value: 'distributionStoresInt'
- name: API_TOKEN_KEY_VAULT_AZURE_SUBSCRIPTION
  value: 'App Center - INT'

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  ${{ else }}:
    template: v1/1ES.Unofficial.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: 1ES-PT-CBL-Mariner-2.0-Gen2
      os: linux
    customBuildTags:
    - ES365AIMigrationTooling-BulkMigrated
    sdl:
      sourceAnalysisPool: 1ES-PT-Windows-2022
    stages:
    - stage: Stage
      jobs:
      - job: HostJob
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: "Publish Artifact: artifacts"
            path: '$(Build.ArtifactStagingDirectory)/npm'
            artifactName: npm
            
        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '14.x'
          displayName: 'Install Node.js'

        - script: |
            npm ci
            npm run build
          displayName: 'Install and build'

        - script: |
            npm run test:ci || [ -f './test-results.xml' ]
          displayName: 'Run CLI tests (with JUnit output)'

        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: 'test-results.xml'
            searchFolder: '$(Build.SourcesDirectory)'
            failTaskOnFailedTests: true
            testRunTitle: 'CLI unit tests'
          displayName: 'Verify CLI unit test result'

        - script: |
            npm ci
            npm run build
          displayName: 'Install and build appcenter-file-upload-client-node'
          workingDirectory: $(Build.SourcesDirectory)/appcenter-file-upload-client-node

        - script: |
            npm run test:ci || [ -f './test-results.xml' ]
          displayName: 'Run appcenter-file-upload-client-node tests'
          workingDirectory: $(Build.SourcesDirectory)/appcenter-file-upload-client-node

        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: 'test-results.xml'
            searchFolder: '$(Build.SourcesDirectory)/appcenter-file-upload-client-node'
            failTaskOnFailedTests: true
            testRunTitle: 'appcenter-file-upload-client-node unit tests'
          displayName: 'Verify appcenter-file-upload-client-node unit test result'

        - task: AzureKeyVault@1
          inputs:
            azureSubscription: '$(API_TOKEN_KEY_VAULT_AZURE_SUBSCRIPTION)'
            KeyVaultName: '$(API_TOKEN_KEY_VAULT)'
            SecretsFilter: 'ac-cli-account-api-token'

        - task: PowerShell@2
          inputs:
            filePath: '$(Build.SourcesDirectory)/test/functional/Invoke-FunctionalTests.ps1'
            arguments: '-Token $(ac-cli-account-api-token)'
            pwsh: true
            workingDirectory: $(Build.SourcesDirectory)
          displayName: 'Run functional tests'
          condition: and(succeeded(), ne(variables['SkipFunctionalTests'], 'true'))

        - script: |
            [ -f './test/functional/testresult.xml' ]
          displayName: 'Verify that functional test result file exists'
          workingDirectory: $(Build.SourcesDirectory)
          condition: and(succeeded(), ne(variables['SkipFunctionalTests'], 'true'))

        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'NUnit'
            testResultsFiles: 'testresult.xml'
            searchFolder: '$(Build.SourcesDirectory)/test/functional'
            failTaskOnFailedTests: true
            testRunTitle: 'Functional tests'
          displayName: 'Verify functional test result'
          condition: and(succeeded(), ne(variables['SkipFunctionalTests'], 'true'))

        - script: |
            npm pack
            npm install -g appcenter-cli*.tgz
          displayName: 'Package appcenter-cli'
          workingDirectory: $(Build.SourcesDirectory)

        - task: DeleteFiles@1
          inputs:
            contents: node_modules
          displayName: 'Delete node_modules'

        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)'
            includeRootFolder: false
            archiveType: 'tar'
            archiveFile: '$(Build.ArtifactStagingDirectory)/npm/$(Build.BuildId).tgz'
            replaceExistingArchive: true
            verbose: true
          displayName: 'Prepare npm artifact'
    - stage: APIScan
      dependsOn: Stage
      pool:
        name: 1ES-PT-Windows-2022
        os: windows
      variables:
        "agent.source.skip": true
      jobs:
      - job: APIScan
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: Download Build Artifacts for APIScan
          inputs:
            artifactName: npm
        - script: |
            echo "Work folder:"
            tree $(Agent.BuildDirectory) /f

            echo "Artifacts folder:"
            tree $(System.ArtifactsDirectory) /f

            echo "Artifacts staging folder:"
            tree $(Build.ArtifactStagingDirectory) /f
          displayName: Check artifact folder
        - task: AzureKeyVault@2
          inputs:
            azureSubscription: 'AC - Dev Infra & Build Pool'
            KeyVaultName: 'mobile-center-sdk'
            SecretsFilter: 'appcenter-sdk-managed-identity-clientid'
            RunAsPreJob: false
        - task: APIScan@2
          displayName: 'Run APIScan'
          inputs:
            softwareFolder: '$(System.ArtifactsDirectory)'
            softwareName: 'appcenter-cli'
            softwareVersionNum: Latest
            isLargeApp: false
            verbosityLevel: verbose
          condition: and(succeeded(), ne(variables['DisableAPIScan'], 'true'))
          env:
            AzureServicesAuthConnectionString: 'runAs=App;AppId=$(appcenter-sdk-managed-identity-clientid)'
